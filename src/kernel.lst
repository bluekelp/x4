     1                                  ; x4.asm   - x4 main kernel source   (c) 2000+ mark i manning iv
     2                                  ; ========================================================================
     3                                  
     4                                    bits 32                   ; This field intentionally NOT left blank
     5                                  
     6                                    %define ver $0118         ; hi byte = maj ver : lo byte = min ver
     7                                  
     8                                  ; ------------------------------------------------------------------------
     9                                  
    10                                    %include "macros.s"       ;macros to create headers etc
     1                              <1> ; macros.1       - x4 macro definitions
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> %define ALIAS $20           ; lex flag: mark word as alias
     5                              <1> %define IMM   $40           ; lex flag: mark word as immediate
     6                              <1> %define LEX   $1f           ; max to remove lex bits from cfa length
     7                              <1> %define CELL  4             ; size of once memory cell
     8                              <1> %define BODY  5             ; length of cfa = 5 bytes for call opcode
     9                              <1> %define MEMSZ $100000       ; one meg
    10                              <1> %define STKSZ $1000         ; 4k (return stack size)
    11                              <1> %define FLDSZ 36 * 5        ; fload stack size (5 nested floads max)
    12                              <1> %define TIBSZ $400          ; terminal input buffer size
    13                              <1> 
    14                              <1> ; ------------------------------------------------------------------------
    15                              <1> 
    16                              <1> %xdefine imm 0              ; set to $40 to make next word immediate
    17                              <1> 
    18                              <1> %xdefine vlink 0            ; link to previous word in vocabulary
    19                              <1> 
    20                              <1> %xdefine forth_link 0       ; link to previous word in forth vocab
    21                              <1> %xdefine comp_link 0        ; link to previous word in compiler vocab
    22                              <1> %xdefine root_link 0        ; link to previous word in root vocab
    23                              <1> 
    24                              <1> %xdefine voc 0              ; currently linking to forth vocabulary
    25                              <1> 
    26                              <1> ; ------------------------------------------------------------------------
    27                              <1> ; debugg verion must be jump next
    28                              <1> 
    29                              <1> ; %define inline              ; comment out for jump next
    30                              <1> 
    31                              <1> ; ------------------------------------------------------------------------
    32                              <1> ; define 'next' macro
    33                              <1> 
    34                              <1> %ifdef inline
    35                              <1>   %macro next 0
    36                              <1>    lodsd                    ; get next execution token
    37                              <1>    jmp eax                  ; execute it
    38                              <1>   %endmacro
    39                              <1> %else
    40                              <1>   %macro next 0
    41                              <1>    jmp _next
    42                              <1>   %endmacro
    43                              <1> %endif
    44                              <1> 
    45                              <1> ; ------------------------------------------------------------------------
    46                              <1> ; make next assembled word an immediate word
    47                              <1> 
    48                              <1> %macro _immediate_ 0
    49                              <1>   %xdefine imm IMM
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> ; ------------------------------------------------------------------------
    53                              <1> ; flag following word as headerless
    54                              <1> 
    55                              <1> %macro _noname_ 0
    56                              <1>   dd 0                      ; null nfa pointer at cfa -4
    57                              <1> %endmacro
    58                              <1> 
    59                              <1> ; ------------------------------------------------------------------------
    60                              <1> ; sub macro to compile headers for forth words.
    61                              <1> 
    62                              <1> %macro header 2
    63                              <1> [section headers]
    64                              <1>   dd vlink                  ; link to previous word in vocabulary
    65                              <1> %%link:
    66                              <1> %2n:
    67                              <1> %xdefine vlink %%link
    68                              <1>   db (%%name-$-1)+imm       ; name length + flags
    69                              <1>   db %1                     ; name
    70                              <1> %%name:
    71                              <1>   dd %2                     ; pointer to cfa (in .data section)
    72                              <1> %xdefine imm 0
    73                              <1> ;__SECT__
    74                              <1> section list
    75                              <1>   dd %%link                 ; cfa -4 points to nfa
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> ; ------------------------------------------------------------------------
    79                              <1> ; compile a header in head space for a coded definition
    80                              <1> 
    81                              <1> %macro code 2
    82                              <1>   header %1,%2              ; create header in head space
    83                              <1> %2:                         ; make label for new coded definition
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> ; ------------------------------------------------------------------------
    87                              <1> ; compile a header in head space for a high level definition
    88                              <1> 
    89                              <1> %macro colon 2
    90                              <1>   header %1,%2              ; create header which will point at
    91                              <1> %2:                         ; this label as its code vector
    92                              <1>   call nest                 ; which calls the function to interpret
    93                              <1> %2_b:                       ; give body a label
    94                              <1> %endmacro                   ; what ever is assembled after this macro
    95                              <1> 
    96                              <1> ; ------------------------------------------------------------------------
    97                              <1> ; construct a forth variable
    98                              <1> 
    99                              <1> %macro _variable_ 3
   100                              <1>   code %1,%2
   101                              <1>   call dovariable
   102                              <1> %2_b:
   103                              <1>   dd %3
   104                              <1> %endmacro
   105                              <1> 
   106                              <1> ; ------------------------------------------------------------------------
   107                              <1> ; construct a forth constant
   108                              <1> 
   109                              <1> %macro _constant_ 3
   110                              <1>   code %1,%2
   111                              <1>   call doconstant
   112                              <1> %2_b:
   113                              <1>   dd %3
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> ; ------------------------------------------------------------------------
   117                              <1> ; construct a forth var (like value but with a descriptive name)
   118                              <1> 
   119                              <1> %macro _var_ 3
   120                              <1>   code %1,%2
   121                              <1>   call doconstant
   122                              <1> %2_b:
   123                              <1>   dd %3
   124                              <1> %endmacro
   125                              <1> 
   126                              <1> ; ------------------------------------------------------------------------
   127                              <1> 
   128                              <1> %macro _defer_ 3
   129                              <1>   code %1,%2
   130                              <1>   call dodefer
   131                              <1> %2_b:
   132                              <1>   dd %3
   133                              <1> %endmacro
   134                              <1> 
   135                              <1> ; ------------------------------------------------------------------------
   136                              <1> ; macro - create a syscall word
   137                              <1> 
   138                              <1> %macro _syscall_ 4
   139                              <1>   code %1,%2
   140                              <1>   call do_syscall
   141                              <1> %2_b:
   142                              <1>   db %3,%4
   143                              <1> %endmacro
   144                              <1> 
   145                              <1> ; ------------------------------------------------------------------------
   146                              <1> 
   147                              <1> %macro _vocab_ 4
   148                              <1>   code %1,%2
   149                              <1>   call dovoc
   150                              <1> %2_b:
   151                              <1>   dd %3
   152                              <1>   times 63 dd 0
   153                              <1>   dd %4
   154                              <1> %endmacro
   155                              <1> 
   156                              <1> ; ------------------------------------------------------------------------
   157                              <1> ; save voclink to current vocabs link variable
   158                              <1> 
   159                              <1> %macro save_link 0
   160                              <1>  %if(voc = 0)               ; were we linking on the forth vocabulary ?
   161                              <1>   %xdefine forth_link vlink ; yes - set new end of forth vocab
   162                              <1>  %elif(voc = 1)             ; were we linking on the compiler vocabulary ?
   163                              <1>   %xdefine comp_link vlink  ; yes - set new end of compiler vocab
   164                              <1>  %else
   165                              <1>   %xdefine root_link vlink  ; musta been root vocab then. set new end
   166                              <1>  %endif
   167                              <1> %endmacro
   168                              <1> 
   169                              <1> ; ------------------------------------------------------------------------
   170                              <1> ; link all new definitions to the forth vocabulary
   171                              <1> 
   172                              <1> %macro _forth_ 0
   173                              <1>  save_link                  ; save link address of previous vocabulary
   174                              <1>  %xdefine vlink forth_link  ; start linking on forth vocabulary
   175                              <1>  %define voc 0
   176                              <1> %endmacro
   177                              <1> 
   178                              <1> ; ------------------------------------------------------------------------
   179                              <1> ; link all new definitions to the compiler vocabulary
   180                              <1> 
   181                              <1> %macro _compiler_ 0
   182                              <1>  save_link                  ; save link address of previous vocabulary
   183                              <1>  %xdefine vlink comp_link   ; start linking on compiler vocabulary
   184                              <1>  %define voc 1
   185                              <1> %endmacro
   186                              <1> 
   187                              <1> ; ------------------------------------------------------------------------
   188                              <1> ; link all new definitions to the root vocabulary
   189                              <1> 
   190                              <1> %macro _root_ 0
   191                              <1>  save_link                  ; save link address of previous vocabulary
   192                              <1>  %xdefine vlink root_link   ; start linking on root vocabulary
   193                              <1>  %xdefine voc 2
   194                              <1> %endmacro
   195                              <1> 
   196                              <1> ; ========================================================================
    11                                  
    12                                  ; ------------------------------------------------------------------------
    13                                  
    14                                   [section .text]
    15                                    global origin
    16                                  
    17                                  ; ------------------------------------------------------------------------
    18                                  ; entry point
    19                                  
    20                                  origin:
    21 00000000 E9(782C0000)              jmp init
    22                                  
    23                                  ; ------------------------------------------------------------------------
    24                                  
    25                                    [section list align = 4]
    26                                  
    27                                  ; ------------------------------------------------------------------------
    28                                  ; some important variables and constants
    29                                  
    30                                    _forth_                   ; chain words on forth vocabulary (default)
    30                              <1>  save_link
    30                              <2>  %if(voc = 0)
    30                              <2>  %xdefine forth_link vlink
    30                              <2>  %elif(voc = 1)
    30                              <2>  %xdefine comp_link vlink
    30                              <2>  %else
    30                              <2>  %xdefine root_link vlink
    30                              <2>  %endif
    30                              <1>  %xdefine vlink forth_link
    30                              <1>  %define voc 0
    31                                  
    32                                    _constant_ 'origin', org, origin
    32                              <1>  code %1,%2
    32                              <2>  header %1,%2
    32                              <3> [section headers]
    32 00000000 00000000            <3>  dd vlink
    32                              <3> %%link:
    32                              <3> %2n:
    32                              <3> %xdefine vlink %%link
    32 00000004 06                  <3>  db (%%name-$-1)+imm
    32 00000005 6F726967696E        <3>  db %1
    32                              <3> %%name:
    32 0000000B [04000000]          <3>  dd %2
    32                              <3> %xdefine imm 0
    32                              <3> 
    32                              <3> section list
    32 00000000 [04000000]          <3>  dd %%link
    32                              <2> %2:
    32 00000004 E8A60D0000          <1>  call doconstant
    32                              <1> %2_b:
    32 00000009 [00000000]          <1>  dd %3
    33                                    _constant_ 'version', version, ver
    33                              <1>  code %1,%2
    33                              <2>  header %1,%2
    33                              <3> [section headers]
    33 0000000F [04000000]          <3>  dd vlink
    33                              <3> %%link:
    33                              <3> %2n:
    33                              <3> %xdefine vlink %%link
    33 00000013 07                  <3>  db (%%name-$-1)+imm
    33 00000014 76657273696F6E      <3>  db %1
    33                              <3> %%name:
    33 0000001B [11000000]          <3>  dd %2
    33                              <3> %xdefine imm 0
    33                              <3> 
    33                              <3> section list
    33 0000000D [13000000]          <3>  dd %%link
    33                              <2> %2:
    33 00000011 E8990D0000          <1>  call doconstant
    33                              <1> %2_b:
    33 00000016 18010000            <1>  dd %3
    34                                  
    35                                    _constant_ 'thead', thead, 0   ; address of top of head space
    35                              <1>  code %1,%2
    35                              <2>  header %1,%2
    35                              <3> [section headers]
    35 0000001F [13000000]          <3>  dd vlink
    35                              <3> %%link:
    35                              <3> %2n:
    35                              <3> %xdefine vlink %%link
    35 00000023 05                  <3>  db (%%name-$-1)+imm
    35 00000024 7468656164          <3>  db %1
    35                              <3> %%name:
    35 00000029 [1E000000]          <3>  dd %2
    35                              <3> %xdefine imm 0
    35                              <3> 
    35                              <3> section list
    35 0000001A [23000000]          <3>  dd %%link
    35                              <2> %2:
    35 0000001E E88C0D0000          <1>  call doconstant
    35                              <1> %2_b:
    35 00000023 00000000            <1>  dd %3
    36                                    _constant_ 'head0', bhead, 0   ; address of bottom of head space
    36                              <1>  code %1,%2
    36                              <2>  header %1,%2
    36                              <3> [section headers]
    36 0000002D [23000000]          <3>  dd vlink
    36                              <3> %%link:
    36                              <3> %2n:
    36                              <3> %xdefine vlink %%link
    36 00000031 05                  <3>  db (%%name-$-1)+imm
    36 00000032 6865616430          <3>  db %1
    36                              <3> %%name:
    36 00000037 [2B000000]          <3>  dd %2
    36                              <3> %xdefine imm 0
    36                              <3> 
    36                              <3> section list
    36 00000027 [31000000]          <3>  dd %%link
    36                              <2> %2:
    36 0000002B E87F0D0000          <1>  call doconstant
    36                              <1> %2_b:
    36 00000030 00000000            <1>  dd %3
    37                                  
    38                                    _constant_ 'arg0', arg0, 0     ; program name
    38                              <1>  code %1,%2
    38                              <2>  header %1,%2
    38                              <3> [section headers]
    38 0000003B [31000000]          <3>  dd vlink
    38                              <3> %%link:
    38                              <3> %2n:
    38                              <3> %xdefine vlink %%link
    38 0000003F 04                  <3>  db (%%name-$-1)+imm
    38 00000040 61726730            <3>  db %1
    38                              <3> %%name:
    38 00000044 [38000000]          <3>  dd %2
    38                              <3> %xdefine imm 0
    38                              <3> 
    38                              <3> section list
    38 00000034 [3F000000]          <3>  dd %%link
    38                              <2> %2:
    38 00000038 E8720D0000          <1>  call doconstant
    38                              <1> %2_b:
    38 0000003D 00000000            <1>  dd %3
    39                                    _constant_ 'argc', argc, 0     ; arg count
    39                              <1>  code %1,%2
    39                              <2>  header %1,%2
    39                              <3> [section headers]
    39 00000048 [3F000000]          <3>  dd vlink
    39                              <3> %%link:
    39                              <3> %2n:
    39                              <3> %xdefine vlink %%link
    39 0000004C 04                  <3>  db (%%name-$-1)+imm
    39 0000004D 61726763            <3>  db %1
    39                              <3> %%name:
    39 00000051 [45000000]          <3>  dd %2
    39                              <3> %xdefine imm 0
    39                              <3> 
    39                              <3> section list
    39 00000041 [4C000000]          <3>  dd %%link
    39                              <2> %2:
    39 00000045 E8650D0000          <1>  call doconstant
    39                              <1> %2_b:
    39 0000004A 00000000            <1>  dd %3
    40                                    _constant_ 'argp', argp, 0     ; address of args on stack
    40                              <1>  code %1,%2
    40                              <2>  header %1,%2
    40                              <3> [section headers]
    40 00000055 [4C000000]          <3>  dd vlink
    40                              <3> %%link:
    40                              <3> %2n:
    40                              <3> %xdefine vlink %%link
    40 00000059 04                  <3>  db (%%name-$-1)+imm
    40 0000005A 61726770            <3>  db %1
    40                              <3> %%name:
    40 0000005E [52000000]          <3>  dd %2
    40                              <3> %xdefine imm 0
    40                              <3> 
    40                              <3> section list
    40 0000004E [59000000]          <3>  dd %%link
    40                              <2> %2:
    40 00000052 E8580D0000          <1>  call doconstant
    40                              <1> %2_b:
    40 00000057 00000000            <1>  dd %3
    41                                    _constant_ 'envp', envp, 0     ; environment  vectors
    41                              <1>  code %1,%2
    41                              <2>  header %1,%2
    41                              <3> [section headers]
    41 00000062 [59000000]          <3>  dd vlink
    41                              <3> %%link:
    41                              <3> %2n:
    41                              <3> %xdefine vlink %%link
    41 00000066 04                  <3>  db (%%name-$-1)+imm
    41 00000067 656E7670            <3>  db %1
    41                              <3> %%name:
    41 0000006B [5F000000]          <3>  dd %2
    41                              <3> %xdefine imm 0
    41                              <3> 
    41                              <3> section list
    41 0000005B [66000000]          <3>  dd %%link
    41                              <2> %2:
    41 0000005F E84B0D0000          <1>  call doconstant
    41                              <1> %2_b:
    41 00000064 00000000            <1>  dd %3
    42                                    _constant_ 'auxp', auxp, 0     ; aux vectors
    42                              <1>  code %1,%2
    42                              <2>  header %1,%2
    42                              <3> [section headers]
    42 0000006F [66000000]          <3>  dd vlink
    42                              <3> %%link:
    42                              <3> %2n:
    42                              <3> %xdefine vlink %%link
    42 00000073 04                  <3>  db (%%name-$-1)+imm
    42 00000074 61757870            <3>  db %1
    42                              <3> %%name:
    42 00000078 [6C000000]          <3>  dd %2
    42                              <3> %xdefine imm 0
    42                              <3> 
    42                              <3> section list
    42 00000068 [73000000]          <3>  dd %%link
    42                              <2> %2:
    42 0000006C E83E0D0000          <1>  call doconstant
    42                              <1> %2_b:
    42 00000071 00000000            <1>  dd %3
    43                                  
    44                                    _constant_ 'shebang', shebang, 0
    44                              <1>  code %1,%2
    44                              <2>  header %1,%2
    44                              <3> [section headers]
    44 0000007C [73000000]          <3>  dd vlink
    44                              <3> %%link:
    44                              <3> %2n:
    44                              <3> %xdefine vlink %%link
    44 00000080 07                  <3>  db (%%name-$-1)+imm
    44 00000081 73686562616E67      <3>  db %1
    44                              <3> %%name:
    44 00000088 [79000000]          <3>  dd %2
    44                              <3> %xdefine imm 0
    44                              <3> 
    44                              <3> section list
    44 00000075 [80000000]          <3>  dd %%link
    44                              <2> %2:
    44 00000079 E8310D0000          <1>  call doconstant
    44                              <1> %2_b:
    44 0000007E 00000000            <1>  dd %3
    45                                    _constant_ 'intty', intty, 0
    45                              <1>  code %1,%2
    45                              <2>  header %1,%2
    45                              <3> [section headers]
    45 0000008C [80000000]          <3>  dd vlink
    45                              <3> %%link:
    45                              <3> %2n:
    45                              <3> %xdefine vlink %%link
    45 00000090 05                  <3>  db (%%name-$-1)+imm
    45 00000091 696E747479          <3>  db %1
    45                              <3> %%name:
    45 00000096 [86000000]          <3>  dd %2
    45                              <3> %xdefine imm 0
    45                              <3> 
    45                              <3> section list
    45 00000082 [90000000]          <3>  dd %%link
    45                              <2> %2:
    45 00000086 E8240D0000          <1>  call doconstant
    45                              <1> %2_b:
    45 0000008B 00000000            <1>  dd %3
    46                                    _constant_ 'outtty', outtty, 0
    46                              <1>  code %1,%2
    46                              <2>  header %1,%2
    46                              <3> [section headers]
    46 0000009A [90000000]          <3>  dd vlink
    46                              <3> %%link:
    46                              <3> %2n:
    46                              <3> %xdefine vlink %%link
    46 0000009E 06                  <3>  db (%%name-$-1)+imm
    46 0000009F 6F7574747479        <3>  db %1
    46                              <3> %%name:
    46 000000A5 [93000000]          <3>  dd %2
    46                              <3> %xdefine imm 0
    46                              <3> 
    46                              <3> section list
    46 0000008F [9E000000]          <3>  dd %%link
    46                              <2> %2:
    46 00000093 E8170D0000          <1>  call doconstant
    46                              <1> %2_b:
    46 00000098 00000000            <1>  dd %3
    47                                  
    48                                  ; ------------------------------------------------------------------------
    49                                  
    50                                    _var_ 'heap-prot', heap_prt, 7     ; +rwx
    50                              <1>  code %1,%2
    50                              <2>  header %1,%2
    50                              <3> [section headers]
    50 000000A9 [9E000000]          <3>  dd vlink
    50                              <3> %%link:
    50                              <3> %2n:
    50                              <3> %xdefine vlink %%link
    50 000000AD 09                  <3>  db (%%name-$-1)+imm
    50 000000AE 686561702D70726F74  <3>  db %1
    50                              <3> %%name:
    50 000000B7 [A0000000]          <3>  dd %2
    50                              <3> %xdefine imm 0
    50                              <3> 
    50                              <3> section list
    50 0000009C [AD000000]          <3>  dd %%link
    50                              <2> %2:
    50 000000A0 E80A0D0000          <1>  call doconstant
    50                              <1> %2_b:
    50 000000A5 07000000            <1>  dd %3
    51                                    _var_ 'heap-flags', heap_flg, $22  ; anonymous private
    51                              <1>  code %1,%2
    51                              <2>  header %1,%2
    51                              <3> [section headers]
    51 000000BB [AD000000]          <3>  dd vlink
    51                              <3> %%link:
    51                              <3> %2n:
    51                              <3> %xdefine vlink %%link
    51 000000BF 0A                  <3>  db (%%name-$-1)+imm
    51 000000C0 686561702D666C6167- <3>  db %1
    51 000000C9 73                  <3>
    51                              <3> %%name:
    51 000000CA [AD000000]          <3>  dd %2
    51                              <3> %xdefine imm 0
    51                              <3> 
    51                              <3> section list
    51 000000A9 [BF000000]          <3>  dd %%link
    51                              <2> %2:
    51 000000AD E8FD0C0000          <1>  call doconstant
    51                              <1> %2_b:
    51 000000B2 22000000            <1>  dd %3
    52                                  
    53                                  ; ------------------------------------------------------------------------
    54                                  ; these need a better home
    55                                  
    56                                    _constant_ 'turnkeyd', turnkeyd, 0 ; true if we are a turnkeyd app
    56                              <1>  code %1,%2
    56                              <2>  header %1,%2
    56                              <3> [section headers]
    56 000000CE [BF000000]          <3>  dd vlink
    56                              <3> %%link:
    56                              <3> %2n:
    56                              <3> %xdefine vlink %%link
    56 000000D2 08                  <3>  db (%%name-$-1)+imm
    56 000000D3 7475726E6B657964    <3>  db %1
    56                              <3> %%name:
    56 000000DB [BA000000]          <3>  dd %2
    56                              <3> %xdefine imm 0
    56                              <3> 
    56                              <3> section list
    56 000000B6 [D2000000]          <3>  dd %%link
    56                              <2> %2:
    56 000000BA E8F00C0000          <1>  call doconstant
    56                              <1> %2_b:
    56 000000BF 00000000            <1>  dd %3
    57                                    _variable_ '?tty', qtty, 0         ; flag: term initialized already ?
    57                              <1>  code %1,%2
    57                              <2>  header %1,%2
    57                              <3> [section headers]
    57 000000DF [D2000000]          <3>  dd vlink
    57                              <3> %%link:
    57                              <3> %2n:
    57                              <3> %xdefine vlink %%link
    57 000000E3 04                  <3>  db (%%name-$-1)+imm
    57 000000E4 3F747479            <3>  db %1
    57                              <3> %%name:
    57 000000E8 [C7000000]          <3>  dd %2
    57                              <3> %xdefine imm 0
    57                              <3> 
    57                              <3> section list
    57 000000C3 [E3000000]          <3>  dd %%link
    57                              <2> %2:
    57 000000C7 E8F10C0000          <1>  call dovariable
    57                              <1> %2_b:
    57 000000CC 00000000            <1>  dd %3
    58                                  
    59                                  ; ------------------------------------------------------------------------
    60                                  
    61                                    _defer_ 'pdefault', _pdefault, noop
    61                              <1>  code %1,%2
    61                              <2>  header %1,%2
    61                              <3> [section headers]
    61 000000EC [E3000000]          <3>  dd vlink
    61                              <3> %%link:
    61                              <3> %2n:
    61                              <3> %xdefine vlink %%link
    61 000000F0 08                  <3>  db (%%name-$-1)+imm
    61 000000F1 7064656661756C74    <3>  db %1
    61                              <3> %%name:
    61 000000F9 [D4000000]          <3>  dd %2
    61                              <3> %xdefine imm 0
    61                              <3> 
    61                              <3> section list
    61 000000D0 [F0000000]          <3>  dd %%link
    61                              <2> %2:
    61 000000D4 E8F00C0000          <1>  call dodefer
    61                              <1> %2_b:
    61 000000D9 [FC0C0000]          <1>  dd %3
    62                                    _defer_ 'default',  _default,  noop
    62                              <1>  code %1,%2
    62                              <2>  header %1,%2
    62                              <3> [section headers]
    62 000000FD [F0000000]          <3>  dd vlink
    62                              <3> %%link:
    62                              <3> %2n:
    62                              <3> %xdefine vlink %%link
    62 00000101 07                  <3>  db (%%name-$-1)+imm
    62 00000102 64656661756C74      <3>  db %1
    62                              <3> %%name:
    62 00000109 [E1000000]          <3>  dd %2
    62                              <3> %xdefine imm 0
    62                              <3> 
    62                              <3> section list
    62 000000DD [01010000]          <3>  dd %%link
    62                              <2> %2:
    62 000000E1 E8E30C0000          <1>  call dodefer
    62                              <1> %2_b:
    62 000000E6 [FC0C0000]          <1>  dd %3
    63                                    _defer_ 'ldefault', _ldefault, rehash
    63                              <1>  code %1,%2
    63                              <2>  header %1,%2
    63                              <3> [section headers]
    63 0000010D [01010000]          <3>  dd vlink
    63                              <3> %%link:
    63                              <3> %2n:
    63                              <3> %xdefine vlink %%link
    63 00000111 08                  <3>  db (%%name-$-1)+imm
    63 00000112 6C64656661756C74    <3>  db %1
    63                              <3> %%name:
    63 0000011A [EE000000]          <3>  dd %2
    63                              <3> %xdefine imm 0
    63                              <3> 
    63                              <3> section list
    63 000000EA [11010000]          <3>  dd %%link
    63                              <2> %2:
    63 000000EE E8D60C0000          <1>  call dodefer
    63                              <1> %2_b:
    63 000000F3 [68260000]          <1>  dd %3
    64                                  
    65                                    _defer_ 'atexit', atexit,  noop
    65                              <1>  code %1,%2
    65                              <2>  header %1,%2
    65                              <3> [section headers]
    65 0000011E [11010000]          <3>  dd vlink
    65                              <3> %%link:
    65                              <3> %2n:
    65                              <3> %xdefine vlink %%link
    65 00000122 06                  <3>  db (%%name-$-1)+imm
    65 00000123 617465786974        <3>  db %1
    65                              <3> %%name:
    65 00000129 [FB000000]          <3>  dd %2
    65                              <3> %xdefine imm 0
    65                              <3> 
    65                              <3> section list
    65 000000F7 [22010000]          <3>  dd %%link
    65                              <2> %2:
    65 000000FB E8C90C0000          <1>  call dodefer
    65                              <1> %2_b:
    65 00000100 [FC0C0000]          <1>  dd %3
    66                                  
    67                                    _defer_ '.s',  dots,  noop
    67                              <1>  code %1,%2
    67                              <2>  header %1,%2
    67                              <3> [section headers]
    67 0000012D [22010000]          <3>  dd vlink
    67                              <3> %%link:
    67                              <3> %2n:
    67                              <3> %xdefine vlink %%link
    67 00000131 02                  <3>  db (%%name-$-1)+imm
    67 00000132 2E73                <3>  db %1
    67                              <3> %%name:
    67 00000134 [08010000]          <3>  dd %2
    67                              <3> %xdefine imm 0
    67                              <3> 
    67                              <3> section list
    67 00000104 [31010000]          <3>  dd %%link
    67                              <2> %2:
    67 00000108 E8BC0C0000          <1>  call dodefer
    67                              <1> %2_b:
    67 0000010D [FC0C0000]          <1>  dd %3
    68                                    _defer_ '.us', dotus, noop
    68                              <1>  code %1,%2
    68                              <2>  header %1,%2
    68                              <3> [section headers]
    68 00000138 [31010000]          <3>  dd vlink
    68                              <3> %%link:
    68                              <3> %2n:
    68                              <3> %xdefine vlink %%link
    68 0000013C 03                  <3>  db (%%name-$-1)+imm
    68 0000013D 2E7573              <3>  db %1
    68                              <3> %%name:
    68 00000140 [15010000]          <3>  dd %2
    68                              <3> %xdefine imm 0
    68                              <3> 
    68                              <3> section list
    68 00000111 [3C010000]          <3>  dd %%link
    68                              <2> %2:
    68 00000115 E8AF0C0000          <1>  call dodefer
    68                              <1> %2_b:
    68 0000011A [FC0C0000]          <1>  dd %3
    69                                  
    70                                  ; ------------------------------------------------------------------------
    71                                  
    72                                  _fetchmap:
    73 0000011E 6A00                      push 0                    ; offset_t
    74 00000120 6AFF                      push -1                   ; fd
    75 00000122 52                        push edx                  ; flags
    76 00000123 51                        push ecx                  ; prot
    77 00000124 53                        push ebx                  ; size
    78 00000125 6A00                      push 0                    ; *start
    79 00000127 89E3                      mov ebx, esp              ; point edx at parameters
    80 00000129 B85A000000                mov eax, $5a              ; mmap
    81 0000012E CD80                      int $80
    82 00000130 83C418                    add esp, 24
    83 00000133 C3                        ret
    84                                  
    85                                  ; ------------------------------------------------------------------------
    86                                  ; part of the memory manager extension
    87                                  
    88                                  ;     ( flags prot size --- )
    89                                  
    90                                  code '@map', fmap
    90                              <1>  header %1,%2
    90                              <2> [section headers]
    90 00000144 [3C010000]          <2>  dd vlink
    90                              <2> %%link:
    90                              <2> %2n:
    90                              <2> %xdefine vlink %%link
    90 00000148 04                  <2>  db (%%name-$-1)+imm
    90 00000149 406D6170            <2>  db %1
    90                              <2> %%name:
    90 0000014D [38010000]          <2>  dd %2
    90                              <2> %xdefine imm 0
    90                              <2> 
    90                              <2> section list
    90 00000134 [48010000]          <2>  dd %%link
    90                              <1> %2:
    91 00000138 8B0D[A5000000]            mov ecx, [heap_prt_b]
    92 0000013E 8B15[B2000000]            mov edx, [heap_flg_b]
    93                                  
    94 00000144 E8D5FFFFFF                call _fetchmap
    95                                  
    96 00000149 3D00F0FFFF                cmp eax, $0fffff000
    97 0000014E 760A                      jbe .L1
    98                                  
    99 00000150 BBFFFFFFFF                mov ebx, -1
   100                                    next
   100 00000155 E9B10B0000          <1>  jmp _next
   101                                  .L1:
   102 0000015A 50                        push eax
   103 0000015B 31DB                      xor ebx, ebx
   104                                    next
   104 0000015D E9A90B0000          <1>  jmp _next
   105                                  
   106                                  ; ------------------------------------------------------------------------
   107                                  ; the beef (moo!)
   108                                  
   109                                    %include "syscalls.s"     ; interface to the 'BIOS' ;)
     1                              <1> ; syscalls.s     - x4 linux syscall interface words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _var_ 'errno', errno, 0
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 00000151 [48010000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 00000155 05                  <4>  db (%%name-$-1)+imm
     6 00000156 6572726E6F          <4>  db %1
     6                              <4> %%name:
     6 0000015B [66010000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 00000162 [55010000]          <4>  dd %%link
     6                              <3> %2:
     6 00000166 E8440C0000          <2>  call doconstant
     6                              <2> %2_b:
     6 0000016B 00000000            <2>  dd %3
     7                              <1> 
     8                              <1> ; ------------------------------------------------------------------------
     9                              <1> ; scratchpad area used by the mmap syscall
    10                              <1> 
    11 0000016F 00000000<rept>      <1> sys_pad:  times 6 dd 0
    12                              <1> 
    13                              <1> ; ------------------------------------------------------------------------
    14                              <1> ; syscall that takes no parameters (or we already have them)
    15                              <1> 
    16                              <1> ;       ( --- n1 | false )
    17                              <1> 
    18                              <1> sys0:
    19 00000187 CD80                <1>   int $80                   ; do syscall eax
    20 00000189 3D00F0FFFF          <1>   cmp eax, $0fffff000       ; did an error occurr?
    21 0000018E 760C                <1>   jbe .L1
    22                              <1> 
    23                              <1>   ; oopts - something fubared!
    24                              <1> 
    25 00000190 F7D8                <1>   neg eax                   ; get errno value
    26 00000192 A3[6B010000]        <1>   mov [errno+5], eax        ; set errno value for caller to handle
    27 00000197 B8FFFFFFFF          <1>   mov eax, -1               ; tell caller something fubared
    28                              <1> 
    29                              <1> .L1:
    30 0000019C 89C3                <1>   mov ebx, eax              ; ebx = top of parameter stack
    31 0000019E 5D                  <1>   pop ebp
    32 0000019F 87EC                <1>   xchg ebp, esp
    33 000001A1 5E                  <1>   pop esi
    34 000001A2 87EC                <1>   xchg ebp, esp
    35                              <1>   next
    35 000001A4 E9620B0000          <2>  jmp _next
    36                              <1> 
    37                              <1> ; ------------------------------------------------------------------------
    38                              <1> ; syscall that takes one parameter
    39                              <1> 
    40                              <1> sys1:
    41 000001A9 5B                  <1>   pop ebx
    42 000001AA 55                  <1>   push ebp
    43 000001AB EBDA                <1>   jmp sys0
    44                              <1> 
    45                              <1> ; ------------------------------------------------------------------------
    46                              <1> ; syscall that takes 2 parameters
    47                              <1> 
    48                              <1> sys2:
    49 000001AD 5B                  <1>   pop ebx
    50 000001AE 59                  <1>   pop ecx
    51 000001AF 55                  <1>   push ebp
    52 000001B0 EBD5                <1>   jmp sys0
    53                              <1> 
    54                              <1> ; ------------------------------------------------------------------------
    55                              <1> ; etc
    56                              <1> 
    57                              <1> sys3:
    58 000001B2 5B                  <1>   pop ebx
    59 000001B3 59                  <1>   pop ecx
    60 000001B4 5A                  <1>   pop edx
    61 000001B5 55                  <1>   push ebp
    62 000001B6 EBCF                <1>   jmp sys0
    63                              <1> 
    64                              <1> ; ------------------------------------------------------------------------
    65                              <1> 
    66                              <1> sys4:
    67 000001B8 5B                  <1>   pop ebx
    68 000001B9 59                  <1>   pop ecx
    69 000001BA 5A                  <1>   pop edx
    70 000001BB 5E                  <1>   pop esi
    71 000001BC 55                  <1>   push ebp
    72 000001BD EBC8                <1>   jmp sys0
    73                              <1> 
    74                              <1> ; ------------------------------------------------------------------------
    75                              <1> 
    76                              <1> sys5:
    77 000001BF 5B                  <1>   pop ebx
    78 000001C0 59                  <1>   pop ecx
    79 000001C1 5A                  <1>   pop edx
    80 000001C2 5E                  <1>   pop esi
    81 000001C3 5F                  <1>   pop edi
    82 000001C4 55                  <1>   push ebp
    83 000001C5 EBC0                <1>   jmp sys0
    84                              <1> 
    85                              <1> ; ------------------------------------------------------------------------
    86                              <1> ; use of this limits your code to kernel 2.4+
    87                              <1> 
    88                              <1> sys6:
    89 000001C7 5B                  <1>   pop ebx
    90 000001C8 59                  <1>   pop ecx
    91 000001C9 5A                  <1>   pop edx
    92 000001CA 5E                  <1>   pop esi
    93 000001CB 5F                  <1>   pop edi
    94 000001CC 872C24              <1>   xchg ebp, [esp]
    95 000001CF EBB6                <1>   jmp sys0
    96                              <1> 
    97                              <1> ; ------------------------------------------------------------------------
    98                              <1> ; table of syscall handlers for different number of parameters
    99                              <1> 
   100                              <1> sysexe:
   101 000001D1 [87010000]-         <1>   dd sys0, sys1, sys2, sys3, sys4, sys5, sys6
   101 000001D5 [A9010000]-         <1>
   101 000001D9 [AD010000]-         <1>
   101 000001DD [B2010000]-         <1>
   101 000001E1 [B8010000]-         <1>
   101 000001E5 [BF010000]-         <1>
   101 000001E9 [C7010000]          <1>
   102                              <1> 
   103                              <1> ; ------------------------------------------------------------------------
   104                              <1> ; this allows all versions of x4 to pass mmap parameters on the stack
   105                              <1> 
   106                              <1> _mmap:
   107 000001ED 89D9                <1>   mov ecx, ebx              ; put parameter count in ecx
   108 000001EF BB[6F010000]        <1>   mov ebx, sys_pad          ; point to buffer to store parameters
   109 000001F4 89DA                <1>   mov edx, ebx              ; point to start of buffered parameters
   110                              <1> 
   111                              <1> .L0:
   112 000001F6 8F02                <1>   pop dword [edx]           ; pop parameter into buffer
   113 000001F8 83C204              <1>   add edx, byte 4           ; advance pointer
   114 000001FB 49                  <1>   dec ecx                   ; got all parameters yet ?
   115 000001FC 75F8                <1>   jne .L0
   116 000001FE 55                  <1>   push ebp
   117 000001FF EB86                <1>   jmp sys0                  ; yes... do syscall
   118                              <1> 
   119                              <1> ; ------------------------------------------------------------------------
   120                              <1> ; all syscalls go through here
   121                              <1> 
   122                              <1> ;       ( a1 --- n1 | false )
   123                              <1> 
   124                              <1> do_syscall:
   125 00000201 87EC                <1>   xchg ebp, esp             ; save esi on return stack
   126 00000203 56                  <1>   push esi
   127 00000204 87EC                <1>   xchg ebp, esp
   128                              <1> 
   129 00000206 871C24              <1>   xchg ebx, [esp]           ; get body address of syscall word (a1)
   130 00000209 0FB603              <1>   movzx eax, byte [ebx]     ; get syscall number from body
   131 0000020C 0FB65B01            <1>   movzx ebx, byte [ebx+1]   ; get number of parameters for this call
   132                              <1> 
   133 00000210 3C5A                <1>   cmp al, 05ah              ; is this a sys_mmap ?
   134 00000212 74D9                <1>   je _mmap
   135                              <1> 
   136 00000214 FF249D[D1010000]    <1>   jmp [sysexe+4*ebx]        ; do syscall
   137                              <1> 
   138                              <1> ;-------------------------------------------------------------------------
   139                              <1> 
   140                              <1> code 'do-signal', do_signal
   140                              <2>  header %1,%2
   140                              <3> [section headers]
   140 0000015F [55010000]          <3>  dd vlink
   140                              <3> %%link:
   140                              <3> %2n:
   140                              <3> %xdefine vlink %%link
   140 00000163 09                  <3>  db (%%name-$-1)+imm
   140 00000164 646F2D7369676E616C  <3>  db %1
   140                              <3> %%name:
   140 0000016D [1F020000]          <3>  dd %2
   140                              <3> %xdefine imm 0
   140                              <3> 
   140                              <3> section list
   140 0000021B [63010000]          <3>  dd %%link
   140                              <2> %2:
   141 0000021F 60                  <1>   pushad                    ; save all registers
   142 00000220 89E0                <1>   mov eax, esp
   143 00000222 BE[2C020000]        <1>   mov esi, sigx             ; make handler exit to sigx
   144 00000227 8B4020              <1>   mov eax, [eax+32]         ; get address of pointer to handler
   145 0000022A FF20                <1>   jmp [eax]                 ; jump into handler
   146                              <1> 
   147                              <1> sigx:
   148 0000022C [30020000]          <1>   dd $+4                    ; a psudo forth execution token
   149 00000230 61                  <1>   popad
   150 00000231 83C404              <1>   add esp, 4
   151 00000234 C3                  <1>   ret
   152                              <1> 
   153                              <1> ; ------------------------------------------------------------------------
   154                              <1> ; only defining syscalls that the kernel needs.
   155                              <1> 
   156                              <1>   _syscall_ '<exit>', sys_exit, 1, 1
   156                              <2>  code %1,%2
   156                              <3>  header %1,%2
   156                              <4> [section headers]
   156 00000171 [63010000]          <4>  dd vlink
   156                              <4> %%link:
   156                              <4> %2n:
   156                              <4> %xdefine vlink %%link
   156 00000175 06                  <4>  db (%%name-$-1)+imm
   156 00000176 3C657869743E        <4>  db %1
   156                              <4> %%name:
   156 0000017C [39020000]          <4>  dd %2
   156                              <4> %xdefine imm 0
   156                              <4> 
   156                              <4> section list
   156 00000235 [75010000]          <4>  dd %%link
   156                              <3> %2:
   156 00000239 E8C3FFFFFF          <2>  call do_syscall
   156                              <2> %2_b:
   156 0000023E 0101                <2>  db %3,%4
   157                              <1>   _syscall_ '<read>', sys_read, 3, 3
   157                              <2>  code %1,%2
   157                              <3>  header %1,%2
   157                              <4> [section headers]
   157 00000180 [75010000]          <4>  dd vlink
   157                              <4> %%link:
   157                              <4> %2n:
   157                              <4> %xdefine vlink %%link
   157 00000184 06                  <4>  db (%%name-$-1)+imm
   157 00000185 3C726561643E        <4>  db %1
   157                              <4> %%name:
   157 0000018B [44020000]          <4>  dd %2
   157                              <4> %xdefine imm 0
   157                              <4> 
   157                              <4> section list
   157 00000240 [84010000]          <4>  dd %%link
   157                              <3> %2:
   157 00000244 E8B8FFFFFF          <2>  call do_syscall
   157                              <2> %2_b:
   157 00000249 0303                <2>  db %3,%4
   158                              <1>   _syscall_ '<write>', sys_write, 4, 3
   158                              <2>  code %1,%2
   158                              <3>  header %1,%2
   158                              <4> [section headers]
   158 0000018F [84010000]          <4>  dd vlink
   158                              <4> %%link:
   158                              <4> %2n:
   158                              <4> %xdefine vlink %%link
   158 00000193 07                  <4>  db (%%name-$-1)+imm
   158 00000194 3C77726974653E      <4>  db %1
   158                              <4> %%name:
   158 0000019B [4F020000]          <4>  dd %2
   158                              <4> %xdefine imm 0
   158                              <4> 
   158                              <4> section list
   158 0000024B [93010000]          <4>  dd %%link
   158                              <3> %2:
   158 0000024F E8ADFFFFFF          <2>  call do_syscall
   158                              <2> %2_b:
   158 00000254 0403                <2>  db %3,%4
   159                              <1>   _syscall_ '<open>', sys_open, 5, 2
   159                              <2>  code %1,%2
   159                              <3>  header %1,%2
   159                              <4> [section headers]
   159 0000019F [93010000]          <4>  dd vlink
   159                              <4> %%link:
   159                              <4> %2n:
   159                              <4> %xdefine vlink %%link
   159 000001A3 06                  <4>  db (%%name-$-1)+imm
   159 000001A4 3C6F70656E3E        <4>  db %1
   159                              <4> %%name:
   159 000001AA [5A020000]          <4>  dd %2
   159                              <4> %xdefine imm 0
   159                              <4> 
   159                              <4> section list
   159 00000256 [A3010000]          <4>  dd %%link
   159                              <3> %2:
   159 0000025A E8A2FFFFFF          <2>  call do_syscall
   159                              <2> %2_b:
   159 0000025F 0502                <2>  db %3,%4
   160                              <1>   _syscall_ '<open3>', sys_open3, 5, 3
   160                              <2>  code %1,%2
   160                              <3>  header %1,%2
   160                              <4> [section headers]
   160 000001AE [A3010000]          <4>  dd vlink
   160                              <4> %%link:
   160                              <4> %2n:
   160                              <4> %xdefine vlink %%link
   160 000001B2 07                  <4>  db (%%name-$-1)+imm
   160 000001B3 3C6F70656E333E      <4>  db %1
   160                              <4> %%name:
   160 000001BA [65020000]          <4>  dd %2
   160                              <4> %xdefine imm 0
   160                              <4> 
   160                              <4> section list
   160 00000261 [B2010000]          <4>  dd %%link
   160                              <3> %2:
   160 00000265 E897FFFFFF          <2>  call do_syscall
   160                              <2> %2_b:
   160 0000026A 0503                <2>  db %3,%4
   161                              <1>   _syscall_ '<close>', sys_close, 6, 1
   161                              <2>  code %1,%2
   161                              <3>  header %1,%2
   161                              <4> [section headers]
   161 000001BE [B2010000]          <4>  dd vlink
   161                              <4> %%link:
   161                              <4> %2n:
   161                              <4> %xdefine vlink %%link
   161 000001C2 07                  <4>  db (%%name-$-1)+imm
   161 000001C3 3C636C6F73653E      <4>  db %1
   161                              <4> %%name:
   161 000001CA [70020000]          <4>  dd %2
   161                              <4> %xdefine imm 0
   161                              <4> 
   161                              <4> section list
   161 0000026C [C2010000]          <4>  dd %%link
   161                              <3> %2:
   161 00000270 E88CFFFFFF          <2>  call do_syscall
   161                              <2> %2_b:
   161 00000275 0601                <2>  db %3,%4
   162                              <1>   _syscall_ '<creat>', sys_creat, 8, 2
   162                              <2>  code %1,%2
   162                              <3>  header %1,%2
   162                              <4> [section headers]
   162 000001CE [C2010000]          <4>  dd vlink
   162                              <4> %%link:
   162                              <4> %2n:
   162                              <4> %xdefine vlink %%link
   162 000001D2 07                  <4>  db (%%name-$-1)+imm
   162 000001D3 3C63726561743E      <4>  db %1
   162                              <4> %%name:
   162 000001DA [7B020000]          <4>  dd %2
   162                              <4> %xdefine imm 0
   162                              <4> 
   162                              <4> section list
   162 00000277 [D2010000]          <4>  dd %%link
   162                              <3> %2:
   162 0000027B E881FFFFFF          <2>  call do_syscall
   162                              <2> %2_b:
   162 00000280 0802                <2>  db %3,%4
   163                              <1>   _syscall_ '<ioctl>', sys_ioctl, 036h, 3
   163                              <2>  code %1,%2
   163                              <3>  header %1,%2
   163                              <4> [section headers]
   163 000001DE [D2010000]          <4>  dd vlink
   163                              <4> %%link:
   163                              <4> %2n:
   163                              <4> %xdefine vlink %%link
   163 000001E2 07                  <4>  db (%%name-$-1)+imm
   163 000001E3 3C696F63746C3E      <4>  db %1
   163                              <4> %%name:
   163 000001EA [86020000]          <4>  dd %2
   163                              <4> %xdefine imm 0
   163                              <4> 
   163                              <4> section list
   163 00000282 [E2010000]          <4>  dd %%link
   163                              <3> %2:
   163 00000286 E876FFFFFF          <2>  call do_syscall
   163                              <2> %2_b:
   163 0000028B 3603                <2>  db %3,%4
   164                              <1>   _syscall_ '<poll>', sys_poll, 0a8h, 3
   164                              <2>  code %1,%2
   164                              <3>  header %1,%2
   164                              <4> [section headers]
   164 000001EE [E2010000]          <4>  dd vlink
   164                              <4> %%link:
   164                              <4> %2n:
   164                              <4> %xdefine vlink %%link
   164 000001F2 06                  <4>  db (%%name-$-1)+imm
   164 000001F3 3C706F6C6C3E        <4>  db %1
   164                              <4> %%name:
   164 000001F9 [91020000]          <4>  dd %2
   164                              <4> %xdefine imm 0
   164                              <4> 
   164                              <4> section list
   164 0000028D [F2010000]          <4>  dd %%link
   164                              <3> %2:
   164 00000291 E86BFFFFFF          <2>  call do_syscall
   164                              <2> %2_b:
   164 00000296 A803                <2>  db %3,%4
   165                              <1>   _syscall_ '<lseek>', sys_lseek, 013h, 3
   165                              <2>  code %1,%2
   165                              <3>  header %1,%2
   165                              <4> [section headers]
   165 000001FD [F2010000]          <4>  dd vlink
   165                              <4> %%link:
   165                              <4> %2n:
   165                              <4> %xdefine vlink %%link
   165 00000201 07                  <4>  db (%%name-$-1)+imm
   165 00000202 3C6C7365656B3E      <4>  db %1
   165                              <4> %%name:
   165 00000209 [9C020000]          <4>  dd %2
   165                              <4> %xdefine imm 0
   165                              <4> 
   165                              <4> section list
   165 00000298 [01020000]          <4>  dd %%link
   165                              <3> %2:
   165 0000029C E860FFFFFF          <2>  call do_syscall
   165                              <2> %2_b:
   165 000002A1 1303                <2>  db %3,%4
   166                              <1>   _syscall_ '<mmap>', sys_mmap, 05ah, 6
   166                              <2>  code %1,%2
   166                              <3>  header %1,%2
   166                              <4> [section headers]
   166 0000020D [01020000]          <4>  dd vlink
   166                              <4> %%link:
   166                              <4> %2n:
   166                              <4> %xdefine vlink %%link
   166 00000211 06                  <4>  db (%%name-$-1)+imm
   166 00000212 3C6D6D61703E        <4>  db %1
   166                              <4> %%name:
   166 00000218 [A7020000]          <4>  dd %2
   166                              <4> %xdefine imm 0
   166                              <4> 
   166                              <4> section list
   166 000002A3 [11020000]          <4>  dd %%link
   166                              <3> %2:
   166 000002A7 E855FFFFFF          <2>  call do_syscall
   166                              <2> %2_b:
   166 000002AC 5A06                <2>  db %3,%4
   167                              <1>   _syscall_ '<munmap>', sys_munmap, 05bh, 2
   167                              <2>  code %1,%2
   167                              <3>  header %1,%2
   167                              <4> [section headers]
   167 0000021C [11020000]          <4>  dd vlink
   167                              <4> %%link:
   167                              <4> %2n:
   167                              <4> %xdefine vlink %%link
   167 00000220 08                  <4>  db (%%name-$-1)+imm
   167 00000221 3C6D756E6D61703E    <4>  db %1
   167                              <4> %%name:
   167 00000229 [B2020000]          <4>  dd %2
   167                              <4> %xdefine imm 0
   167                              <4> 
   167                              <4> section list
   167 000002AE [20020000]          <4>  dd %%link
   167                              <3> %2:
   167 000002B2 E84AFFFFFF          <2>  call do_syscall
   167                              <2> %2_b:
   167 000002B7 5B02                <2>  db %3,%4
   168                              <1>   _syscall_ '<signal>', sys_signal, 030h, 2
   168                              <2>  code %1,%2
   168                              <3>  header %1,%2
   168                              <4> [section headers]
   168 0000022D [20020000]          <4>  dd vlink
   168                              <4> %%link:
   168                              <4> %2n:
   168                              <4> %xdefine vlink %%link
   168 00000231 08                  <4>  db (%%name-$-1)+imm
   168 00000232 3C7369676E616C3E    <4>  db %1
   168                              <4> %%name:
   168 0000023A [BD020000]          <4>  dd %2
   168                              <4> %xdefine imm 0
   168                              <4> 
   168                              <4> section list
   168 000002B9 [31020000]          <4>  dd %%link
   168                              <3> %2:
   168 000002BD E83FFFFFFF          <2>  call do_syscall
   168                              <2> %2_b:
   168 000002C2 3002                <2>  db %3,%4
   169                              <1> 
   170                              <1> ;=========================================================================
   110                                    %include "stack.s"        ; stack manipulation etc
     1                              <1> ; stack.1        - x4 stack manipulation words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; pointers to bottom of stacks
     6                              <1> 
     7                              <1> ;       ( --- a1 )
     8                              <1> 
     9                              <1>   _constant_ 'sp0', sp0, 0  ; these are initialised at run time
     9                              <2>  code %1,%2
     9                              <3>  header %1,%2
     9                              <4> [section headers]
     9 0000023E [31020000]          <4>  dd vlink
     9                              <4> %%link:
     9                              <4> %2n:
     9                              <4> %xdefine vlink %%link
     9 00000242 03                  <4>  db (%%name-$-1)+imm
     9 00000243 737030              <4>  db %1
     9                              <4> %%name:
     9 00000246 [C8020000]          <4>  dd %2
     9                              <4> %xdefine imm 0
     9                              <4> 
     9                              <4> section list
     9 000002C4 [42020000]          <4>  dd %%link
     9                              <3> %2:
     9 000002C8 E8E20A0000          <2>  call doconstant
     9                              <2> %2_b:
     9 000002CD 00000000            <2>  dd %3
    10                              <1>   _constant_ 'rp0', rp0, 0  ; when x4 first loads
    10                              <2>  code %1,%2
    10                              <3>  header %1,%2
    10                              <4> [section headers]
    10 0000024A [42020000]          <4>  dd vlink
    10                              <4> %%link:
    10                              <4> %2n:
    10                              <4> %xdefine vlink %%link
    10 0000024E 03                  <4>  db (%%name-$-1)+imm
    10 0000024F 727030              <4>  db %1
    10                              <4> %%name:
    10 00000252 [D5020000]          <4>  dd %2
    10                              <4> %xdefine imm 0
    10                              <4> 
    10                              <4> section list
    10 000002D1 [4E020000]          <4>  dd %%link
    10                              <3> %2:
    10 000002D5 E8D50A0000          <2>  call doconstant
    10                              <2> %2_b:
    10 000002DA 00000000            <2>  dd %3
    11                              <1> 
    12                              <1> ; ------------------------------------------------------------------------
    13                              <1> ; duplicate top item of parameter stack
    14                              <1> 
    15                              <1> ;       ( n1 --- n1 n1 )
    16                              <1> 
    17                              <1> code 'dup', dup
    17                              <2>  header %1,%2
    17                              <3> [section headers]
    17 00000256 [4E020000]          <3>  dd vlink
    17                              <3> %%link:
    17                              <3> %2n:
    17                              <3> %xdefine vlink %%link
    17 0000025A 03                  <3>  db (%%name-$-1)+imm
    17 0000025B 647570              <3>  db %1
    17                              <3> %%name:
    17 0000025E [E2020000]          <3>  dd %2
    17                              <3> %xdefine imm 0
    17                              <3> 
    17                              <3> section list
    17 000002DE [5A020000]          <3>  dd %%link
    17                              <2> %2:
    18 000002E2 53                  <1>   push ebx                  ; push copy of top stack item
    19                              <1>   next
    19 000002E3 E9230A0000          <2>  jmp _next
    20                              <1> 
    21                              <1> ; ------------------------------------------------------------------------
    22                              <1> ; duplicate top item of parameter stack ONLY if it is NON ZERO
    23                              <1> 
    24                              <1> ;       ( n1 --- n1 n1 | 0 )
    25                              <1> 
    26                              <1> code '?dup', qdup
    26                              <2>  header %1,%2
    26                              <3> [section headers]
    26 00000262 [5A020000]          <3>  dd vlink
    26                              <3> %%link:
    26                              <3> %2n:
    26                              <3> %xdefine vlink %%link
    26 00000266 04                  <3>  db (%%name-$-1)+imm
    26 00000267 3F647570            <3>  db %1
    26                              <3> %%name:
    26 0000026B [EC020000]          <3>  dd %2
    26                              <3> %xdefine imm 0
    26                              <3> 
    26                              <3> section list
    26 000002E8 [66020000]          <3>  dd %%link
    26                              <2> %2:
    27 000002EC 09DB                <1>   or ebx, ebx               ; is top stack item zero ?
    28 000002EE 75F2                <1>   jnz dup
    29                              <1>   next
    29 000002F0 E9160A0000          <2>  jmp _next
    30                              <1> 
    31                              <1> ; ------------------------------------------------------------------------
    32                              <1> ; duplicate top two items of parameter stack
    33                              <1> 
    34                              <1> ;       ( n1 n2 --- n1 n2 n1 n2 )
    35                              <1> 
    36                              <1> code '2dup', dup2
    36                              <2>  header %1,%2
    36                              <3> [section headers]
    36 0000026F [66020000]          <3>  dd vlink
    36                              <3> %%link:
    36                              <3> %2n:
    36                              <3> %xdefine vlink %%link
    36 00000273 04                  <3>  db (%%name-$-1)+imm
    36 00000274 32647570            <3>  db %1
    36                              <3> %%name:
    36 00000278 [F9020000]          <3>  dd %2
    36                              <3> %xdefine imm 0
    36                              <3> 
    36                              <3> section list
    36 000002F5 [73020000]          <3>  dd %%link
    36                              <2> %2:
    37 000002F9 8B0424              <1>   mov eax, [esp]            ; get copy of second stack item
    38 000002FC 53                  <1>   push ebx                  ; psuh copy of tos
    39 000002FD 50                  <1>   push eax                  ; push copy of second stack item
    40                              <1>   next
    40 000002FE E9080A0000          <2>  jmp _next
    41                              <1> 
    42                              <1> ; ------------------------------------------------------------------------
    43                              <1> ; duplicate top 3 items of stack
    44                              <1> 
    45                              <1> ;       ( n1 n2 n3 --- n1 n2 n3 n1 n2 n3 )
    46                              <1> 
    47                              <1> code '3dup', dup3
    47                              <2>  header %1,%2
    47                              <3> [section headers]
    47 0000027C [73020000]          <3>  dd vlink
    47                              <3> %%link:
    47                              <3> %2n:
    47                              <3> %xdefine vlink %%link
    47 00000280 04                  <3>  db (%%name-$-1)+imm
    47 00000281 33647570            <3>  db %1
    47                              <3> %%name:
    47 00000285 [07030000]          <3>  dd %2
    47                              <3> %xdefine imm 0
    47                              <3> 
    47                              <3> section list
    47 00000303 [80020000]          <3>  dd %%link
    47                              <2> %2:
    48 00000307 89E0                <1>   mov eax, esp              ; point eax at stack
    49 00000309 53                  <1>   push ebx                  ; push copy of top stack item
    50 0000030A FF7004              <1>   push dword [eax+4]        ; push copy of second third item
    51 0000030D FF30                <1>   push dword [eax]          ; push copy of second stack item
    52                              <1>   next
    52 0000030F E9F7090000          <2>  jmp _next
    53                              <1> 
    54                              <1> ; ------------------------------------------------------------------------
    55                              <1> ; swap top two items of parameter stack
    56                              <1> 
    57                              <1> ;       ( n1 n2 --- n2 n1 )
    58                              <1> 
    59                              <1> code 'swap', swap
    59                              <2>  header %1,%2
    59                              <3> [section headers]
    59 00000289 [80020000]          <3>  dd vlink
    59                              <3> %%link:
    59                              <3> %2n:
    59                              <3> %xdefine vlink %%link
    59 0000028D 04                  <3>  db (%%name-$-1)+imm
    59 0000028E 73776170            <3>  db %1
    59                              <3> %%name:
    59 00000292 [18030000]          <3>  dd %2
    59                              <3> %xdefine imm 0
    59                              <3> 
    59                              <3> section list
    59 00000314 [8D020000]          <3>  dd %%link
    59                              <2> %2:
    60 00000318 871C24              <1>   xchg ebx, [esp]
    61                              <1>   next
    61 0000031B E9EB090000          <2>  jmp _next
    62                              <1> 
    63                              <1> ; ------------------------------------------------------------------------
    64                              <1> ; swap second two items with top two items of parameter stack
    65                              <1> 
    66                              <1> ;       ( n1 n2 n3 n4 --- n3 n4 n1 n2 )
    67                              <1> 
    68                              <1> code '2swap', swap2
    68                              <2>  header %1,%2
    68                              <3> [section headers]
    68 00000296 [8D020000]          <3>  dd vlink
    68                              <3> %%link:
    68                              <3> %2n:
    68                              <3> %xdefine vlink %%link
    68 0000029A 05                  <3>  db (%%name-$-1)+imm
    68 0000029B 3273776170          <3>  db %1
    68                              <3> %%name:
    68 000002A0 [24030000]          <3>  dd %2
    68                              <3> %xdefine imm 0
    68                              <3> 
    68                              <3> section list
    68 00000320 [9A020000]          <3>  dd %%link
    68                              <2> %2:
    69 00000324 875C2404            <1>   xchg ebx, [esp+4]         ; swap n4,n2
    70 00000328 8B442408            <1>   mov eax, [esp+8]          ; swap n3,n1
    71 0000032C 870424              <1>   xchg eax, [esp]
    72 0000032F 89442408            <1>   mov [esp+8], eax
    73                              <1>   next
    73 00000333 E9D3090000          <2>  jmp _next
    74                              <1> 
    75                              <1> ; ------------------------------------------------------------------------
    76                              <1> ; discard top item of parameter stack
    77                              <1> 
    78                              <1> ;       ( n1 --- )
    79                              <1> 
    80                              <1> code 'drop', drop
    80                              <2>  header %1,%2
    80                              <3> [section headers]
    80 000002A4 [9A020000]          <3>  dd vlink
    80                              <3> %%link:
    80                              <3> %2n:
    80                              <3> %xdefine vlink %%link
    80 000002A8 04                  <3>  db (%%name-$-1)+imm
    80 000002A9 64726F70            <3>  db %1
    80                              <3> %%name:
    80 000002AD [3C030000]          <3>  dd %2
    80                              <3> %xdefine imm 0
    80                              <3> 
    80                              <3> section list
    80 00000338 [A8020000]          <3>  dd %%link
    80                              <2> %2:
    81 0000033C 5B                  <1>   pop ebx
    82                              <1>   next
    82 0000033D E9C9090000          <2>  jmp _next
    83                              <1> 
    84                              <1> ; ------------------------------------------------------------------------
    85                              <1> ; discard top two items of parameter stack
    86                              <1> 
    87                              <1> ;       ( n1 n2 --- )
    88                              <1> 
    89                              <1> code '2drop', drop2         ; change this to a pop ecx ?
    89                              <2>  header %1,%2
    89                              <3> [section headers]
    89 000002B1 [A8020000]          <3>  dd vlink
    89                              <3> %%link:
    89                              <3> %2n:
    89                              <3> %xdefine vlink %%link
    89 000002B5 05                  <3>  db (%%name-$-1)+imm
    89 000002B6 3264726F70          <3>  db %1
    89                              <3> %%name:
    89 000002BB [46030000]          <3>  dd %2
    89                              <3> %xdefine imm 0
    89                              <3> 
    89                              <3> section list
    89 00000342 [B5020000]          <3>  dd %%link
    89                              <2> %2:
    90 00000346 83C404              <1>   add esp, byte 4           ; advance sp past second stack item
    91 00000349 5B                  <1>   pop ebx
    92                              <1>   next
    92 0000034A E9BC090000          <2>  jmp _next
    93                              <1> 
    94                              <1> ; ------------------------------------------------------------------------
    95                              <1> ; discard top 3 items of parameter stack
    96                              <1> 
    97                              <1> code '3drop', drop3
    97                              <2>  header %1,%2
    97                              <3> [section headers]
    97 000002BF [B5020000]          <3>  dd vlink
    97                              <3> %%link:
    97                              <3> %2n:
    97                              <3> %xdefine vlink %%link
    97 000002C3 05                  <3>  db (%%name-$-1)+imm
    97 000002C4 3364726F70          <3>  db %1
    97                              <3> %%name:
    97 000002C9 [53030000]          <3>  dd %2
    97                              <3> %xdefine imm 0
    97                              <3> 
    97                              <3> section list
    97 0000034F [C3020000]          <3>  dd %%link
    97                              <2> %2:
    98 00000353 83C408              <1>   add esp, byte 8
    99 00000356 5B                  <1>   pop ebx
   100                              <1>   next
   100 00000357 E9AF090000          <2>  jmp _next
   101                              <1> 
   102                              <1> ; ------------------------------------------------------------------------
   103                              <1> ; copy second stack item over top of top item
   104                              <1> 
   105                              <1> ;       ( n1 n2 --- n1 n2 n1 )
   106                              <1> 
   107                              <1> code 'over', over
   107                              <2>  header %1,%2
   107                              <3> [section headers]
   107 000002CD [C3020000]          <3>  dd vlink
   107                              <3> %%link:
   107                              <3> %2n:
   107                              <3> %xdefine vlink %%link
   107 000002D1 04                  <3>  db (%%name-$-1)+imm
   107 000002D2 6F766572            <3>  db %1
   107                              <3> %%name:
   107 000002D6 [60030000]          <3>  dd %2
   107                              <3> %xdefine imm 0
   107                              <3> 
   107                              <3> section list
   107 0000035C [D1020000]          <3>  dd %%link
   107                              <2> %2:
   108 00000360 53                  <1>   push ebx                  ; push cached tos onto stack
   109 00000361 8B5C2404            <1>   mov ebx, dword [esp+4]    ; get copy of 2os in cache
   110                              <1>   next
   110 00000365 E9A1090000          <2>  jmp _next
   111                              <1> 
   112                              <1> ; ------------------------------------------------------------------------
   113                              <1> ; discard second stack item
   114                              <1> 
   115                              <1> ;       ( n1 n2 --- n2 )
   116                              <1> 
   117                              <1> code 'nip', nip
   117                              <2>  header %1,%2
   117                              <3> [section headers]
   117 000002DA [D1020000]          <3>  dd vlink
   117                              <3> %%link:
   117                              <3> %2n:
   117                              <3> %xdefine vlink %%link
   117 000002DE 03                  <3>  db (%%name-$-1)+imm
   117 000002DF 6E6970              <3>  db %1
   117                              <3> %%name:
   117 000002E2 [6E030000]          <3>  dd %2
   117                              <3> %xdefine imm 0
   117                              <3> 
   117                              <3> section list
   117 0000036A [DE020000]          <3>  dd %%link
   117                              <2> %2:
   118 0000036E 83C404              <1>   add esp, byte 4           ; discard second
   119                              <1>   next
   119 00000371 E995090000          <2>  jmp _next
   120                              <1> 
   121                              <1> ; ------------------------------------------------------------------------
   122                              <1> ; push copy of top item under second item
   123                              <1> 
   124                              <1> ;       ( n1 n2 --- n2 n1 n2 )
   125                              <1> 
   126                              <1> code 'tuck', tuck
   126                              <2>  header %1,%2
   126                              <3> [section headers]
   126 000002E6 [DE020000]          <3>  dd vlink
   126                              <3> %%link:
   126                              <3> %2n:
   126                              <3> %xdefine vlink %%link
   126 000002EA 04                  <3>  db (%%name-$-1)+imm
   126 000002EB 7475636B            <3>  db %1
   126                              <3> %%name:
   126 000002EF [7A030000]          <3>  dd %2
   126                              <3> %xdefine imm 0
   126                              <3> 
   126                              <3> section list
   126 00000376 [EA020000]          <3>  dd %%link
   126                              <2> %2:
   127 0000037A 58                  <1>   pop eax
   128 0000037B 53                  <1>   push ebx
   129 0000037C 50                  <1>   push eax
   130                              <1>   next
   130 0000037D E989090000          <2>  jmp _next
   131                              <1> 
   132                              <1> ; ------------------------------------------------------------------------
   133                              <1> ; get copy of third stack item
   134                              <1> 
   135                              <1> ;       ( n1 n2 n3 --- n1 n2 n3 n1 )
   136                              <1> 
   137                              <1> code 'pluck', pluck
   137                              <2>  header %1,%2
   137                              <3> [section headers]
   137 000002F3 [EA020000]          <3>  dd vlink
   137                              <3> %%link:
   137                              <3> %2n:
   137                              <3> %xdefine vlink %%link
   137 000002F7 05                  <3>  db (%%name-$-1)+imm
   137 000002F8 706C75636B          <3>  db %1
   137                              <3> %%name:
   137 000002FD [86030000]          <3>  dd %2
   137                              <3> %xdefine imm 0
   137                              <3> 
   137                              <3> section list
   137 00000382 [F7020000]          <3>  dd %%link
   137                              <2> %2:
   138 00000386 53                  <1>   push ebx
   139 00000387 8B5C2408            <1>   mov ebx, dword [esp+8]
   140                              <1>   next
   140 0000038B E97B090000          <2>  jmp _next
   141                              <1> 
   142                              <1> ; ------------------------------------------------------------------------
   143                              <1> ; push copy of nth stack item
   144                              <1> 
   145                              <1> ;       ( ... n1 --- ... n2 )
   146                              <1> 
   147                              <1> code 'pick', pick
   147                              <2>  header %1,%2
   147                              <3> [section headers]
   147 00000301 [F7020000]          <3>  dd vlink
   147                              <3> %%link:
   147                              <3> %2n:
   147                              <3> %xdefine vlink %%link
   147 00000305 04                  <3>  db (%%name-$-1)+imm
   147 00000306 7069636B            <3>  db %1
   147                              <3> %%name:
   147 0000030A [94030000]          <3>  dd %2
   147                              <3> %xdefine imm 0
   147                              <3> 
   147                              <3> section list
   147 00000390 [05030000]          <3>  dd %%link
   147                              <2> %2:
   148 00000394 8B1C9C              <1>   mov ebx, [esp +4* ebx]
   149                              <1>   next
   149 00000397 E96F090000          <2>  jmp _next
   150                              <1> 
   151                              <1> ; ------------------------------------------------------------------------
   152                              <1> ; rotate third item of parameter stack out to top position
   153                              <1> 
   154                              <1> ;       ( n1 n2 n3 --- n2 n3 n1 )
   155                              <1> 
   156                              <1> code 'rot', rot
   156                              <2>  header %1,%2
   156                              <3> [section headers]
   156 0000030E [05030000]          <3>  dd vlink
   156                              <3> %%link:
   156                              <3> %2n:
   156                              <3> %xdefine vlink %%link
   156 00000312 03                  <3>  db (%%name-$-1)+imm
   156 00000313 726F74              <3>  db %1
   156                              <3> %%name:
   156 00000316 [A0030000]          <3>  dd %2
   156                              <3> %xdefine imm 0
   156                              <3> 
   156                              <3> section list
   156 0000039C [12030000]          <3>  dd %%link
   156                              <2> %2:
   157 000003A0 871C24              <1>   xchg ebx, [esp]
   158 000003A3 875C2404            <1>   xchg ebx, [esp+4]
   159                              <1>   next
   159 000003A7 E95F090000          <2>  jmp _next
   160                              <1> 
   161                              <1> ; ------------------------------------------------------------------------
   162                              <1> ; rotate third item of parameter stack out to top position
   163                              <1> 
   164                              <1> ;       ( n1 n2 n3 --- n3 n1 n2 )
   165                              <1> 
   166                              <1> code '-rot', dashrot
   166                              <2>  header %1,%2
   166                              <3> [section headers]
   166 0000031A [12030000]          <3>  dd vlink
   166                              <3> %%link:
   166                              <3> %2n:
   166                              <3> %xdefine vlink %%link
   166 0000031E 04                  <3>  db (%%name-$-1)+imm
   166 0000031F 2D726F74            <3>  db %1
   166                              <3> %%name:
   166 00000323 [B0030000]          <3>  dd %2
   166                              <3> %xdefine imm 0
   166                              <3> 
   166                              <3> section list
   166 000003AC [1E030000]          <3>  dd %%link
   166                              <2> %2:
   167 000003B0 875C2404            <1>   xchg ebx, [esp+4]
   168 000003B4 871C24              <1>   xchg ebx, [esp]
   169                              <1>   next
   169 000003B7 E94F090000          <2>  jmp _next
   170                              <1> 
   171                              <1> ; ------------------------------------------------------------------------
   172                              <1> ; split 32 bit value into two 16 bit valuse
   173                              <1> 
   174                              <1> ;       ( n1 -- lo hi )
   175                              <1> 
   176                              <1> code 'split', split
   176                              <2>  header %1,%2
   176                              <3> [section headers]
   176 00000327 [1E030000]          <3>  dd vlink
   176                              <3> %%link:
   176                              <3> %2n:
   176                              <3> %xdefine vlink %%link
   176 0000032B 05                  <3>  db (%%name-$-1)+imm
   176 0000032C 73706C6974          <3>  db %1
   176                              <3> %%name:
   176 00000331 [C0030000]          <3>  dd %2
   176                              <3> %xdefine imm 0
   176                              <3> 
   176                              <3> section list
   176 000003BC [2B030000]          <3>  dd %%link
   176                              <2> %2:
   177 000003C0 89DA                <1>   mov edx, ebx
   178 000003C2 0FB7D2              <1>   movzx edx, dx
   179 000003C5 C1EB10              <1>   shr ebx, byte 16
   180 000003C8 52                  <1>   push edx
   181                              <1>   next
   181 000003C9 E93D090000          <2>  jmp _next
   182                              <1> 
   183                              <1> ; ------------------------------------------------------------------------
   184                              <1> ; join two 16 bit data items into one 32 bit item
   185                              <1> 
   186                              <1> ;       ( lo hi -- n1 )
   187                              <1> 
   188                              <1> code 'join', join
   188                              <2>  header %1,%2
   188                              <3> [section headers]
   188 00000335 [2B030000]          <3>  dd vlink
   188                              <3> %%link:
   188                              <3> %2n:
   188                              <3> %xdefine vlink %%link
   188 00000339 04                  <3>  db (%%name-$-1)+imm
   188 0000033A 6A6F696E            <3>  db %1
   188                              <3> %%name:
   188 0000033E [D2030000]          <3>  dd %2
   188                              <3> %xdefine imm 0
   188                              <3> 
   188                              <3> section list
   188 000003CE [39030000]          <3>  dd %%link
   188                              <2> %2:
   189 000003D2 58                  <1>   pop eax                   ; lo
   190 000003D3 C1E010              <1>   shl eax, byte 16          ; shift hi into upper word
   191 000003D6 09C3                <1>   or ebx, eax
   192                              <1>   next
   192 000003D8 E92E090000          <2>  jmp _next
   193                              <1> 
   194                              <1> ; ------------------------------------------------------------------------
   195                              <1> ; move top item of parameter stack to return stack
   196                              <1> 
   197                              <1> ;       ( n1 --- )
   198                              <1> 
   199                              <1> code '>r', tor
   199                              <2>  header %1,%2
   199                              <3> [section headers]
   199 00000342 [39030000]          <3>  dd vlink
   199                              <3> %%link:
   199                              <3> %2n:
   199                              <3> %xdefine vlink %%link
   199 00000346 02                  <3>  db (%%name-$-1)+imm
   199 00000347 3E72                <3>  db %1
   199                              <3> %%name:
   199 00000349 [E1030000]          <3>  dd %2
   199                              <3> %xdefine imm 0
   199                              <3> 
   199                              <3> section list
   199 000003DD [46030000]          <3>  dd %%link
   199                              <2> %2:
   200 000003E1 87EC                <1>  xchg ebp, esp              ; point esp at return stack
   201 000003E3 53                  <1>  push ebx                   ; push n1 onto return stack
   202 000003E4 87EC                <1>  xchg ebp, esp              ; restore esp
   203 000003E6 5B                  <1>  pop ebx
   204                              <1>  next
   204 000003E7 E91F090000          <2>  jmp _next
   205                              <1> 
   206                              <1> ; ------------------------------------------------------------------------
   207                              <1> ; move top two items off parameter stack onto return stack
   208                              <1> 
   209                              <1> ;       ( n1 n2 --- )
   210                              <1> 
   211                              <1> code '2>r', tor2
   211                              <2>  header %1,%2
   211                              <3> [section headers]
   211 0000034D [46030000]          <3>  dd vlink
   211                              <3> %%link:
   211                              <3> %2n:
   211                              <3> %xdefine vlink %%link
   211 00000351 03                  <3>  db (%%name-$-1)+imm
   211 00000352 323E72              <3>  db %1
   211                              <3> %%name:
   211 00000355 [F0030000]          <3>  dd %2
   211                              <3> %xdefine imm 0
   211                              <3> 
   211                              <3> section list
   211 000003EC [51030000]          <3>  dd %%link
   211                              <2> %2:
   212 000003F0 58                  <1>   pop eax
   213 000003F1 87EC                <1>   xchg ebp, esp
   214 000003F3 53                  <1>   push ebx
   215 000003F4 50                  <1>   push eax
   216 000003F5 87EC                <1>   xchg ebp, esp
   217 000003F7 5B                  <1>   pop ebx
   218                              <1>   next
   218 000003F8 E90E090000          <2>  jmp _next
   219                              <1> 
   220                              <1> ; ------------------------------------------------------------------------
   221                              <1> ; move item off return stack onto parameter stack
   222                              <1> 
   223                              <1> ;       ( --- n1 )
   224                              <1> 
   225                              <1> code 'r>', rto
   225                              <2>  header %1,%2
   225                              <3> [section headers]
   225 00000359 [51030000]          <3>  dd vlink
   225                              <3> %%link:
   225                              <3> %2n:
   225                              <3> %xdefine vlink %%link
   225 0000035D 02                  <3>  db (%%name-$-1)+imm
   225 0000035E 723E                <3>  db %1
   225                              <3> %%name:
   225 00000360 [01040000]          <3>  dd %2
   225                              <3> %xdefine imm 0
   225                              <3> 
   225                              <3> section list
   225 000003FD [5D030000]          <3>  dd %%link
   225                              <2> %2:
   226 00000401 53                  <1>   push ebx                  ; push cached top of stack
   227 00000402 87EC                <1>   xchg ebp, esp             ; point ebp at return stack
   228 00000404 5B                  <1>   pop ebx                   ; pop top item off return stack
   229 00000405 87EC                <1>   xchg ebp, esp             ; point esp back at parameter stack
   230                              <1>   next
   230 00000407 E9FF080000          <2>  jmp _next
   231                              <1> 
   232                              <1> ; ------------------------------------------------------------------------
   233                              <1> ; move 2 items off return stack onto parameter stack
   234                              <1> 
   235                              <1> ;       ( --- n1 n2 )
   236                              <1> 
   237                              <1> code '2r>', rto2
   237                              <2>  header %1,%2
   237                              <3> [section headers]
   237 00000364 [5D030000]          <3>  dd vlink
   237                              <3> %%link:
   237                              <3> %2n:
   237                              <3> %xdefine vlink %%link
   237 00000368 03                  <3>  db (%%name-$-1)+imm
   237 00000369 32723E              <3>  db %1
   237                              <3> %%name:
   237 0000036C [10040000]          <3>  dd %2
   237                              <3> %xdefine imm 0
   237                              <3> 
   237                              <3> section list
   237 0000040C [68030000]          <3>  dd %%link
   237                              <2> %2:
   238 00000410 53                  <1>   push ebx
   239 00000411 87EC                <1>   xchg ebp, esp
   240 00000413 58                  <1>   pop eax
   241 00000414 5B                  <1>   pop ebx
   242 00000415 87EC                <1>   xchg ebp, esp
   243 00000417 50                  <1>   push eax
   244                              <1>   next
   244 00000418 E9EE080000          <2>  jmp _next
   245                              <1> 
   246                              <1> ; ------------------------------------------------------------------------
   247                              <1> ; copy top item of parameter stack to return stack
   248                              <1> 
   249                              <1> ;       ( n1 --- n1 )
   250                              <1> 
   251                              <1> code 'dup>r', duptor
   251                              <2>  header %1,%2
   251                              <3> [section headers]
   251 00000370 [68030000]          <3>  dd vlink
   251                              <3> %%link:
   251                              <3> %2n:
   251                              <3> %xdefine vlink %%link
   251 00000374 05                  <3>  db (%%name-$-1)+imm
   251 00000375 6475703E72          <3>  db %1
   251                              <3> %%name:
   251 0000037A [21040000]          <3>  dd %2
   251                              <3> %xdefine imm 0
   251                              <3> 
   251                              <3> section list
   251 0000041D [74030000]          <3>  dd %%link
   251                              <2> %2:
   252 00000421 87EC                <1>   xchg ebp, esp
   253 00000423 53                  <1>   push ebx
   254 00000424 87EC                <1>   xchg ebp, esp
   255                              <1>   next
   255 00000426 E9E0080000          <2>  jmp _next
   256                              <1> 
   257                              <1> ; ------------------------------------------------------------------------
   258                              <1> ; drop one item off return stack
   259                              <1> 
   260                              <1> ;       ( --- )
   261                              <1> 
   262                              <1> code 'r>drop', rdrop
   262                              <2>  header %1,%2
   262                              <3> [section headers]
   262 0000037E [74030000]          <3>  dd vlink
   262                              <3> %%link:
   262                              <3> %2n:
   262                              <3> %xdefine vlink %%link
   262 00000382 06                  <3>  db (%%name-$-1)+imm
   262 00000383 723E64726F70        <3>  db %1
   262                              <3> %%name:
   262 00000389 [2F040000]          <3>  dd %2
   262                              <3> %xdefine imm 0
   262                              <3> 
   262                              <3> section list
   262 0000042B [82030000]          <3>  dd %%link
   262                              <2> %2:
   263 0000042F 83C504              <1>   add ebp, byte 4           ; discard top item of return stack
   264                              <1>   next
   264 00000432 E9D4080000          <2>  jmp _next
   265                              <1> 
   266                              <1> ; ------------------------------------------------------------------------
   267                              <1> ; get copy of top item of return stack onto parameter stack
   268                              <1> 
   269                              <1> ;       ( --- n1 )
   270                              <1> 
   271                              <1> code 'r@', rfetch
   271                              <2>  header %1,%2
   271                              <3> [section headers]
   271 0000038D [82030000]          <3>  dd vlink
   271                              <3> %%link:
   271                              <3> %2n:
   271                              <3> %xdefine vlink %%link
   271 00000391 02                  <3>  db (%%name-$-1)+imm
   271 00000392 7240                <3>  db %1
   271                              <3> %%name:
   271 00000394 [3B040000]          <3>  dd %2
   271                              <3> %xdefine imm 0
   271                              <3> 
   271                              <3> section list
   271 00000437 [91030000]          <3>  dd %%link
   271                              <2> %2:
   272 0000043B 53                  <1>   push ebx
   273 0000043C 8B5D00              <1>   mov ebx, dword [ebp]      ; push copy of r stack item onto p stack
   274                              <1>   next
   274 0000043F E9C7080000          <2>  jmp _next
   275                              <1> 
   276                              <1> ; ------------------------------------------------------------------------
   277                              <1> ; get current sp address
   278                              <1> 
   279                              <1> ;       ( --- a1 )
   280                              <1> 
   281                              <1> code 'sp@', spfetch
   281                              <2>  header %1,%2
   281                              <3> [section headers]
   281 00000398 [91030000]          <3>  dd vlink
   281                              <3> %%link:
   281                              <3> %2n:
   281                              <3> %xdefine vlink %%link
   281 0000039C 03                  <3>  db (%%name-$-1)+imm
   281 0000039D 737040              <3>  db %1
   281                              <3> %%name:
   281 000003A0 [48040000]          <3>  dd %2
   281                              <3> %xdefine imm 0
   281                              <3> 
   281                              <3> section list
   281 00000444 [9C030000]          <3>  dd %%link
   281                              <2> %2:
   282 00000448 53                  <1>   push ebx
   283 00000449 89E3                <1>   mov ebx, esp
   284                              <1>   next
   284 0000044B E9BB080000          <2>  jmp _next
   285                              <1> 
   286                              <1> ; ------------------------------------------------------------------------
   287                              <1> ; set new sp address
   288                              <1> 
   289                              <1> ;       ( a1 -- )
   290                              <1> 
   291                              <1> code 'sp!', spstore
   291                              <2>  header %1,%2
   291                              <3> [section headers]
   291 000003A4 [9C030000]          <3>  dd vlink
   291                              <3> %%link:
   291                              <3> %2n:
   291                              <3> %xdefine vlink %%link
   291 000003A8 03                  <3>  db (%%name-$-1)+imm
   291 000003A9 737021              <3>  db %1
   291                              <3> %%name:
   291 000003AC [54040000]          <3>  dd %2
   291                              <3> %xdefine imm 0
   291                              <3> 
   291                              <3> section list
   291 00000450 [A8030000]          <3>  dd %%link
   291                              <2> %2:
   292 00000454 89DC                <1>   mov esp, ebx
   293 00000456 5B                  <1>   pop ebx
   294                              <1>   next
   294 00000457 E9AF080000          <2>  jmp _next
   295                              <1> 
   296                              <1> ; ------------------------------------------------------------------------
   297                              <1> ; get current return stack pointer address
   298                              <1> 
   299                              <1> ;       ( -- a1 )
   300                              <1> 
   301                              <1> code 'rp@', rpfetch
   301                              <2>  header %1,%2
   301                              <3> [section headers]
   301 000003B0 [A8030000]          <3>  dd vlink
   301                              <3> %%link:
   301                              <3> %2n:
   301                              <3> %xdefine vlink %%link
   301 000003B4 03                  <3>  db (%%name-$-1)+imm
   301 000003B5 727040              <3>  db %1
   301                              <3> %%name:
   301 000003B8 [60040000]          <3>  dd %2
   301                              <3> %xdefine imm 0
   301                              <3> 
   301                              <3> section list
   301 0000045C [B4030000]          <3>  dd %%link
   301                              <2> %2:
   302 00000460 53                  <1>   push ebx
   303 00000461 89EB                <1>   mov ebx, ebp
   304                              <1>   next
   304 00000463 E9A3080000          <2>  jmp _next
   305                              <1> 
   306                              <1> ; ------------------------------------------------------------------------
   307                              <1> ; set new rp address
   308                              <1> 
   309                              <1> ;       ( a1 -- )
   310                              <1> 
   311                              <1> code 'rp!', rpstore
   311                              <2>  header %1,%2
   311                              <3> [section headers]
   311 000003BC [B4030000]          <3>  dd vlink
   311                              <3> %%link:
   311                              <3> %2n:
   311                              <3> %xdefine vlink %%link
   311 000003C0 03                  <3>  db (%%name-$-1)+imm
   311 000003C1 727021              <3>  db %1
   311                              <3> %%name:
   311 000003C4 [6C040000]          <3>  dd %2
   311                              <3> %xdefine imm 0
   311                              <3> 
   311                              <3> section list
   311 00000468 [C0030000]          <3>  dd %%link
   311                              <2> %2:
   312 0000046C 89DD                <1>   mov ebp, ebx              ;set rp
   313 0000046E 5B                  <1>   pop ebx
   314                              <1>   next
   314 0000046F E997080000          <2>  jmp _next
   315                              <1> 
   316                              <1> ; ------------------------------------------------------------------------
   317                              <1> 
   318                              <1> colon 'depth', depth
   318                              <2>  header %1,%2
   318                              <3> [section headers]
   318 000003C8 [C0030000]          <3>  dd vlink
   318                              <3> %%link:
   318                              <3> %2n:
   318                              <3> %xdefine vlink %%link
   318 000003CC 05                  <3>  db (%%name-$-1)+imm
   318 000003CD 6465707468          <3>  db %1
   318                              <3> %%name:
   318 000003D2 [78040000]          <3>  dd %2
   318                              <3> %xdefine imm 0
   318                              <3> 
   318                              <3> section list
   318 00000474 [CC030000]          <3>  dd %%link
   318                              <2> %2:
   318 00000478 E8EB080000          <2>  call nest
   318                              <2> %2_b:
   319 0000047D [48040000]-         <1>   dd spfetch, sp0, swap
   319 00000481 [C8020000]-         <1>
   319 00000485 [18030000]          <1>
   320 00000489 [130A0000]          <1>   dd minus
   321 0000048D [670A0000]-         <1>   dd twoslash, twoslash
   321 00000491 [670A0000]          <1>
   322 00000495 [740D0000]          <1>   dd exit
   323                              <1> 
   324                              <1> ; ------------------------------------------------------------------------
   325                              <1> ; abort on stack underflow
   326                              <1> 
   327                              <1> colon '?stack', qstack
   327                              <2>  header %1,%2
   327                              <3> [section headers]
   327 000003D6 [CC030000]          <3>  dd vlink
   327                              <3> %%link:
   327                              <3> %2n:
   327                              <3> %xdefine vlink %%link
   327 000003DA 06                  <3>  db (%%name-$-1)+imm
   327 000003DB 3F737461636B        <3>  db %1
   327                              <3> %%name:
   327 000003E1 [9D040000]          <3>  dd %2
   327                              <3> %xdefine imm 0
   327                              <3> 
   327                              <3> section list
   327 00000499 [DA030000]          <3>  dd %%link
   327                              <2> %2:
   327 0000049D E8C6080000          <2>  call nest
   327                              <2> %2_b:
   328 000004A2 [48040000]-         <1>   dd spfetch, sp0, ugreater
   328 000004A6 [C8020000]-         <1>
   328 000004AA [0A090000]          <1>
   329 000004AE [60040000]-         <1>   dd rpfetch, rp0, ugreater, orr
   329 000004B2 [D5020000]-         <1>
   329 000004B6 [0A090000]-         <1>
   329 000004BA [8F080000]          <1>
   330 000004BE [8D120000]          <1>   dd pabortq
   331 000004C2 0F537461636B20556E- <1>   db 15, 'Stack Underflow'
   331 000004CB 646572666C6F77      <1>
   332 000004D2 [60040000]-         <1>   dd rpfetch, rp0
   332 000004D6 [D5020000]          <1>
   333 000004DA [D00D0000]00400000- <1>   dd plit, 04000h, minus
   333 000004E2 [130A0000]          <1>
   334 000004E6 [FA080000]-         <1>   dd uless, pabortq
   334 000004EA [8D120000]          <1>
   335 000004EE 0E537461636B204F76- <1>   db 14, 'Stack Overflow'
   335 000004F7 6572666C6F77        <1>
   336 000004FD [740D0000]          <1>   dd exit
   337                              <1> 
   338                              <1> ; ========================================================================
   111                                    %include "memory.s"       ; fetching and storing etc
     1                              <1> ; memory.i       - x4 memory access words (fetch and store etc)
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _constant_ 'cell', cell, 4
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 000003E5 [DA030000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 000003E9 04                  <4>  db (%%name-$-1)+imm
     6 000003EA 63656C6C            <4>  db %1
     6                              <4> %%name:
     6 000003EE [05050000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 00000501 [E9030000]          <4>  dd %%link
     6                              <3> %2:
     6 00000505 E8A5080000          <2>  call doconstant
     6                              <2> %2_b:
     6 0000050A 04000000            <2>  dd %3
     7                              <1> 
     8                              <1> ; ------------------------------------------------------------------------
     9                              <1> 
    10                              <1> code 'cell+', cellplus
    10                              <2>  header %1,%2
    10                              <3> [section headers]
    10 000003F2 [E9030000]          <3>  dd vlink
    10                              <3> %%link:
    10                              <3> %2n:
    10                              <3> %xdefine vlink %%link
    10 000003F6 05                  <3>  db (%%name-$-1)+imm
    10 000003F7 63656C6C2B          <3>  db %1
    10                              <3> %%name:
    10 000003FC [12050000]          <3>  dd %2
    10                              <3> %xdefine imm 0
    10                              <3> 
    10                              <3> section list
    10 0000050E [F6030000]          <3>  dd %%link
    10                              <2> %2:
    11 00000512 83C304              <1>   add ebx, byte 4
    12                              <1>   next
    12 00000515 E9F1070000          <2>  jmp _next
    13                              <1> 
    14                              <1> ; ------------------------------------------------------------------------
    15                              <1> 
    16                              <1> code 'cell-', cellminus
    16                              <2>  header %1,%2
    16                              <3> [section headers]
    16 00000400 [F6030000]          <3>  dd vlink
    16                              <3> %%link:
    16                              <3> %2n:
    16                              <3> %xdefine vlink %%link
    16 00000404 05                  <3>  db (%%name-$-1)+imm
    16 00000405 63656C6C2D          <3>  db %1
    16                              <3> %%name:
    16 0000040A [1E050000]          <3>  dd %2
    16                              <3> %xdefine imm 0
    16                              <3> 
    16                              <3> section list
    16 0000051A [04040000]          <3>  dd %%link
    16                              <2> %2:
    17 0000051E 83EB04              <1>   sub ebx, byte 4
    18                              <1>   next
    18 00000521 E9E5070000          <2>  jmp _next
    19                              <1> 
    20                              <1> ; ------------------------------------------------------------------------
    21                              <1> 
    22                              <1> code 'cells', cells
    22                              <2>  header %1,%2
    22                              <3> [section headers]
    22 0000040E [04040000]          <3>  dd vlink
    22                              <3> %%link:
    22                              <3> %2n:
    22                              <3> %xdefine vlink %%link
    22 00000412 05                  <3>  db (%%name-$-1)+imm
    22 00000413 63656C6C73          <3>  db %1
    22                              <3> %%name:
    22 00000418 [2A050000]          <3>  dd %2
    22                              <3> %xdefine imm 0
    22                              <3> 
    22                              <3> section list
    22 00000526 [12040000]          <3>  dd %%link
    22                              <2> %2:
    23 0000052A C1E302              <1>   shl ebx, byte 2
    24                              <1>   next
    24 0000052D E9D9070000          <2>  jmp _next
    25                              <1> 
    26                              <1> ; ------------------------------------------------------------------------
    27                              <1> 
    28                              <1> code 'cell/', cellslash
    28                              <2>  header %1,%2
    28                              <3> [section headers]
    28 0000041C [12040000]          <3>  dd vlink
    28                              <3> %%link:
    28                              <3> %2n:
    28                              <3> %xdefine vlink %%link
    28 00000420 05                  <3>  db (%%name-$-1)+imm
    28 00000421 63656C6C2F          <3>  db %1
    28                              <3> %%name:
    28 00000426 [36050000]          <3>  dd %2
    28                              <3> %xdefine imm 0
    28                              <3> 
    28                              <3> section list
    28 00000532 [20040000]          <3>  dd %%link
    28                              <2> %2:
    29 00000536 C1EB02              <1>   shr ebx, byte 2
    30                              <1>   next
    30 00000539 E9CD070000          <2>  jmp _next
    31                              <1> 
    32                              <1> ; ------------------------------------------------------------------------
    33                              <1> 
    34                              <1> code 'align', align_
    34                              <2>  header %1,%2
    34                              <3> [section headers]
    34 0000042A [20040000]          <3>  dd vlink
    34                              <3> %%link:
    34                              <3> %2n:
    34                              <3> %xdefine vlink %%link
    34 0000042E 05                  <3>  db (%%name-$-1)+imm
    34 0000042F 616C69676E          <3>  db %1
    34                              <3> %%name:
    34 00000434 [42050000]          <3>  dd %2
    34                              <3> %xdefine imm 0
    34                              <3> 
    34                              <3> section list
    34 0000053E [2E040000]          <3>  dd %%link
    34                              <2> %2:
    35 00000542 83C303              <1>   add ebx, byte 3
    36 00000545 83E3FD              <1>   and ebx, byte -3
    37                              <1>   next
    37 00000548 E9BE070000          <2>  jmp _next
    38                              <1> 
    39                              <1> ; ------------------------------------------------------------------------
    40                              <1> ; compute address of indexted cell in array
    41                              <1> 
    42                              <1> ;       ( a1 ix --- a2 )
    43                              <1> 
    44                              <1> code '[]+', cellsplus
    44                              <2>  header %1,%2
    44                              <3> [section headers]
    44 00000438 [2E040000]          <3>  dd vlink
    44                              <3> %%link:
    44                              <3> %2n:
    44                              <3> %xdefine vlink %%link
    44 0000043C 03                  <3>  db (%%name-$-1)+imm
    44 0000043D 5B5D2B              <3>  db %1
    44                              <3> %%name:
    44 00000440 [51050000]          <3>  dd %2
    44                              <3> %xdefine imm 0
    44                              <3> 
    44                              <3> section list
    44 0000054D [3C040000]          <3>  dd %%link
    44                              <2> %2:
    45 00000551 58                  <1>   pop eax                   ; get a1
    46 00000552 8D1C98              <1>   lea ebx, [eax +4* ebx]
    47                              <1>   next
    47 00000555 E9B1070000          <2>  jmp _next
    48                              <1> 
    49                              <1> ; ------------------------------------------------------------------------
    50                              <1> ; fetch indexed cell of array
    51                              <1> 
    52                              <1> ;       ( a1 ix --- n2 )
    53                              <1> 
    54                              <1> code '[]@', cells_fetch
    54                              <2>  header %1,%2
    54                              <3> [section headers]
    54 00000444 [3C040000]          <3>  dd vlink
    54                              <3> %%link:
    54                              <3> %2n:
    54                              <3> %xdefine vlink %%link
    54 00000448 03                  <3>  db (%%name-$-1)+imm
    54 00000449 5B5D40              <3>  db %1
    54                              <3> %%name:
    54 0000044C [5E050000]          <3>  dd %2
    54                              <3> %xdefine imm 0
    54                              <3> 
    54                              <3> section list
    54 0000055A [48040000]          <3>  dd %%link
    54                              <2> %2:
    55 0000055E 58                  <1>   pop eax
    56 0000055F 8B1C98              <1>   mov ebx, [eax +4* ebx]
    57                              <1>   next
    57 00000562 E9A4070000          <2>  jmp _next
    58                              <1> 
    59                              <1> ; ------------------------------------------------------------------------
    60                              <1> ; store data at indexed cell of array
    61                              <1> 
    62                              <1> ;       ( n1 a1 ix --- )
    63                              <1> 
    64                              <1> code '[]!', cells_store
    64                              <2>  header %1,%2
    64                              <3> [section headers]
    64 00000450 [48040000]          <3>  dd vlink
    64                              <3> %%link:
    64                              <3> %2n:
    64                              <3> %xdefine vlink %%link
    64 00000454 03                  <3>  db (%%name-$-1)+imm
    64 00000455 5B5D21              <3>  db %1
    64                              <3> %%name:
    64 00000458 [6B050000]          <3>  dd %2
    64                              <3> %xdefine imm 0
    64                              <3> 
    64                              <3> section list
    64 00000567 [54040000]          <3>  dd %%link
    64                              <2> %2:
    65 0000056B 58                  <1>   pop eax
    66 0000056C 59                  <1>   pop ecx
    67 0000056D 890C98              <1>   mov [eax +4* ebx], ecx
    68 00000570 5B                  <1>   pop ebx                   ;
    69                              <1>   next
    69 00000571 E995070000          <2>  jmp _next
    70                              <1> 
    71                              <1> ; ------------------------------------------------------------------------
    72                              <1> ; fetch data from address (fetches 32 bits)
    73                              <1> 
    74                              <1> ;       ( a1 --- n1 )
    75                              <1> 
    76                              <1> code '@', fetch
    76                              <2>  header %1,%2
    76                              <3> [section headers]
    76 0000045C [54040000]          <3>  dd vlink
    76                              <3> %%link:
    76                              <3> %2n:
    76                              <3> %xdefine vlink %%link
    76 00000460 01                  <3>  db (%%name-$-1)+imm
    76 00000461 40                  <3>  db %1
    76                              <3> %%name:
    76 00000462 [7A050000]          <3>  dd %2
    76                              <3> %xdefine imm 0
    76                              <3> 
    76                              <3> section list
    76 00000576 [60040000]          <3>  dd %%link
    76                              <2> %2:
    77 0000057A 8B1B                <1>   mov ebx, dword [ebx]
    78                              <1>   next
    78 0000057C E98A070000          <2>  jmp _next
    79                              <1> 
    80                              <1> ; ------------------------------------------------------------------------
    81                              <1> ; store data at adderss
    82                              <1> 
    83                              <1> ;       ( n1 a1 --- )
    84                              <1> 
    85                              <1> code '!', store
    85                              <2>  header %1,%2
    85                              <3> [section headers]
    85 00000466 [60040000]          <3>  dd vlink
    85                              <3> %%link:
    85                              <3> %2n:
    85                              <3> %xdefine vlink %%link
    85 0000046A 01                  <3>  db (%%name-$-1)+imm
    85 0000046B 21                  <3>  db %1
    85                              <3> %%name:
    85 0000046C [85050000]          <3>  dd %2
    85                              <3> %xdefine imm 0
    85                              <3> 
    85                              <3> section list
    85 00000581 [6A040000]          <3>  dd %%link
    85                              <2> %2:
    86 00000585 8F03                <1>   pop dword [ebx]
    87 00000587 5B                  <1>   pop ebx
    88                              <1>   next
    88 00000588 E97E070000          <2>  jmp _next
    89                              <1> 
    90                              <1> ; ------------------------------------------------------------------------
    91                              <1> ; fetch character from address a1
    92                              <1> 
    93                              <1> ;       ( a1 --- c1 )
    94                              <1> 
    95                              <1> code 'c@', cfetch
    95                              <2>  header %1,%2
    95                              <3> [section headers]
    95 00000470 [6A040000]          <3>  dd vlink
    95                              <3> %%link:
    95                              <3> %2n:
    95                              <3> %xdefine vlink %%link
    95 00000474 02                  <3>  db (%%name-$-1)+imm
    95 00000475 6340                <3>  db %1
    95                              <3> %%name:
    95 00000477 [91050000]          <3>  dd %2
    95                              <3> %xdefine imm 0
    95                              <3> 
    95                              <3> section list
    95 0000058D [74040000]          <3>  dd %%link
    95                              <2> %2:
    96 00000591 0FB61B              <1>   movzx ebx, byte [ebx]     ; get character
    97                              <1>   next
    97 00000594 E972070000          <2>  jmp _next
    98                              <1> 
    99                              <1> ; ------------------------------------------------------------------------
   100                              <1> ; store character c1 at address a1
   101                              <1> 
   102                              <1> ;       ( c1 a1 --- )
   103                              <1> 
   104                              <1> code 'c!', cstore
   104                              <2>  header %1,%2
   104                              <3> [section headers]
   104 0000047B [74040000]          <3>  dd vlink
   104                              <3> %%link:
   104                              <3> %2n:
   104                              <3> %xdefine vlink %%link
   104 0000047F 02                  <3>  db (%%name-$-1)+imm
   104 00000480 6321                <3>  db %1
   104                              <3> %%name:
   104 00000482 [9D050000]          <3>  dd %2
   104                              <3> %xdefine imm 0
   104                              <3> 
   104                              <3> section list
   104 00000599 [7F040000]          <3>  dd %%link
   104                              <2> %2:
   105 0000059D 58                  <1>   pop eax                   ; get c1
   106 0000059E 8803                <1>   mov byte [ebx], al        ; store at a1
   107 000005A0 5B                  <1>   pop ebx
   108                              <1>   next
   108 000005A1 E965070000          <2>  jmp _next
   109                              <1> 
   110                              <1> ; ------------------------------------------------------------------------
   111                              <1> ; fetch word from address a1
   112                              <1> 
   113                              <1> ;       ( a1 --- w1 )
   114                              <1> 
   115                              <1> code 'w@', wfetch
   115                              <2>  header %1,%2
   115                              <3> [section headers]
   115 00000486 [7F040000]          <3>  dd vlink
   115                              <3> %%link:
   115                              <3> %2n:
   115                              <3> %xdefine vlink %%link
   115 0000048A 02                  <3>  db (%%name-$-1)+imm
   115 0000048B 7740                <3>  db %1
   115                              <3> %%name:
   115 0000048D [AA050000]          <3>  dd %2
   115                              <3> %xdefine imm 0
   115                              <3> 
   115                              <3> section list
   115 000005A6 [8A040000]          <3>  dd %%link
   115                              <2> %2:
   116 000005AA 0FB71B              <1>   movzx ebx, word [ebx]
   117                              <1>   next
   117 000005AD E959070000          <2>  jmp _next
   118                              <1> 
   119                              <1> ; ------------------------------------------------------------------------
   120                              <1> ; store word w1 at address a1
   121                              <1> 
   122                              <1> ;       ( w1 a1 --- )
   123                              <1> 
   124                              <1> code 'w!', wstore
   124                              <2>  header %1,%2
   124                              <3> [section headers]
   124 00000491 [8A040000]          <3>  dd vlink
   124                              <3> %%link:
   124                              <3> %2n:
   124                              <3> %xdefine vlink %%link
   124 00000495 02                  <3>  db (%%name-$-1)+imm
   124 00000496 7721                <3>  db %1
   124                              <3> %%name:
   124 00000498 [B6050000]          <3>  dd %2
   124                              <3> %xdefine imm 0
   124                              <3> 
   124                              <3> section list
   124 000005B2 [95040000]          <3>  dd %%link
   124                              <2> %2:
   125 000005B6 58                  <1>   pop eax
   126 000005B7 668903              <1>   mov [ebx], ax
   127 000005BA 5B                  <1>   pop ebx
   128                              <1>   next
   128 000005BB E94B070000          <2>  jmp _next
   129                              <1> 
   130                              <1> ; ------------------------------------------------------------------------
   131                              <1> ; swap contents of two memory cells
   132                              <1> 
   133                              <1> code 'juggle', juggle
   133                              <2>  header %1,%2
   133                              <3> [section headers]
   133 0000049C [95040000]          <3>  dd vlink
   133                              <3> %%link:
   133                              <3> %2n:
   133                              <3> %xdefine vlink %%link
   133 000004A0 06                  <3>  db (%%name-$-1)+imm
   133 000004A1 6A7567676C65        <3>  db %1
   133                              <3> %%name:
   133 000004A7 [C4050000]          <3>  dd %2
   133                              <3> %xdefine imm 0
   133                              <3> 
   133                              <3> section list
   133 000005C0 [A0040000]          <3>  dd %%link
   133                              <2> %2:
   134 000005C4 58                  <1>   pop eax
   135 000005C5 8B08                <1>   mov ecx, dword [eax]
   136 000005C7 8B13                <1>   mov edx, dword [ebx]
   137 000005C9 890B                <1>   mov dword [ebx], ecx
   138 000005CB 8910                <1>   mov dword [eax], edx
   139 000005CD 5B                  <1>   pop ebx
   140                              <1>   next
   140 000005CE E938070000          <2>  jmp _next
   141                              <1> 
   142                              <1> ; ------------------------------------------------------------------------
   143                              <1> ; convert a counted string to an address and count
   144                              <1> 
   145                              <1> ;       ( a1 --- a2 n1 )
   146                              <1> 
   147                              <1> code 'count', count
   147                              <2>  header %1,%2
   147                              <3> [section headers]
   147 000004AB [A0040000]          <3>  dd vlink
   147                              <3> %%link:
   147                              <3> %2n:
   147                              <3> %xdefine vlink %%link
   147 000004AF 05                  <3>  db (%%name-$-1)+imm
   147 000004B0 636F756E74          <3>  db %1
   147                              <3> %%name:
   147 000004B5 [D7050000]          <3>  dd %2
   147                              <3> %xdefine imm 0
   147                              <3> 
   147                              <3> section list
   147 000005D3 [AF040000]          <3>  dd %%link
   147                              <2> %2:
   148 000005D7 0FB60B              <1>   movzx ecx, byte [ebx]     ; get length byte from string
   149 000005DA 43                  <1>   inc ebx                   ; advance address past count byte
   150 000005DB 53                  <1>   push ebx                  ; return address and length
   151 000005DC 89CB                <1>   mov ebx, ecx
   152                              <1>   next
   152 000005DE E928070000          <2>  jmp _next
   153                              <1> 
   154                              <1> ; ------------------------------------------------------------------------
   155                              <1> ; like count but fetches 32 bit item and advances address by 4
   156                              <1> 
   157                              <1> code 'dcount', dcount
   157                              <2>  header %1,%2
   157                              <3> [section headers]
   157 000004B9 [AF040000]          <3>  dd vlink
   157                              <3> %%link:
   157                              <3> %2n:
   157                              <3> %xdefine vlink %%link
   157 000004BD 06                  <3>  db (%%name-$-1)+imm
   157 000004BE 64636F756E74        <3>  db %1
   157                              <3> %%name:
   157 000004C4 [E7050000]          <3>  dd %2
   157                              <3> %xdefine imm 0
   157                              <3> 
   157                              <3> section list
   157 000005E3 [BD040000]          <3>  dd %%link
   157                              <2> %2:
   158 000005E7 8B0B                <1>   mov ecx, [ebx]
   159 000005E9 83C304              <1>   add ebx, byte 4
   160 000005EC 53                  <1>   push ebx
   161 000005ED 89CB                <1>   mov ebx, ecx
   162                              <1>   next
   162 000005EF E917070000          <2>  jmp _next
   163                              <1> 
   164                              <1> ; ------------------------------------------------------------------------
   165                              <1> ; move contents of address a1 to address a2
   166                              <1> 
   167                              <1> ;           ( a1 a2 --- )
   168                              <1> 
   169                              <1> code 'dmove', dmove
   169                              <2>  header %1,%2
   169                              <3> [section headers]
   169 000004C8 [BD040000]          <3>  dd vlink
   169                              <3> %%link:
   169                              <3> %2n:
   169                              <3> %xdefine vlink %%link
   169 000004CC 05                  <3>  db (%%name-$-1)+imm
   169 000004CD 646D6F7665          <3>  db %1
   169                              <3> %%name:
   169 000004D2 [F8050000]          <3>  dd %2
   169                              <3> %xdefine imm 0
   169                              <3> 
   169                              <3> section list
   169 000005F4 [CC040000]          <3>  dd %%link
   169                              <2> %2:
   170 000005F8 58                  <1>   pop eax                    ; get a1
   171 000005F9 8B00                <1>   mov eax, [eax]             ; get contents thereof
   172 000005FB 8903                <1>   mov [ebx], eax             ; store it at a2
   173 000005FD 5B                  <1>   pop ebx                    ; cache tos
   174                              <1>   next
   174 000005FE E908070000          <2>  jmp _next
   175                              <1> 
   176                              <1> ; ------------------------------------------------------------------------
   177                              <1> ; get length of asciiz string
   178                              <1> 
   179                              <1> ;       ( a1 --- a1 n1 )
   180                              <1> 
   181                              <1> ; colon 'strlen', strlen
   182                              <1> ;   dd plit, 0                ; resultant length
   183                              <1> ; .L0:
   184                              <1> ;   dd dobegin
   185                              <1> ;   dd dup2, plus, cfetch
   186                              <1> ;   dd qwhile, .L1
   187                              <1> ;   dd oneplus
   188                              <1> ;   dd dorepeat,.L0
   189                              <1> ; .L1:
   190 00000603 [740D0000]          <1>   dd exit
   191                              <1> 
   192                              <1> code 'strlen', strlen2
   192                              <2>  header %1,%2
   192                              <3> [section headers]
   192 000004D6 [CC040000]          <3>  dd vlink
   192                              <3> %%link:
   192                              <3> %2n:
   192                              <3> %xdefine vlink %%link
   192 000004DA 06                  <3>  db (%%name-$-1)+imm
   192 000004DB 7374726C656E        <3>  db %1
   192                              <3> %%name:
   192 000004E1 [0B060000]          <3>  dd %2
   192                              <3> %xdefine imm 0
   192                              <3> 
   192                              <3> section list
   192 00000607 [DA040000]          <3>  dd %%link
   192                              <2> %2:
   193 0000060B 89D8                <1>   mov eax, ebx
   194                              <1> .L0:
   195 0000060D 803B00              <1>   cmp byte[ebx], 0
   196 00000610 7403                <1>   jz .L1
   197 00000612 43                  <1>   inc ebx
   198 00000613 EBF8                <1>   jmp short .L0
   199                              <1> .L1:
   200 00000615 29C3                <1>   sub ebx, eax
   201 00000617 50                  <1>   push eax
   202                              <1>   next
   202 00000618 E9EE060000          <2>  jmp _next
   203                              <1> 
   204                              <1> ; ------------------------------------------------------------------------
   205                              <1> ; set bits of data at specified address
   206                              <1> 
   207                              <1> ;       ( n1 a1 --- )
   208                              <1> 
   209                              <1> code 'cset', cset
   209                              <2>  header %1,%2
   209                              <3> [section headers]
   209 000004E5 [DA040000]          <3>  dd vlink
   209                              <3> %%link:
   209                              <3> %2n:
   209                              <3> %xdefine vlink %%link
   209 000004E9 04                  <3>  db (%%name-$-1)+imm
   209 000004EA 63736574            <3>  db %1
   209                              <3> %%name:
   209 000004EE [21060000]          <3>  dd %2
   209                              <3> %xdefine imm 0
   209                              <3> 
   209                              <3> section list
   209 0000061D [E9040000]          <3>  dd %%link
   209                              <2> %2:
   210 00000621 58                  <1>   pop eax
   211 00000622 0803                <1>   or [ebx], al
   212 00000624 5B                  <1>   pop ebx
   213                              <1>   next
   213 00000625 E9E1060000          <2>  jmp _next
   214                              <1> 
   215                              <1> ; ------------------------------------------------------------------------
   216                              <1> ; clear bits of data at specified address
   217                              <1> 
   218                              <1> ;       ( n1 a1 --- )
   219                              <1> 
   220                              <1> code 'cclr', cclr
   220                              <2>  header %1,%2
   220                              <3> [section headers]
   220 000004F2 [E9040000]          <3>  dd vlink
   220                              <3> %%link:
   220                              <3> %2n:
   220                              <3> %xdefine vlink %%link
   220 000004F6 04                  <3>  db (%%name-$-1)+imm
   220 000004F7 63636C72            <3>  db %1
   220                              <3> %%name:
   220 000004FB [2E060000]          <3>  dd %2
   220                              <3> %xdefine imm 0
   220                              <3> 
   220                              <3> section list
   220 0000062A [F6040000]          <3>  dd %%link
   220                              <2> %2:
   221 0000062E 58                  <1>   pop eax
   222 0000062F F7D0                <1>   not eax
   223 00000631 2003                <1>   and [ebx], al
   224 00000633 5B                  <1>   pop ebx
   225                              <1>   next
   225 00000634 E9D2060000          <2>  jmp _next
   226                              <1> 
   227                              <1> ; ------------------------------------------------------------------------
   228                              <1> ; set data at address to true
   229                              <1> 
   230                              <1> ;       ( a1 --- )
   231                              <1> 
   232                              <1> code 'on', on
   232                              <2>  header %1,%2
   232                              <3> [section headers]
   232 000004FF [F6040000]          <3>  dd vlink
   232                              <3> %%link:
   232                              <3> %2n:
   232                              <3> %xdefine vlink %%link
   232 00000503 02                  <3>  db (%%name-$-1)+imm
   232 00000504 6F6E                <3>  db %1
   232                              <3> %%name:
   232 00000506 [3D060000]          <3>  dd %2
   232                              <3> %xdefine imm 0
   232                              <3> 
   232                              <3> section list
   232 00000639 [03050000]          <3>  dd %%link
   232                              <2> %2:
   233 0000063D C703FFFFFFFF        <1>   mov dword [ebx], -1
   234 00000643 5B                  <1>   pop ebx
   235                              <1>   next
   235 00000644 E9C2060000          <2>  jmp _next
   236                              <1> 
   237                              <1> ; ------------------------------------------------------------------------
   238                              <1> ; set data at address to false
   239                              <1> 
   240                              <1> ;       ( a1 --- )
   241                              <1> 
   242                              <1> code 'off', off
   242                              <2>  header %1,%2
   242                              <3> [section headers]
   242 0000050A [03050000]          <3>  dd vlink
   242                              <3> %%link:
   242                              <3> %2n:
   242                              <3> %xdefine vlink %%link
   242 0000050E 03                  <3>  db (%%name-$-1)+imm
   242 0000050F 6F6666              <3>  db %1
   242                              <3> %%name:
   242 00000512 [4D060000]          <3>  dd %2
   242                              <3> %xdefine imm 0
   242                              <3> 
   242                              <3> section list
   242 00000649 [0E050000]          <3>  dd %%link
   242                              <2> %2:
   243 0000064D C70300000000        <1>   mov dword [ebx], 0
   244 00000653 5B                  <1>   pop ebx
   245                              <1>   next
   245 00000654 E9B2060000          <2>  jmp _next
   246                              <1> 
   247                              <1> ; ------------------------------------------------------------------------
   248                              <1> ; increment data at specified address
   249                              <1> 
   250                              <1> ;       ( a1 --- )
   251                              <1> 
   252                              <1> code 'incr', incr
   252                              <2>  header %1,%2
   252                              <3> [section headers]
   252 00000516 [0E050000]          <3>  dd vlink
   252                              <3> %%link:
   252                              <3> %2n:
   252                              <3> %xdefine vlink %%link
   252 0000051A 04                  <3>  db (%%name-$-1)+imm
   252 0000051B 696E6372            <3>  db %1
   252                              <3> %%name:
   252 0000051F [5D060000]          <3>  dd %2
   252                              <3> %xdefine imm 0
   252                              <3> 
   252                              <3> section list
   252 00000659 [1A050000]          <3>  dd %%link
   252                              <2> %2:
   253 0000065D FF03                <1>   inc dword [ebx]
   254 0000065F 5B                  <1>   pop ebx
   255                              <1>   next
   255 00000660 E9A6060000          <2>  jmp _next
   256                              <1> 
   257                              <1> ; ------------------------------------------------------------------------
   258                              <1> ; decrement data at specified address
   259                              <1> 
   260                              <1> ;       ( a1 --- )
   261                              <1> 
   262                              <1> code 'decr', decr
   262                              <2>  header %1,%2
   262                              <3> [section headers]
   262 00000523 [1A050000]          <3>  dd vlink
   262                              <3> %%link:
   262                              <3> %2n:
   262                              <3> %xdefine vlink %%link
   262 00000527 04                  <3>  db (%%name-$-1)+imm
   262 00000528 64656372            <3>  db %1
   262                              <3> %%name:
   262 0000052C [69060000]          <3>  dd %2
   262                              <3> %xdefine imm 0
   262                              <3> 
   262                              <3> section list
   262 00000665 [27050000]          <3>  dd %%link
   262                              <2> %2:
   263 00000669 FF0B                <1>   dec dword [ebx]
   264 0000066B 5B                  <1>   pop ebx
   265                              <1>   next
   265 0000066C E99A060000          <2>  jmp _next
   266                              <1> 
   267                              <1> ; ------------------------------------------------------------------------
   268                              <1> ; decrement data at specified address but dont decrement throught zero
   269                              <1> 
   270                              <1> ;       ( a1 --- )
   271                              <1> 
   272                              <1> code '0decr', zdecr
   272                              <2>  header %1,%2
   272                              <3> [section headers]
   272 00000530 [27050000]          <3>  dd vlink
   272                              <3> %%link:
   272                              <3> %2n:
   272                              <3> %xdefine vlink %%link
   272 00000534 05                  <3>  db (%%name-$-1)+imm
   272 00000535 3064656372          <3>  db %1
   272                              <3> %%name:
   272 0000053A [75060000]          <3>  dd %2
   272                              <3> %xdefine imm 0
   272                              <3> 
   272                              <3> section list
   272 00000671 [34050000]          <3>  dd %%link
   272                              <2> %2:
   273 00000675 8B03                <1>   mov eax, [ebx]            ; read current value
   274 00000677 7402                <1>   jz .L0                    ; if it is already 0 then exit
   275 00000679 FF0B                <1>   dec dword [ebx]           ; else decrement the data
   276                              <1> .L0:
   277 0000067B 5B                  <1>   pop ebx
   278                              <1>   next
   278 0000067C E98A060000          <2>  jmp _next
   279                              <1> 
   280                              <1> ; ------------------------------------------------------------------------
   281                              <1> ; add n1 to data at a1
   282                              <1> 
   283                              <1> ;       ( n1 a1 --- )
   284                              <1> 
   285                              <1> code '+!', plusstore
   285                              <2>  header %1,%2
   285                              <3> [section headers]
   285 0000053E [34050000]          <3>  dd vlink
   285                              <3> %%link:
   285                              <3> %2n:
   285                              <3> %xdefine vlink %%link
   285 00000542 02                  <3>  db (%%name-$-1)+imm
   285 00000543 2B21                <3>  db %1
   285                              <3> %%name:
   285 00000545 [85060000]          <3>  dd %2
   285                              <3> %xdefine imm 0
   285                              <3> 
   285                              <3> section list
   285 00000681 [42050000]          <3>  dd %%link
   285                              <2> %2:
   286 00000685 58                  <1>   pop eax                   ; get data
   287 00000686 0103                <1>   add dword [ebx], eax      ; add data to address
   288 00000688 5B                  <1>   pop ebx
   289                              <1>   next
   289 00000689 E97D060000          <2>  jmp _next
   290                              <1> 
   291                              <1> ; ------------------------------------------------------------------------
   292                              <1> ; add w1 to data at a1
   293                              <1> 
   294                              <1> ;       ( w1 a1 --- )
   295                              <1> 
   296                              <1> code 'w+!', wplusstore
   296                              <2>  header %1,%2
   296                              <3> [section headers]
   296 00000549 [42050000]          <3>  dd vlink
   296                              <3> %%link:
   296                              <3> %2n:
   296                              <3> %xdefine vlink %%link
   296 0000054D 03                  <3>  db (%%name-$-1)+imm
   296 0000054E 772B21              <3>  db %1
   296                              <3> %%name:
   296 00000551 [92060000]          <3>  dd %2
   296                              <3> %xdefine imm 0
   296                              <3> 
   296                              <3> section list
   296 0000068E [4D050000]          <3>  dd %%link
   296                              <2> %2:
   297 00000692 58                  <1>   pop eax                   ; get data
   298 00000693 660103              <1>   add word [ebx], ax        ; add data to address
   299 00000696 5B                  <1>   pop ebx
   300                              <1>   next
   300 00000697 E96F060000          <2>  jmp _next
   301                              <1> 
   302                              <1> ; ------------------------------------------------------------------------
   303                              <1> 
   304                              <1> ;       ( src dst len --- )
   305                              <1> 
   306                              <1> code 'cmove', cmove_
   306                              <2>  header %1,%2
   306                              <3> [section headers]
   306 00000555 [4D050000]          <3>  dd vlink
   306                              <3> %%link:
   306                              <3> %2n:
   306                              <3> %xdefine vlink %%link
   306 00000559 05                  <3>  db (%%name-$-1)+imm
   306 0000055A 636D6F7665          <3>  db %1
   306                              <3> %%name:
   306 0000055F [A0060000]          <3>  dd %2
   306                              <3> %xdefine imm 0
   306                              <3> 
   306                              <3> section list
   306 0000069C [59050000]          <3>  dd %%link
   306                              <2> %2:
   307 000006A0 89D9                <1>   mov ecx, ebx              ; get # bytes to move
   308 000006A2 5F                  <1>   pop edi                   ; get destination address
   309 000006A3 89F2                <1>   mov edx, esi              ; save ip
   310 000006A5 5E                  <1>   pop esi                   ; get source address
   311 000006A6 C1E902              <1>   shr ecx, 2
   312 000006A9 F3A5                <1>   rep movsd
   313 000006AB 89D9                <1>   mov ecx, ebx
   314 000006AD 83E103              <1>   and ecx, 3
   315                              <1> 
   316 000006B0 F3A4                <1>   rep movsb
   317                              <1> 
   318                              <1> .L0:
   319 000006B2 89D6                <1>   mov esi, edx              ; restore
   320 000006B4 5B                  <1>   pop ebx
   321                              <1>   next
   321 000006B5 E951060000          <2>  jmp _next
   322                              <1> 
   323                              <1> ; ------------------------------------------------------------------------
   324                              <1> ; as above but starting at end of buffers and moving downwards in mem
   325                              <1> 
   326                              <1> ;       ( a1 a2 n1 --- )
   327                              <1> 
   328                              <1> code 'cmove>', cmoveto
   328                              <2>  header %1,%2
   328                              <3> [section headers]
   328 00000563 [59050000]          <3>  dd vlink
   328                              <3> %%link:
   328                              <3> %2n:
   328                              <3> %xdefine vlink %%link
   328 00000567 06                  <3>  db (%%name-$-1)+imm
   328 00000568 636D6F76653E        <3>  db %1
   328                              <3> %%name:
   328 0000056E [BE060000]          <3>  dd %2
   328                              <3> %xdefine imm 0
   328                              <3> 
   328                              <3> section list
   328 000006BA [67050000]          <3>  dd %%link
   328                              <2> %2:
   329 000006BE 89D9                <1>   mov ecx, ebx              ; get byte count in ecx
   330 000006C0 5F                  <1>   pop edi                   ; get destination address
   331 000006C1 89F2                <1>   mov edx, esi              ; save ip
   332 000006C3 5E                  <1>   pop esi                   ; get source address
   333 000006C4 E30A                <1>   jecxz .L1
   334                              <1> 
   335 000006C6 01CF                <1>   add edi, ecx              ; point to end of source and destination
   336 000006C8 01CE                <1>   add esi, ecx
   337 000006CA 4F                  <1>   dec edi
   338 000006CB 4E                  <1>   dec esi
   339                              <1> 
   340 000006CC FD                  <1>   std                       ; moving backwards
   341 000006CD F3A4                <1>   rep movsb                 ; move data
   342 000006CF FC                  <1>   cld                       ; restore default direction
   343                              <1> 
   344                              <1> .L1:
   345 000006D0 89D6                <1>   mov esi, edx              ; restore ip
   346 000006D2 5B                  <1>   pop ebx
   347                              <1>   next
   347 000006D3 E933060000          <2>  jmp _next
   348                              <1> 
   349                              <1> ; ------------------------------------------------------------------------
   350                              <1> ; fill block of memory with character
   351                              <1> 
   352                              <1> ;       ( a1 n1 c1 --- )
   353                              <1> 
   354                              <1> code 'fill', fill
   354                              <2>  header %1,%2
   354                              <3> [section headers]
   354 00000572 [67050000]          <3>  dd vlink
   354                              <3> %%link:
   354                              <3> %2n:
   354                              <3> %xdefine vlink %%link
   354 00000576 04                  <3>  db (%%name-$-1)+imm
   354 00000577 66696C6C            <3>  db %1
   354                              <3> %%name:
   354 0000057B [DC060000]          <3>  dd %2
   354                              <3> %xdefine imm 0
   354                              <3> 
   354                              <3> section list
   354 000006D8 [76050000]          <3>  dd %%link
   354                              <2> %2:
   355 000006DC 89D8                <1>   mov eax, ebx              ; get fill char
   356 000006DE 59                  <1>   pop ecx                   ; fill count
   357 000006DF 5F                  <1>   pop edi                   ; fill address
   358                              <1> 
   359                              <1> .L0:
   360 000006E0 E302                <1>   jecxz .L1
   361                              <1> 
   362 000006E2 F3AA                <1>   rep stosb
   363                              <1> 
   364                              <1> .L1:
   365 000006E4 5B                  <1>   pop ebx
   366                              <1>   next
   366 000006E5 E921060000          <2>  jmp _next
   367                              <1> 
   368                              <1> ; ------------------------------------------------------------------------
   369                              <1> ; fill block of memory with words
   370                              <1> 
   371                              <1> ;       ( a1 n1 w1 --- )
   372                              <1> 
   373                              <1> code 'wfill', wfill
   373                              <2>  header %1,%2
   373                              <3> [section headers]
   373 0000057F [76050000]          <3>  dd vlink
   373                              <3> %%link:
   373                              <3> %2n:
   373                              <3> %xdefine vlink %%link
   373 00000583 05                  <3>  db (%%name-$-1)+imm
   373 00000584 7766696C6C          <3>  db %1
   373                              <3> %%name:
   373 00000589 [EE060000]          <3>  dd %2
   373                              <3> %xdefine imm 0
   373                              <3> 
   373                              <3> section list
   373 000006EA [83050000]          <3>  dd %%link
   373                              <2> %2:
   374 000006EE 89D8                <1>   mov eax, ebx              ; get fil data in ax
   375 000006F0 59                  <1>   pop ecx                   ; count
   376 000006F1 5F                  <1>   pop edi
   377 000006F2 E3F0                <1>   jecxz fill.L1
   378 000006F4 F366AB              <1>   rep stosw
   379 000006F7 5B                  <1>   pop ebx
   380                              <1>   next
   380 000006F8 E90E060000          <2>  jmp _next
   381                              <1> 
   382                              <1> ; ------------------------------------------------------------------------
   383                              <1> ; fill memory with double words (32 bits)
   384                              <1> 
   385                              <1> ;       ( a1 n1 d1 --- )
   386                              <1> 
   387                              <1> code 'dfill', dfill
   387                              <2>  header %1,%2
   387                              <3> [section headers]
   387 0000058D [83050000]          <3>  dd vlink
   387                              <3> %%link:
   387                              <3> %2n:
   387                              <3> %xdefine vlink %%link
   387 00000591 05                  <3>  db (%%name-$-1)+imm
   387 00000592 6466696C6C          <3>  db %1
   387                              <3> %%name:
   387 00000597 [01070000]          <3>  dd %2
   387                              <3> %xdefine imm 0
   387                              <3> 
   387                              <3> section list
   387 000006FD [91050000]          <3>  dd %%link
   387                              <2> %2:
   388 00000701 89D8                <1>   mov eax, ebx
   389 00000703 59                  <1>   pop ecx
   390 00000704 5F                  <1>   pop edi
   391 00000705 E3DD                <1>   jecxz fill.L1
   392 00000707 F3AB                <1>   rep stosd
   393 00000709 5B                  <1>   pop ebx
   394                              <1>   next
   394 0000070A E9FC050000          <2>  jmp _next
   395                              <1> 
   396                              <1> ; ------------------------------------------------------------------------
   397                              <1> ; fill block of memory with spaces
   398                              <1> 
   399                              <1> ;       ( a1 n1 --- )
   400                              <1> 
   401                              <1> code 'blank', blank
   401                              <2>  header %1,%2
   401                              <3> [section headers]
   401 0000059B [91050000]          <3>  dd vlink
   401                              <3> %%link:
   401                              <3> %2n:
   401                              <3> %xdefine vlink %%link
   401 0000059F 05                  <3>  db (%%name-$-1)+imm
   401 000005A0 626C616E6B          <3>  db %1
   401                              <3> %%name:
   401 000005A5 [13070000]          <3>  dd %2
   401                              <3> %xdefine imm 0
   401                              <3> 
   401                              <3> section list
   401 0000070F [9F050000]          <3>  dd %%link
   401                              <2> %2:
   402 00000713 B020                <1>   mov al,' '
   403                              <1> .L0:
   404 00000715 89D9                <1>   mov ecx, ebx
   405 00000717 5F                  <1>   pop edi
   406 00000718 EBC6                <1>   jmp short fill.L0
   407                              <1> 
   408                              <1> ; ------------------------------------------------------------------------
   409                              <1> ; fill block of memory with nulls
   410                              <1> 
   411                              <1> ;       ( a1 n1 --- )
   412                              <1> 
   413                              <1> code 'erase', erase
   413                              <2>  header %1,%2
   413                              <3> [section headers]
   413 000005A9 [9F050000]          <3>  dd vlink
   413                              <3> %%link:
   413                              <3> %2n:
   413                              <3> %xdefine vlink %%link
   413 000005AD 05                  <3>  db (%%name-$-1)+imm
   413 000005AE 6572617365          <3>  db %1
   413                              <3> %%name:
   413 000005B3 [1E070000]          <3>  dd %2
   413                              <3> %xdefine imm 0
   413                              <3> 
   413                              <3> section list
   413 0000071A [AD050000]          <3>  dd %%link
   413                              <2> %2:
   414 0000071E 30C0                <1>   xor al,al
   415 00000720 EBF3                <1>   jmp short blank.L0
   416                              <1> 
   417                              <1> ; ------------------------------------------------------------------------
   418                              <1> ; ascii upper case translation table
   419                              <1> 
   420                              <1> atbl:
   421 00000722 000102030405060708- <1>   db  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15
   421 0000072B 090A0B0C0D0E0F      <1>
   422 00000732 101112131415161718- <1>   db 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
   422 0000073B 191A1B1C1D1E1F20    <1>
   423 00000743 21222324252627      <1>   db '!"#$%&', "'"
   424 0000074A 28292A2B2C2D2E2F30- <1>   db '()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFG'
   424 00000753 313233343536373839- <1>
   424 0000075C 3A3B3C3D3E3F404142- <1>
   424 00000765 434445464748494A4B- <1>
   424 0000076E 4C4D4E4F5051525354- <1>
   424 00000777 55565758595A5B5C5D- <1>
   424 00000780 5E5F60414243444546- <1>
   424 00000789 47                  <1>
   425 0000078A 48494A4B4C4D4E4F50- <1>   db 'HIJKLMNOPQRSTUVWXYZ{|}~', 127
   425 00000793 515253545556575859- <1>
   425 0000079C 5A7B7C7D7E7F        <1>
   426                              <1> 
   427                              <1> ; ------------------------------------------------------------------------
   428                              <1> ; convert a single character to upper case.
   429                              <1> 
   430                              <1> ; i would purge the system of this definition but some people like to
   431                              <1> ; enter numbers in all upper case (ick) - the number conversion words
   432                              <1> ; is the only place i use this in the kernel.
   433                              <1> 
   434                              <1> ;       ( c1 --- c2 )
   435                              <1> 
   436                              <1> code 'upc', upc
   436                              <2>  header %1,%2
   436                              <3> [section headers]
   436 000005B7 [AD050000]          <3>  dd vlink
   436                              <3> %%link:
   436                              <3> %2n:
   436                              <3> %xdefine vlink %%link
   436 000005BB 03                  <3>  db (%%name-$-1)+imm
   436 000005BC 757063              <3>  db %1
   436                              <3> %%name:
   436 000005BF [A6070000]          <3>  dd %2
   436                              <3> %xdefine imm 0
   436                              <3> 
   436                              <3> section list
   436 000007A2 [BB050000]          <3>  dd %%link
   436                              <2> %2:
   437 000007A6 B8[22070000]        <1>   mov eax, atbl
   438 000007AB 83E37F              <1>   and ebx, 07fh
   439 000007AE 93                  <1>   xchg eax, ebx
   440 000007AF D7                  <1>   xlatb
   441 000007B0 89C3                <1>   mov ebx, eax
   442                              <1>   next
   442 000007B2 E954050000          <2>  jmp _next
   443                              <1> 
   444                              <1> ; ------------------------------------------------------------------------
   445                              <1> ; compare 2 strings. returns -1 if they match, 0 if not.
   446                              <1> 
   447                              <1> ;       ( a1 a2 n1 --- -1 | 0 | 1 )
   448                              <1> 
   449                              <1> code 'comp', comp
   449                              <2>  header %1,%2
   449                              <3> [section headers]
   449 000005C3 [BB050000]          <3>  dd vlink
   449                              <3> %%link:
   449                              <3> %2n:
   449                              <3> %xdefine vlink %%link
   449 000005C7 04                  <3>  db (%%name-$-1)+imm
   449 000005C8 636F6D70            <3>  db %1
   449                              <3> %%name:
   449 000005CC [BB070000]          <3>  dd %2
   449                              <3> %xdefine imm 0
   449                              <3> 
   449                              <3> section list
   449 000007B7 [C7050000]          <3>  dd %%link
   449                              <2> %2:
   450 000007BB 89D9                <1>   mov ecx, ebx              ; get string length
   451 000007BD 5F                  <1>   pop edi                   ; get addresses of strings
   452 000007BE 5A                  <1>   pop edx
   453 000007BF E316                <1>   jecxz .L2                 ; n1 is zero? skip this..
   454 000007C1 87D6                <1>   xchg edx, esi
   455 000007C3 F3A6                <1>   repz cmpsb                ; comp strings
   456 000007C5 740E                <1>   jz .L1                    ; ecx=0
   457 000007C7 7307                <1>   jnb .L0
   458 000007C9 B9FFFFFFFF          <1>   mov ecx, -1
   459 000007CE EB05                <1>   jmp .L1
   460                              <1> .L0:
   461 000007D0 B901000000          <1>   mov ecx, 1
   462                              <1> .L1:
   463 000007D5 89D6                <1>   mov esi, edx
   464                              <1> .L2:
   465 000007D7 89CB                <1>   mov ebx, ecx
   466                              <1>   next
   466 000007D9 E92D050000          <2>  jmp _next
   467                              <1> 
   468                              <1> ; ------------------------------------------------------------------------
   469                              <1> ; convert string from counted to asciiz - useful for os calls
   470                              <1> 
   471                              <1> ;       ( a1 n1 --- a1 )
   472                              <1> 
   473                              <1> colon 's>z', s2z
   473                              <2>  header %1,%2
   473                              <3> [section headers]
   473 000005D0 [C7050000]          <3>  dd vlink
   473                              <3> %%link:
   473                              <3> %2n:
   473                              <3> %xdefine vlink %%link
   473 000005D4 03                  <3>  db (%%name-$-1)+imm
   473 000005D5 733E7A              <3>  db %1
   473                              <3> %%name:
   473 000005D8 [E2070000]          <3>  dd %2
   473                              <3> %xdefine imm 0
   473                              <3> 
   473                              <3> section list
   473 000007DE [D4050000]          <3>  dd %%link
   473                              <2> %2:
   473 000007E2 E881050000          <2>  call nest
   473                              <2> %2_b:
   474 000007E7 [60030000]-         <1>   dd over, plus, plit, 0
   474 000007EB [070A0000]-         <1>
   474 000007EF [D00D0000]00000000  <1>
   475 000007F7 [18030000]-         <1>   dd swap, cstore
   475 000007FB [9D050000]          <1>
   476 000007FF [740D0000]          <1>   dd exit
   477                              <1> 
   478                              <1> ; ------------------------------------------------------------------------
   479                              <1> ; store string a1 of length n1 at address a2 as a counted string
   480                              <1> 
   481                              <1> ;       ( a1 n1 a2 -- )
   482                              <1> 
   483                              <1> colon '$!', strstore
   483                              <2>  header %1,%2
   483                              <3> [section headers]
   483 000005DC [D4050000]          <3>  dd vlink
   483                              <3> %%link:
   483                              <3> %2n:
   483                              <3> %xdefine vlink %%link
   483 000005E0 02                  <3>  db (%%name-$-1)+imm
   483 000005E1 2421                <3>  db %1
   483                              <3> %%name:
   483 000005E3 [07080000]          <3>  dd %2
   483                              <3> %xdefine imm 0
   483                              <3> 
   483                              <3> section list
   483 00000803 [E0050000]          <3>  dd %%link
   483                              <2> %2:
   483 00000807 E85C050000          <2>  call nest
   483                              <2> %2_b:
   484 0000080C [F9020000]-         <1>   dd dup2, cstore, oneplus
   484 00000810 [9D050000]-         <1>
   484 00000814 [8B0A0000]          <1>
   485 00000818 [18030000]-         <1>   dd swap, cmove_
   485 0000081C [A0060000]          <1>
   486 00000820 [740D0000]          <1>   dd exit
   487                              <1> 
   488                              <1> ; ------------------------------------------------------------------------
   489                              <1> ; tag counted string a1 onto end of counted string a2
   490                              <1> 
   491                              <1> ; combined length should not be more than 255 bytes.
   492                              <1> ;  this is not checked
   493                              <1> 
   494                              <1> ;     ( a1 n1 a2 --- )
   495                              <1> 
   496                              <1> colon '$+', strplus
   496                              <2>  header %1,%2
   496                              <3> [section headers]
   496 000005E7 [E0050000]          <3>  dd vlink
   496                              <3> %%link:
   496                              <3> %2n:
   496                              <3> %xdefine vlink %%link
   496 000005EB 02                  <3>  db (%%name-$-1)+imm
   496 000005EC 242B                <3>  db %1
   496                              <3> %%name:
   496 000005EE [28080000]          <3>  dd %2
   496                              <3> %xdefine imm 0
   496                              <3> 
   496                              <3> section list
   496 00000824 [EB050000]          <3>  dd %%link
   496                              <2> %2:
   496 00000828 E83B050000          <2>  call nest
   496                              <2> %2_b:
   497 0000082D [21040000]          <1>   dd duptor                 ; remember address of destination string
   498 00000831 [D7050000]-         <1>   dd count, duptor, plus    ; save current length, get address of end
   498 00000835 [21040000]-         <1>
   498 00000839 [070A0000]          <1>
   499 0000083D [B0030000]-         <1>   dd dashrot, tor
   499 00000841 [E1030000]          <1>
   500 00000845 [18030000]-         <1>   dd swap, rfetch, cmove_
   500 00000849 [3B040000]-         <1>
   500 0000084D [A0060000]          <1>
   501 00000851 [10040000]-         <1>   dd rto2, plus
   501 00000855 [070A0000]          <1>
   502 00000859 [01040000]-         <1>   dd rto, cstore, exit
   502 0000085D [9D050000]-         <1>
   502 00000861 [740D0000]          <1>
   503                              <1> 
   504                              <1> ; ========================================================================
   112                                    %include "logic.s"        ; and/or/xor etc
     1                              <1> ; logic.1        - x4 boolean logic etc
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; bool constants
     6                              <1> 
     7                              <1> ;       ( --- f1 )
     8                              <1> 
     9                              <1>   _constant_ 'true', true, -1
     9                              <2>  code %1,%2
     9                              <3>  header %1,%2
     9                              <4> [section headers]
     9 000005F2 [EB050000]          <4>  dd vlink
     9                              <4> %%link:
     9                              <4> %2n:
     9                              <4> %xdefine vlink %%link
     9 000005F6 04                  <4>  db (%%name-$-1)+imm
     9 000005F7 74727565            <4>  db %1
     9                              <4> %%name:
     9 000005FB [69080000]          <4>  dd %2
     9                              <4> %xdefine imm 0
     9                              <4> 
     9                              <4> section list
     9 00000865 [F6050000]          <4>  dd %%link
     9                              <3> %2:
     9 00000869 E841050000          <2>  call doconstant
     9                              <2> %2_b:
     9 0000086E FFFFFFFF            <2>  dd %3
    10                              <1>   _constant_ 'false', false, 0
    10                              <2>  code %1,%2
    10                              <3>  header %1,%2
    10                              <4> [section headers]
    10 000005FF [F6050000]          <4>  dd vlink
    10                              <4> %%link:
    10                              <4> %2n:
    10                              <4> %xdefine vlink %%link
    10 00000603 05                  <4>  db (%%name-$-1)+imm
    10 00000604 66616C7365          <4>  db %1
    10                              <4> %%name:
    10 00000609 [76080000]          <4>  dd %2
    10                              <4> %xdefine imm 0
    10                              <4> 
    10                              <4> section list
    10 00000872 [03060000]          <4>  dd %%link
    10                              <3> %2:
    10 00000876 E834050000          <2>  call doconstant
    10                              <2> %2_b:
    10 0000087B 00000000            <2>  dd %3
    11                              <1> 
    12                              <1> ; ------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;       ( n1 n2 --- n3 )
    15                              <1> 
    16                              <1> code 'and', andd
    16                              <2>  header %1,%2
    16                              <3> [section headers]
    16 0000060D [03060000]          <3>  dd vlink
    16                              <3> %%link:
    16                              <3> %2n:
    16                              <3> %xdefine vlink %%link
    16 00000611 03                  <3>  db (%%name-$-1)+imm
    16 00000612 616E64              <3>  db %1
    16                              <3> %%name:
    16 00000615 [83080000]          <3>  dd %2
    16                              <3> %xdefine imm 0
    16                              <3> 
    16                              <3> section list
    16 0000087F [11060000]          <3>  dd %%link
    16                              <2> %2:
    17 00000883 58                  <1>   pop eax
    18 00000884 21C3                <1>   and ebx, eax
    19                              <1>   next
    19 00000886 E980040000          <2>  jmp _next
    20                              <1> 
    21                              <1> ; ------------------------------------------------------------------------
    22                              <1> 
    23                              <1> ;       ( n1 n2 --- n3)
    24                              <1> 
    25                              <1> code 'or', orr
    25                              <2>  header %1,%2
    25                              <3> [section headers]
    25 00000619 [11060000]          <3>  dd vlink
    25                              <3> %%link:
    25                              <3> %2n:
    25                              <3> %xdefine vlink %%link
    25 0000061D 02                  <3>  db (%%name-$-1)+imm
    25 0000061E 6F72                <3>  db %1
    25                              <3> %%name:
    25 00000620 [8F080000]          <3>  dd %2
    25                              <3> %xdefine imm 0
    25                              <3> 
    25                              <3> section list
    25 0000088B [1D060000]          <3>  dd %%link
    25                              <2> %2:
    26 0000088F 58                  <1>   pop eax
    27 00000890 09C3                <1>   or ebx, eax
    28                              <1>   next
    28 00000892 E974040000          <2>  jmp _next
    29                              <1> 
    30                              <1> ; ------------------------------------------------------------------------
    31                              <1> 
    32                              <1> ;       ( n1 n2 --- n3 )
    33                              <1> 
    34                              <1> code 'xor', xorr
    34                              <2>  header %1,%2
    34                              <3> [section headers]
    34 00000624 [1D060000]          <3>  dd vlink
    34                              <3> %%link:
    34                              <3> %2n:
    34                              <3> %xdefine vlink %%link
    34 00000628 03                  <3>  db (%%name-$-1)+imm
    34 00000629 786F72              <3>  db %1
    34                              <3> %%name:
    34 0000062C [9B080000]          <3>  dd %2
    34                              <3> %xdefine imm 0
    34                              <3> 
    34                              <3> section list
    34 00000897 [28060000]          <3>  dd %%link
    34                              <2> %2:
    35 0000089B 58                  <1>   pop eax
    36 0000089C 31C3                <1>   xor ebx, eax
    37                              <1>   next
    37 0000089E E968040000          <2>  jmp _next
    38                              <1> 
    39                              <1> ; ------------------------------------------------------------------------
    40                              <1> ; 1s compliment top stack item
    41                              <1> 
    42                              <1> ;       ( n1 --- n2 )
    43                              <1> 
    44                              <1> code 'not', nott
    44                              <2>  header %1,%2
    44                              <3> [section headers]
    44 00000630 [28060000]          <3>  dd vlink
    44                              <3> %%link:
    44                              <3> %2n:
    44                              <3> %xdefine vlink %%link
    44 00000634 03                  <3>  db (%%name-$-1)+imm
    44 00000635 6E6F74              <3>  db %1
    44                              <3> %%name:
    44 00000638 [A7080000]          <3>  dd %2
    44                              <3> %xdefine imm 0
    44                              <3> 
    44                              <3> section list
    44 000008A3 [34060000]          <3>  dd %%link
    44                              <2> %2:
    45 000008A7 F7D3                <1>   not ebx
    46                              <1>   next
    46 000008A9 E95D040000          <2>  jmp _next
    47                              <1> 
    48                              <1> ; ------------------------------------------------------------------------
    49                              <1> ; test for equality with zero (THIS IS NOT A NOT OPERATION)
    50                              <1> 
    51                              <1> ;       ( n1 --- f1 )
    52                              <1> 
    53                              <1> code '0=', zequals
    53                              <2>  header %1,%2
    53                              <3> [section headers]
    53 0000063C [34060000]          <3>  dd vlink
    53                              <3> %%link:
    53                              <3> %2n:
    53                              <3> %xdefine vlink %%link
    53 00000640 02                  <3>  db (%%name-$-1)+imm
    53 00000641 303D                <3>  db %1
    53                              <3> %%name:
    53 00000643 [B2080000]          <3>  dd %2
    53                              <3> %xdefine imm 0
    53                              <3> 
    53                              <3> section list
    53 000008AE [40060000]          <3>  dd %%link
    53                              <2> %2:
    54 000008B2 83EB01              <1>   sub ebx, byte 1           ; subtract 1 from n1 (carry if n1 was 0 )
    55 000008B5 19DB                <1>   sbb ebx, ebx              ; subtract n1 from n1 (-1 if ther was a carry)
    56                              <1>   next
    56 000008B7 E94F040000          <2>  jmp _next
    57                              <1> 
    58                              <1> ; ------------------------------------------------------------------------
    59                              <1> 
    60                              <1> ;       ( n1 n2 --- f1 )
    61                              <1> 
    62                              <1> code '=', equals
    62                              <2>  header %1,%2
    62                              <3> [section headers]
    62 00000647 [40060000]          <3>  dd vlink
    62                              <3> %%link:
    62                              <3> %2n:
    62                              <3> %xdefine vlink %%link
    62 0000064B 01                  <3>  db (%%name-$-1)+imm
    62 0000064C 3D                  <3>  db %1
    62                              <3> %%name:
    62 0000064D [C0080000]          <3>  dd %2
    62                              <3> %xdefine imm 0
    62                              <3> 
    62                              <3> section list
    62 000008BC [4B060000]          <3>  dd %%link
    62                              <2> %2:
    63 000008C0 58                  <1>   pop eax
    64 000008C1 29C3                <1>   sub ebx, eax
    65 000008C3 EBED                <1>   jmp zequals
    66                              <1> 
    67                              <1> ;-------------------------------------------------------------------------
    68                              <1> 
    69                              <1> ;       ( n1 ---  f1 )
    70                              <1> 
    71                              <1> code '0<', zless
    71                              <2>  header %1,%2
    71                              <3> [section headers]
    71 00000651 [4B060000]          <3>  dd vlink
    71                              <3> %%link:
    71                              <3> %2n:
    71                              <3> %xdefine vlink %%link
    71 00000655 02                  <3>  db (%%name-$-1)+imm
    71 00000656 303C                <3>  db %1
    71                              <3> %%name:
    71 00000658 [C9080000]          <3>  dd %2
    71                              <3> %xdefine imm 0
    71                              <3> 
    71                              <3> section list
    71 000008C5 [55060000]          <3>  dd %%link
    71                              <2> %2:
    72 000008C9 C1FB1F              <1>   sar ebx, byte 31
    73                              <1>   next
    73 000008CC E93A040000          <2>  jmp _next
    74                              <1> 
    75                              <1> ; ------------------------------------------------------------------------
    76                              <1> ; see if n1 is greater than 0
    77                              <1> 
    78                              <1> ;       ( n1 --- f1 )
    79                              <1> 
    80                              <1> code '0>', zgreater
    80                              <2>  header %1,%2
    80                              <3> [section headers]
    80 0000065C [55060000]          <3>  dd vlink
    80                              <3> %%link:
    80                              <3> %2n:
    80                              <3> %xdefine vlink %%link
    80 00000660 02                  <3>  db (%%name-$-1)+imm
    80 00000661 303E                <3>  db %1
    80                              <3> %%name:
    80 00000663 [D5080000]          <3>  dd %2
    80                              <3> %xdefine imm 0
    80                              <3> 
    80                              <3> section list
    80 000008D1 [60060000]          <3>  dd %%link
    80                              <2> %2:
    81 000008D5 F7DB                <1>   neg ebx                   ; negate n1
    82 000008D7 EBF0                <1>   jmp short zless           ; and get sign
    83                              <1> 
    84                              <1> ; ------------------------------------------------------------------------
    85                              <1> ; return true if n1 is posative
    86                              <1> 
    87                              <1> ;       ( n1 --- f1 )
    88                              <1> 
    89                              <1> code '0<>', znotequals
    89                              <2>  header %1,%2
    89                              <3> [section headers]
    89 00000667 [60060000]          <3>  dd vlink
    89                              <3> %%link:
    89                              <3> %2n:
    89                              <3> %xdefine vlink %%link
    89 0000066B 03                  <3>  db (%%name-$-1)+imm
    89 0000066C 303C3E              <3>  db %1
    89                              <3> %%name:
    89 0000066F [DD080000]          <3>  dd %2
    89                              <3> %xdefine imm 0
    89                              <3> 
    89                              <3> section list
    89 000008D9 [6B060000]          <3>  dd %%link
    89                              <2> %2:
    90 000008DD F7DB                <1>   neg ebx                   ; erm this confuses me a little
    91 000008DF 19DB                <1>   sbb ebx, ebx              ; did the above do something with overflow ?
    92                              <1>   next
    92 000008E1 E925040000          <2>  jmp _next
    93                              <1> 
    94                              <1> ; ------------------------------------------------------------------------
    95                              <1> ; see if n1 is unequal to n2
    96                              <1> 
    97                              <1> ;       ( n1 n2 --- f1 )
    98                              <1> 
    99                              <1> code '<>', notequals
    99                              <2>  header %1,%2
    99                              <3> [section headers]
    99 00000673 [6B060000]          <3>  dd vlink
    99                              <3> %%link:
    99                              <3> %2n:
    99                              <3> %xdefine vlink %%link
    99 00000677 02                  <3>  db (%%name-$-1)+imm
    99 00000678 3C3E                <3>  db %1
    99                              <3> %%name:
    99 0000067A [EA080000]          <3>  dd %2
    99                              <3> %xdefine imm 0
    99                              <3> 
    99                              <3> section list
    99 000008E6 [77060000]          <3>  dd %%link
    99                              <2> %2:
   100 000008EA 58                  <1>   pop eax                   ; get n1 and n2
   101 000008EB 29C3                <1>   sub ebx, eax              ; get difference
   102 000008ED F7DB                <1>   neg ebx                   ; convert to a true or false
   103 000008EF 19DB                <1>   sbb ebx, ebx
   104                              <1>   next
   104 000008F1 E915040000          <2>  jmp _next
   105                              <1> 
   106                              <1> ; ------------------------------------------------------------------------
   107                              <1> ; see if unsigned n2 is less than unsigned n1
   108                              <1> 
   109                              <1> ;       ( n1 n2 --- f1 )
   110                              <1> 
   111                              <1> code 'u<', uless
   111                              <2>  header %1,%2
   111                              <3> [section headers]
   111 0000067E [77060000]          <3>  dd vlink
   111                              <3> %%link:
   111                              <3> %2n:
   111                              <3> %xdefine vlink %%link
   111 00000682 02                  <3>  db (%%name-$-1)+imm
   111 00000683 753C                <3>  db %1
   111                              <3> %%name:
   111 00000685 [FA080000]          <3>  dd %2
   111                              <3> %xdefine imm 0
   111                              <3> 
   111                              <3> section list
   111 000008F6 [82060000]          <3>  dd %%link
   111                              <2> %2:
   112 000008FA 58                  <1>   pop eax                   ; get n1
   113                              <1> .L0:
   114 000008FB 29D8                <1>   sub eax, ebx              ; get difference
   115 000008FD 19C0                <1>   sbb eax, eax              ; return true if n2 < n1
   116 000008FF 89C3                <1>   mov ebx, eax
   117                              <1>   next
   117 00000901 E905040000          <2>  jmp _next
   118                              <1> 
   119                              <1> ; ------------------------------------------------------------------------
   120                              <1> ; see if unsigned n2 is greater than unsigned n1
   121                              <1> 
   122                              <1> ;       ( n1 n2 --- f1 )
   123                              <1> 
   124                              <1> code 'u>', ugreater
   124                              <2>  header %1,%2
   124                              <3> [section headers]
   124 00000689 [82060000]          <3>  dd vlink
   124                              <3> %%link:
   124                              <3> %2n:
   124                              <3> %xdefine vlink %%link
   124 0000068D 02                  <3>  db (%%name-$-1)+imm
   124 0000068E 753E                <3>  db %1
   124                              <3> %%name:
   124 00000690 [0A090000]          <3>  dd %2
   124                              <3> %xdefine imm 0
   124                              <3> 
   124                              <3> section list
   124 00000906 [8D060000]          <3>  dd %%link
   124                              <2> %2:
   125 0000090A 58                  <1>   pop eax                   ; get n2 and n1 in oposite order from above
   126 0000090B 93                  <1>   xchg eax, ebx
   127 0000090C EBED                <1>   jmp uless.L0              ; use above code !!!
   128                              <1> 
   129                              <1> ; ------------------------------------------------------------------------
   130                              <1> ; see if n2 is less than n1
   131                              <1> 
   132                              <1> ;       ( n1 n2 --- f1 )
   133                              <1> 
   134                              <1> code '<', less
   134                              <2>  header %1,%2
   134                              <3> [section headers]
   134 00000694 [8D060000]          <3>  dd vlink
   134                              <3> %%link:
   134                              <3> %2n:
   134                              <3> %xdefine vlink %%link
   134 00000698 01                  <3>  db (%%name-$-1)+imm
   134 00000699 3C                  <3>  db %1
   134                              <3> %%name:
   134 0000069A [12090000]          <3>  dd %2
   134                              <3> %xdefine imm 0
   134                              <3> 
   134                              <3> section list
   134 0000090E [98060000]          <3>  dd %%link
   134                              <2> %2:
   135 00000912 58                  <1>   pop eax                   ; get n1
   136 00000913 39D8                <1>   cmp eax, ebx              ; is n1 less than n2 ?
   137 00000915 BBFFFFFFFF          <1>   mov ebx, -1
   138 0000091A 7C02                <1>   jl .L1
   139 0000091C 31DB                <1>   xor ebx, ebx              ; no
   140                              <1> .L1:
   141                              <1>   next
   141 0000091E E9E8030000          <2>  jmp _next
   142                              <1> 
   143                              <1> ; ------------------------------------------------------------------------
   144                              <1> ; see if n2 is greater than n1
   145                              <1> 
   146                              <1> ;       ( n1 n2 --- f1 )
   147                              <1> 
   148                              <1> code '>', greater
   148                              <2>  header %1,%2
   148                              <3> [section headers]
   148 0000069E [98060000]          <3>  dd vlink
   148                              <3> %%link:
   148                              <3> %2n:
   148                              <3> %xdefine vlink %%link
   148 000006A2 01                  <3>  db (%%name-$-1)+imm
   148 000006A3 3E                  <3>  db %1
   148                              <3> %%name:
   148 000006A4 [27090000]          <3>  dd %2
   148                              <3> %xdefine imm 0
   148                              <3> 
   148                              <3> section list
   148 00000923 [A2060000]          <3>  dd %%link
   148                              <2> %2:
   149 00000927 58                  <1>   pop eax
   150 00000928 39D8                <1>   cmp eax, ebx
   151 0000092A BBFFFFFFFF          <1>   mov ebx, -1
   152 0000092F 7F02                <1>   jg .L1
   153 00000931 31DB                <1>   xor ebx, ebx
   154                              <1> .L1:
   155                              <1>   next
   155 00000933 E9D3030000          <2>  jmp _next
   156                              <1> 
   157                              <1> ; ------------------------------------------------------------------------
   158                              <1> ; return the smallest of 2 unsigned values
   159                              <1> 
   160                              <1> ;       ( n1 n2 --- n1 | n2 )
   161                              <1> 
   162                              <1> code 'umin', umin
   162                              <2>  header %1,%2
   162                              <3> [section headers]
   162 000006A8 [A2060000]          <3>  dd vlink
   162                              <3> %%link:
   162                              <3> %2n:
   162                              <3> %xdefine vlink %%link
   162 000006AC 04                  <3>  db (%%name-$-1)+imm
   162 000006AD 756D696E            <3>  db %1
   162                              <3> %%name:
   162 000006B1 [3C090000]          <3>  dd %2
   162                              <3> %xdefine imm 0
   162                              <3> 
   162                              <3> section list
   162 00000938 [AC060000]          <3>  dd %%link
   162                              <2> %2:
   163 0000093C 58                  <1>   pop eax
   164 0000093D 39D8                <1>   cmp eax, ebx
   165 0000093F 7702                <1>   ja .L0
   166 00000941 89C3                <1>   mov ebx, eax
   167                              <1> .L0:
   168                              <1>   next
   168 00000943 E9C3030000          <2>  jmp _next
   169                              <1> 
   170                              <1> ; ------------------------------------------------------------------------
   171                              <1> ; return the smallest of 2 signed values
   172                              <1> 
   173                              <1> ;       ( n1 n2 --- n1 | n2 )
   174                              <1> 
   175                              <1> code 'min', min
   175                              <2>  header %1,%2
   175                              <3> [section headers]
   175 000006B5 [AC060000]          <3>  dd vlink
   175                              <3> %%link:
   175                              <3> %2n:
   175                              <3> %xdefine vlink %%link
   175 000006B9 03                  <3>  db (%%name-$-1)+imm
   175 000006BA 6D696E              <3>  db %1
   175                              <3> %%name:
   175 000006BD [4C090000]          <3>  dd %2
   175                              <3> %xdefine imm 0
   175                              <3> 
   175                              <3> section list
   175 00000948 [B9060000]          <3>  dd %%link
   175                              <2> %2:
   176 0000094C 58                  <1>   pop eax                   ; get n1 and n2
   177 0000094D 39D8                <1>   cmp eax, ebx              ; which is smaller
   178 0000094F 7F02                <1>   jg .L1                    ; n2 is smaller
   179 00000951 89C3                <1>   mov ebx, eax              ; n1 is smaller
   180                              <1> .L1:
   181                              <1>   next
   181 00000953 E9B3030000          <2>  jmp _next
   182                              <1> 
   183                              <1> ; ------------------------------------------------------------------------
   184                              <1> ; return the larger of 2 unsigned values
   185                              <1> 
   186                              <1> ;       ( n1 n2 --- n1 | n2 )
   187                              <1> 
   188                              <1> code 'umax', umax
   188                              <2>  header %1,%2
   188                              <3> [section headers]
   188 000006C1 [B9060000]          <3>  dd vlink
   188                              <3> %%link:
   188                              <3> %2n:
   188                              <3> %xdefine vlink %%link
   188 000006C5 04                  <3>  db (%%name-$-1)+imm
   188 000006C6 756D6178            <3>  db %1
   188                              <3> %%name:
   188 000006CA [5C090000]          <3>  dd %2
   188                              <3> %xdefine imm 0
   188                              <3> 
   188                              <3> section list
   188 00000958 [C5060000]          <3>  dd %%link
   188                              <2> %2:
   189 0000095C 58                  <1>   pop eax
   190 0000095D 39D8                <1>   cmp eax, ebx
   191 0000095F 7602                <1>   jna .L1
   192 00000961 89C3                <1>   mov ebx, eax
   193                              <1> .L1:
   194                              <1>   next
   194 00000963 E9A3030000          <2>  jmp _next
   195                              <1> 
   196                              <1> ; ------------------------------------------------------------------------
   197                              <1> ; return the larger of two signed values
   198                              <1> 
   199                              <1> ;       ( n1 n2 --- n1 | n2 )
   200                              <1> 
   201                              <1> code 'max', max
   201                              <2>  header %1,%2
   201                              <3> [section headers]
   201 000006CE [C5060000]          <3>  dd vlink
   201                              <3> %%link:
   201                              <3> %2n:
   201                              <3> %xdefine vlink %%link
   201 000006D2 03                  <3>  db (%%name-$-1)+imm
   201 000006D3 6D6178              <3>  db %1
   201                              <3> %%name:
   201 000006D6 [6C090000]          <3>  dd %2
   201                              <3> %xdefine imm 0
   201                              <3> 
   201                              <3> section list
   201 00000968 [D2060000]          <3>  dd %%link
   201                              <2> %2:
   202 0000096C 58                  <1>   pop eax
   203 0000096D 39D8                <1>   cmp eax, ebx
   204 0000096F 7C02                <1>   jl .L1
   205 00000971 89C3                <1>   mov ebx, eax
   206                              <1> .L1:
   207                              <1>   next
   207 00000973 E993030000          <2>  jmp _next
   208                              <1> 
   209                              <1> ; ------------------------------------------------------------------------
   210                              <1> ; return n1 or zero if n1 is negative
   211                              <1> 
   212                              <1> ;       ( n1 --- n1 | 0 )
   213                              <1> 
   214                              <1> code '0max', zmax
   214                              <2>  header %1,%2
   214                              <3> [section headers]
   214 000006DA [D2060000]          <3>  dd vlink
   214                              <3> %%link:
   214                              <3> %2n:
   214                              <3> %xdefine vlink %%link
   214 000006DE 04                  <3>  db (%%name-$-1)+imm
   214 000006DF 306D6178            <3>  db %1
   214                              <3> %%name:
   214 000006E3 [7C090000]          <3>  dd %2
   214                              <3> %xdefine imm 0
   214                              <3> 
   214                              <3> section list
   214 00000978 [DE060000]          <3>  dd %%link
   214                              <2> %2:
   215 0000097C 31C0                <1>   xor eax, eax
   216 0000097E 39C3                <1>   cmp ebx, eax              ;is n1 > 0 ?
   217 00000980 7F02                <1>   jg .L1
   218 00000982 89C3                <1>   mov ebx, eax
   219                              <1> .L1:
   220                              <1>   next
   220 00000984 E982030000          <2>  jmp _next
   221                              <1> 
   222                              <1> ; ------------------------------------------------------------------------
   223                              <1> ; see if n1 is within upper and lower limits (not inclusive)
   224                              <1> 
   225                              <1> ;       ( n1 n2 n3 --- f1 )
   226                              <1> 
   227                              <1> code 'within', within
   227                              <2>  header %1,%2
   227                              <3> [section headers]
   227 000006E7 [DE060000]          <3>  dd vlink
   227                              <3> %%link:
   227                              <3> %2n:
   227                              <3> %xdefine vlink %%link
   227 000006EB 06                  <3>  db (%%name-$-1)+imm
   227 000006EC 77697468696E        <3>  db %1
   227                              <3> %%name:
   227 000006F2 [8D090000]          <3>  dd %2
   227                              <3> %xdefine imm 0
   227                              <3> 
   227                              <3> section list
   227 00000989 [EB060000]          <3>  dd %%link
   227                              <2> %2:
   228 0000098D 89D8                <1>   mov eax, ebx              ; get upper limit
   229 0000098F 59                  <1>   pop ecx                   ; get lower limit
   230 00000990 5A                  <1>   pop edx                   ; get n1
   231 00000991 31DB                <1>   xor ebx, ebx              ; assume false
   232 00000993 39C2                <1>   cmp edx, eax              ; is n1 below upper limit?
   233 00000995 7D05                <1>   jge .L0
   234 00000997 39CA                <1>   cmp edx, ecx              ; is n1 above lower limit?
   235 00000999 7C01                <1>   jl .L0
   236 0000099B 4B                  <1>   dec ebx                   ; yes we are in limits
   237                              <1> .L0:
   238                              <1>   next
   238 0000099C E96A030000          <2>  jmp _next
   239                              <1> 
   240                              <1> ; ------------------------------------------------------------------------
   241                              <1> ; see if n1 is between upper and lower limits inclusive
   242                              <1> 
   243                              <1> ;       ( n1 n2 n3 --- f1 )
   244                              <1> 
   245                              <1> code 'between', between
   245                              <2>  header %1,%2
   245                              <3> [section headers]
   245 000006F6 [EB060000]          <3>  dd vlink
   245                              <3> %%link:
   245                              <3> %2n:
   245                              <3> %xdefine vlink %%link
   245 000006FA 07                  <3>  db (%%name-$-1)+imm
   245 000006FB 6265747765656E      <3>  db %1
   245                              <3> %%name:
   245 00000702 [A5090000]          <3>  dd %2
   245                              <3> %xdefine imm 0
   245                              <3> 
   245                              <3> section list
   245 000009A1 [FA060000]          <3>  dd %%link
   245                              <2> %2:
   246 000009A5 89D8                <1>   mov eax, ebx              ; get upper limit
   247 000009A7 59                  <1>   pop ecx                   ; get lower limit
   248 000009A8 5A                  <1>   pop edx                   ; get n1
   249 000009A9 31DB                <1>   xor ebx, ebx              ; assume false
   250 000009AB 39C2                <1>   cmp edx, eax              ; is n1 less that or equal to uper limit?
   251 000009AD 7F05                <1>   jg .L0
   252 000009AF 39CA                <1>   cmp edx, ecx              ; is n1 greater than or equal to lower limit?
   253 000009B1 7C01                <1>   jl .L0
   254 000009B3 4B                  <1>   dec ebx                   ; we are within limits, eax = true
   255                              <1> .L0:
   256                              <1>   next
   256 000009B4 E952030000          <2>  jmp _next
   257                              <1> 
   258                              <1> ; ------------------------------------------------------------------------
   259                              <1> ; return true if n1 equals either n2 or n3
   260                              <1> 
   261                              <1> colon 'either', either
   261                              <2>  header %1,%2
   261                              <3> [section headers]
   261 00000706 [FA060000]          <3>  dd vlink
   261                              <3> %%link:
   261                              <3> %2n:
   261                              <3> %xdefine vlink %%link
   261 0000070A 06                  <3>  db (%%name-$-1)+imm
   261 0000070B 656974686572        <3>  db %1
   261                              <3> %%name:
   261 00000711 [BD090000]          <3>  dd %2
   261                              <3> %xdefine imm 0
   261                              <3> 
   261                              <3> section list
   261 000009B9 [0A070000]          <3>  dd %%link
   261                              <2> %2:
   261 000009BD E8A6030000          <2>  call nest
   261                              <2> %2_b:
   262 000009C2 [B0030000]-         <1>   dd dashrot, over, equals
   262 000009C6 [60030000]-         <1>
   262 000009CA [C0080000]          <1>
   263 000009CE [B0030000]-         <1>   dd dashrot, equals, orr
   263 000009D2 [C0080000]-         <1>
   263 000009D6 [8F080000]          <1>
   264 000009DA [740D0000]          <1>   dd exit
   265                              <1> 
   266                              <1> ; ------------------------------------------------------------------------
   267                              <1> ; return true if n1 is not equal to eithe n2 or n3
   268                              <1> 
   269                              <1> ;       ( n1 n2 n3 --- f1 )
   270                              <1> 
   271                              <1> colon 'neither', neither
   271                              <2>  header %1,%2
   271                              <3> [section headers]
   271 00000715 [0A070000]          <3>  dd vlink
   271                              <3> %%link:
   271                              <3> %2n:
   271                              <3> %xdefine vlink %%link
   271 00000719 07                  <3>  db (%%name-$-1)+imm
   271 0000071A 6E656974686572      <3>  db %1
   271                              <3> %%name:
   271 00000721 [E2090000]          <3>  dd %2
   271                              <3> %xdefine imm 0
   271                              <3> 
   271                              <3> section list
   271 000009DE [19070000]          <3>  dd %%link
   271                              <2> %2:
   271 000009E2 E881030000          <2>  call nest
   271                              <2> %2_b:
   272 000009E7 [B0030000]-         <1>   dd dashrot, over, notequals
   272 000009EB [60030000]-         <1>
   272 000009EF [EA080000]          <1>
   273 000009F3 [B0030000]-         <1>   dd dashrot, notequals, andd
   273 000009F7 [EA080000]-         <1>
   273 000009FB [83080000]          <1>
   274 000009FF [740D0000]          <1>   dd exit
   275                              <1> 
   276                              <1> ;=========================================================================
   113                                    %include "math.s"         ; basic math functions +/-* etc
     1                              <1> ; math.1         - x4 basic math words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; add top two items on parameter stack
     6                              <1> 
     7                              <1> ;       ( n1 n2 --- n3 )
     8                              <1> 
     9                              <1> code '+', plus
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 00000725 [19070000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 00000729 01                  <3>  db (%%name-$-1)+imm
     9 0000072A 2B                  <3>  db %1
     9                              <3> %%name:
     9 0000072B [070A0000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 00000A03 [29070000]          <3>  dd %%link
     9                              <2> %2:
    10 00000A07 58                  <1>   pop eax                    ; get n2
    11 00000A08 01C3                <1>   add ebx, eax               ; add it to n1
    12                              <1>   next
    12 00000A0A E9FC020000          <2>  jmp _next
    13                              <1> 
    14                              <1> ; ------------------------------------------------------------------------
    15                              <1> ; subtract top item from second item
    16                              <1> 
    17                              <1> ;       ( n1 n2 --- n3 )
    18                              <1> 
    19                              <1> code '-', minus
    19                              <2>  header %1,%2
    19                              <3> [section headers]
    19 0000072F [29070000]          <3>  dd vlink
    19                              <3> %%link:
    19                              <3> %2n:
    19                              <3> %xdefine vlink %%link
    19 00000733 01                  <3>  db (%%name-$-1)+imm
    19 00000734 2D                  <3>  db %1
    19                              <3> %%name:
    19 00000735 [130A0000]          <3>  dd %2
    19                              <3> %xdefine imm 0
    19                              <3> 
    19                              <3> section list
    19 00000A0F [33070000]          <3>  dd %%link
    19                              <2> %2:
    20 00000A13 291C24              <1>   sub [esp], ebx             ; thanks to rikusw for suggesting this def
    21 00000A16 5B                  <1>   pop ebx
    22                              <1>   next
    22 00000A17 E9EF020000          <2>  jmp _next
    23                              <1> 
    24                              <1> ; ------------------------------------------------------------------------
    25                              <1> ; compute absolute value of top item of parameter stack
    26                              <1> 
    27                              <1> ;       ( n1 --- n1 | +n1 )
    28                              <1> 
    29                              <1> code 'abs', abs_
    29                              <2>  header %1,%2
    29                              <3> [section headers]
    29 00000739 [33070000]          <3>  dd vlink
    29                              <3> %%link:
    29                              <3> %2n:
    29                              <3> %xdefine vlink %%link
    29 0000073D 03                  <3>  db (%%name-$-1)+imm
    29 0000073E 616273              <3>  db %1
    29                              <3> %%name:
    29 00000741 [200A0000]          <3>  dd %2
    29                              <3> %xdefine imm 0
    29                              <3> 
    29                              <3> section list
    29 00000A1C [3D070000]          <3>  dd %%link
    29                              <2> %2:
    30 00000A20 89D8                <1>   mov eax, ebx               ; set ebx = sign of n1
    31 00000A22 C1F81F              <1>   sar eax, byte 31           ; propogate sign bit if n1 throughout ebx
    32 00000A25 31C3                <1>   xor ebx, eax               ; will invert n1 if n1 was negative
    33 00000A27 29C3                <1>   sub ebx, eax               ; will subtract -1 if n1 was negative
    34                              <1>   next                       ;  i.e. it will add 1
    34 00000A29 E9DD020000          <2>  jmp _next
    35                              <1> 
    36                              <1> ; ------------------------------------------------------------------------
    37                              <1> ; shift left n1 by n2 bits
    38                              <1> 
    39                              <1> ;       ( n1 n2 --- n3 )
    40                              <1> 
    41                              <1> code '<<', shll
    41                              <2>  header %1,%2
    41                              <3> [section headers]
    41 00000745 [3D070000]          <3>  dd vlink
    41                              <3> %%link:
    41                              <3> %2n:
    41                              <3> %xdefine vlink %%link
    41 00000749 02                  <3>  db (%%name-$-1)+imm
    41 0000074A 3C3C                <3>  db %1
    41                              <3> %%name:
    41 0000074C [320A0000]          <3>  dd %2
    41                              <3> %xdefine imm 0
    41                              <3> 
    41                              <3> section list
    41 00000A2E [49070000]          <3>  dd %%link
    41                              <2> %2:
    42 00000A32 59                  <1>   pop ecx                    ; get number to be shifted
    43 00000A33 87D9                <1>   xchg ebx, ecx              ; get n1 in ebx n2 in ecx
    44 00000A35 D3E3                <1>   sal ebx, cl
    45                              <1>   next
    45 00000A37 E9CF020000          <2>  jmp _next
    46                              <1> 
    47                              <1> ; ------------------------------------------------------------------------
    48                              <1> ; signed shift right n1 by n2 bits
    49                              <1> 
    50                              <1> ;       ( n1 n2 --- n3 )
    51                              <1> 
    52                              <1> code '>>', shrr
    52                              <2>  header %1,%2
    52                              <3> [section headers]
    52 00000750 [49070000]          <3>  dd vlink
    52                              <3> %%link:
    52                              <3> %2n:
    52                              <3> %xdefine vlink %%link
    52 00000754 02                  <3>  db (%%name-$-1)+imm
    52 00000755 3E3E                <3>  db %1
    52                              <3> %%name:
    52 00000757 [400A0000]          <3>  dd %2
    52                              <3> %xdefine imm 0
    52                              <3> 
    52                              <3> section list
    52 00000A3C [54070000]          <3>  dd %%link
    52                              <2> %2:
    53 00000A40 59                  <1>   pop ecx
    54 00000A41 87D9                <1>   xchg ebx, ecx
    55 00000A43 D3FB                <1>   sar ebx, cl
    56                              <1>   next
    56 00000A45 E9C1020000          <2>  jmp _next
    57                              <1> 
    58                              <1> ; ------------------------------------------------------------------------
    59                              <1> ; unsigned shift right n1 by n2 bits
    60                              <1> 
    61                              <1> ;       ( n1 n2 --- n3 )
    62                              <1> 
    63                              <1> code 'u>>', ushr
    63                              <2>  header %1,%2
    63                              <3> [section headers]
    63 0000075B [54070000]          <3>  dd vlink
    63                              <3> %%link:
    63                              <3> %2n:
    63                              <3> %xdefine vlink %%link
    63 0000075F 03                  <3>  db (%%name-$-1)+imm
    63 00000760 753E3E              <3>  db %1
    63                              <3> %%name:
    63 00000763 [4E0A0000]          <3>  dd %2
    63                              <3> %xdefine imm 0
    63                              <3> 
    63                              <3> section list
    63 00000A4A [5F070000]          <3>  dd %%link
    63                              <2> %2:
    64 00000A4E 59                  <1>   pop ecx                    ; get number to be shifted
    65 00000A4F 87D9                <1>   xchg ebx, ecx              ; get n1 in ebx and n2 in ecx
    66 00000A51 D3EB                <1>   shr ebx, cl
    67                              <1>   next
    67 00000A53 E9B3020000          <2>  jmp _next
    68                              <1> 
    69                              <1> ; ------------------------------------------------------------------------
    70                              <1> ; multiply top item of parameter stack by 2
    71                              <1> 
    72                              <1> ;       ( n1 --- n2 )
    73                              <1> 
    74                              <1> code '2*', twostar
    74                              <2>  header %1,%2
    74                              <3> [section headers]
    74 00000767 [5F070000]          <3>  dd vlink
    74                              <3> %%link:
    74                              <3> %2n:
    74                              <3> %xdefine vlink %%link
    74 0000076B 02                  <3>  db (%%name-$-1)+imm
    74 0000076C 322A                <3>  db %1
    74                              <3> %%name:
    74 0000076E [5C0A0000]          <3>  dd %2
    74                              <3> %xdefine imm 0
    74                              <3> 
    74                              <3> section list
    74 00000A58 [6B070000]          <3>  dd %%link
    74                              <2> %2:
    75 00000A5C 01DB                <1>   add ebx, ebx
    76                              <1>   next
    76 00000A5E E9A8020000          <2>  jmp _next
    77                              <1> 
    78                              <1> ; ------------------------------------------------------------------------
    79                              <1> ; divide top item of parameter stack by 2
    80                              <1> 
    81                              <1> ;       ( n1 --- n2 )
    82                              <1> 
    83                              <1> code '2/', twoslash
    83                              <2>  header %1,%2
    83                              <3> [section headers]
    83 00000772 [6B070000]          <3>  dd vlink
    83                              <3> %%link:
    83                              <3> %2n:
    83                              <3> %xdefine vlink %%link
    83 00000776 02                  <3>  db (%%name-$-1)+imm
    83 00000777 322F                <3>  db %1
    83                              <3> %%name:
    83 00000779 [670A0000]          <3>  dd %2
    83                              <3> %xdefine imm 0
    83                              <3> 
    83                              <3> section list
    83 00000A63 [76070000]          <3>  dd %%link
    83                              <2> %2:
    84 00000A67 C1FB01              <1>   sar ebx, byte 1            ; divide by 2
    85                              <1>   next
    85 00000A6A E99C020000          <2>  jmp _next
    86                              <1> 
    87                              <1> ; ------------------------------------------------------------------------
    88                              <1> ; divide unsigned number at top of parameter stack by 2
    89                              <1> 
    90                              <1> ;       ( n1 --- n2 )
    91                              <1> 
    92                              <1> code 'u2/', u2slash
    92                              <2>  header %1,%2
    92                              <3> [section headers]
    92 0000077D [76070000]          <3>  dd vlink
    92                              <3> %%link:
    92                              <3> %2n:
    92                              <3> %xdefine vlink %%link
    92 00000781 03                  <3>  db (%%name-$-1)+imm
    92 00000782 75322F              <3>  db %1
    92                              <3> %%name:
    92 00000785 [730A0000]          <3>  dd %2
    92                              <3> %xdefine imm 0
    92                              <3> 
    92                              <3> section list
    92 00000A6F [81070000]          <3>  dd %%link
    92                              <2> %2:
    93 00000A73 C1EB01              <1>   shr ebx, byte 1            ; divide it by 2 (unsigned)
    94                              <1>   next
    94 00000A76 E990020000          <2>  jmp _next
    95                              <1> 
    96                              <1> ; ------------------------------------------------------------------------
    97                              <1> ; multiply top item of parameter stack by 4
    98                              <1> 
    99                              <1> ;       ( n1 --- n2 )
   100                              <1> 
   101                              <1> code '4*', star4
   101                              <2>  header %1,%2
   101                              <3> [section headers]
   101 00000789 [81070000]          <3>  dd vlink
   101                              <3> %%link:
   101                              <3> %2n:
   101                              <3> %xdefine vlink %%link
   101 0000078D 02                  <3>  db (%%name-$-1)+imm
   101 0000078E 342A                <3>  db %1
   101                              <3> %%name:
   101 00000790 [7F0A0000]          <3>  dd %2
   101                              <3> %xdefine imm 0
   101                              <3> 
   101                              <3> section list
   101 00000A7B [8D070000]          <3>  dd %%link
   101                              <2> %2:
   102 00000A7F C1E302              <1>   shl ebx, byte 2
   103                              <1>   next
   103 00000A82 E984020000          <2>  jmp _next
   104                              <1> 
   105                              <1> ; ------------------------------------------------------------------------
   106                              <1> ; add 1 to top item of parameter stack
   107                              <1> 
   108                              <1> ;       ( n1 --- n2 )
   109                              <1> 
   110                              <1> code '1+', oneplus
   110                              <2>  header %1,%2
   110                              <3> [section headers]
   110 00000794 [8D070000]          <3>  dd vlink
   110                              <3> %%link:
   110                              <3> %2n:
   110                              <3> %xdefine vlink %%link
   110 00000798 02                  <3>  db (%%name-$-1)+imm
   110 00000799 312B                <3>  db %1
   110                              <3> %%name:
   110 0000079B [8B0A0000]          <3>  dd %2
   110                              <3> %xdefine imm 0
   110                              <3> 
   110                              <3> section list
   110 00000A87 [98070000]          <3>  dd %%link
   110                              <2> %2:
   111 00000A8B 43                  <1>   inc ebx
   112                              <1>   next
   112 00000A8C E97A020000          <2>  jmp _next
   113                              <1> 
   114                              <1> ; ------------------------------------------------------------------------
   115                              <1> ; decrement top item of parameter stack
   116                              <1> 
   117                              <1> ;       ( n1 --- n2 )
   118                              <1> 
   119                              <1> code '1-', oneminus
   119                              <2>  header %1,%2
   119                              <3> [section headers]
   119 0000079F [98070000]          <3>  dd vlink
   119                              <3> %%link:
   119                              <3> %2n:
   119                              <3> %xdefine vlink %%link
   119 000007A3 02                  <3>  db (%%name-$-1)+imm
   119 000007A4 312D                <3>  db %1
   119                              <3> %%name:
   119 000007A6 [950A0000]          <3>  dd %2
   119                              <3> %xdefine imm 0
   119                              <3> 
   119                              <3> section list
   119 00000A91 [A3070000]          <3>  dd %%link
   119                              <2> %2:
   120 00000A95 4B                  <1>   dec ebx
   121                              <1>   next
   121 00000A96 E970020000          <2>  jmp _next
   122                              <1> 
   123                              <1> ; ------------------------------------------------------------------------
   124                              <1> ; add 2 to top item of parameter stack
   125                              <1> 
   126                              <1> ;       ( n1 --- n2 )
   127                              <1> 
   128                              <1> code '2+', twoplus
   128                              <2>  header %1,%2
   128                              <3> [section headers]
   128 000007AA [A3070000]          <3>  dd vlink
   128                              <3> %%link:
   128                              <3> %2n:
   128                              <3> %xdefine vlink %%link
   128 000007AE 02                  <3>  db (%%name-$-1)+imm
   128 000007AF 322B                <3>  db %1
   128                              <3> %%name:
   128 000007B1 [9F0A0000]          <3>  dd %2
   128                              <3> %xdefine imm 0
   128                              <3> 
   128                              <3> section list
   128 00000A9B [AE070000]          <3>  dd %%link
   128                              <2> %2:
   129 00000A9F 83C302              <1>   add ebx, byte 2
   130                              <1>   next
   130 00000AA2 E964020000          <2>  jmp _next
   131                              <1> 
   132                              <1> ; ------------------------------------------------------------------------
   133                              <1> ; subtract 2 from top item of parameter stacl
   134                              <1> 
   135                              <1> ;       ( n1 --- n2 )
   136                              <1> 
   137                              <1> code '2-', twominus
   137                              <2>  header %1,%2
   137                              <3> [section headers]
   137 000007B5 [AE070000]          <3>  dd vlink
   137                              <3> %%link:
   137                              <3> %2n:
   137                              <3> %xdefine vlink %%link
   137 000007B9 02                  <3>  db (%%name-$-1)+imm
   137 000007BA 322D                <3>  db %1
   137                              <3> %%name:
   137 000007BC [AB0A0000]          <3>  dd %2
   137                              <3> %xdefine imm 0
   137                              <3> 
   137                              <3> section list
   137 00000AA7 [B9070000]          <3>  dd %%link
   137                              <2> %2:
   138 00000AAB 83EB02              <1>   sub ebx, byte 2
   139                              <1>   next
   139 00000AAE E958020000          <2>  jmp _next
   140                              <1> 
   141                              <1> ; ------------------------------------------------------------------------
   142                              <1> 
   143                              <1> ;       ( n1 --- n2 )
   144                              <1> 
   145                              <1> code '4+', plus4
   145                              <2>  header %1,%2
   145                              <3> [section headers]
   145 000007C0 [B9070000]          <3>  dd vlink
   145                              <3> %%link:
   145                              <3> %2n:
   145                              <3> %xdefine vlink %%link
   145 000007C4 02                  <3>  db (%%name-$-1)+imm
   145 000007C5 342B                <3>  db %1
   145                              <3> %%name:
   145 000007C7 [B70A0000]          <3>  dd %2
   145                              <3> %xdefine imm 0
   145                              <3> 
   145                              <3> section list
   145 00000AB3 [C4070000]          <3>  dd %%link
   145                              <2> %2:
   146 00000AB7 83C304              <1>   add ebx, byte 4
   147                              <1>   next
   147 00000ABA E94C020000          <2>  jmp _next
   148                              <1> 
   149                              <1> ; ------------------------------------------------------------------------
   150                              <1> 
   151                              <1> ;       ( n1 --- n2 )
   152                              <1> 
   153                              <1> code '4-', minus4
   153                              <2>  header %1,%2
   153                              <3> [section headers]
   153 000007CB [C4070000]          <3>  dd vlink
   153                              <3> %%link:
   153                              <3> %2n:
   153                              <3> %xdefine vlink %%link
   153 000007CF 02                  <3>  db (%%name-$-1)+imm
   153 000007D0 342D                <3>  db %1
   153                              <3> %%name:
   153 000007D2 [C30A0000]          <3>  dd %2
   153                              <3> %xdefine imm 0
   153                              <3> 
   153                              <3> section list
   153 00000ABF [CF070000]          <3>  dd %%link
   153                              <2> %2:
   154 00000AC3 83EB04              <1>   sub ebx, byte 4
   155                              <1>   next
   155 00000AC6 E940020000          <2>  jmp _next
   156                              <1> 
   157                              <1> ; ------------------------------------------------------------------------
   158                              <1> ; flip sign
   159                              <1> 
   160                              <1> ;       ( n --- -n )
   161                              <1> 
   162                              <1> code 'negate', negate
   162                              <2>  header %1,%2
   162                              <3> [section headers]
   162 000007D6 [CF070000]          <3>  dd vlink
   162                              <3> %%link:
   162                              <3> %2n:
   162                              <3> %xdefine vlink %%link
   162 000007DA 06                  <3>  db (%%name-$-1)+imm
   162 000007DB 6E6567617465        <3>  db %1
   162                              <3> %%name:
   162 000007E1 [CF0A0000]          <3>  dd %2
   162                              <3> %xdefine imm 0
   162                              <3> 
   162                              <3> section list
   162 00000ACB [DA070000]          <3>  dd %%link
   162                              <2> %2:
   163 00000ACF F7DB                <1>   neg ebx
   164                              <1>   next
   164 00000AD1 E935020000          <2>  jmp _next
   165                              <1> 
   166                              <1> ; ------------------------------------------------------------------------
   167                              <1> ; conditionally flip sign
   168                              <1> 
   169                              <1> colon '?negate', qnegate
   169                              <2>  header %1,%2
   169                              <3> [section headers]
   169 000007E5 [DA070000]          <3>  dd vlink
   169                              <3> %%link:
   169                              <3> %2n:
   169                              <3> %xdefine vlink %%link
   169 000007E9 07                  <3>  db (%%name-$-1)+imm
   169 000007EA 3F6E6567617465      <3>  db %1
   169                              <3> %%name:
   169 000007F1 [DA0A0000]          <3>  dd %2
   169                              <3> %xdefine imm 0
   169                              <3> 
   169                              <3> section list
   169 00000AD6 [E9070000]          <3>  dd %%link
   169                              <2> %2:
   169 00000ADA E889020000          <2>  call nest
   169                              <2> %2_b:
   170 00000ADF [C9080000]          <1>   dd zless                   ; is f1 negative?
   171 00000AE3 [A7080000]-         <1>   dd nott, qexit
   171 00000AE7 [800D0000]          <1>
   172 00000AEB [CF0A0000]          <1>   dd negate
   173 00000AEF [740D0000]          <1>   dd exit
   174                              <1> 
   175                              <1> ; ------------------------------------------------------------------------
   176                              <1> ; unsigned mixed multiply
   177                              <1> 
   178                              <1> ;       ( n1 n2 --- d1 )
   179                              <1> 
   180                              <1> code 'um*', umstar
   180                              <2>  header %1,%2
   180                              <3> [section headers]
   180 000007F5 [E9070000]          <3>  dd vlink
   180                              <3> %%link:
   180                              <3> %2n:
   180                              <3> %xdefine vlink %%link
   180 000007F9 03                  <3>  db (%%name-$-1)+imm
   180 000007FA 756D2A              <3>  db %1
   180                              <3> %%name:
   180 000007FD [F70A0000]          <3>  dd %2
   180                              <3> %xdefine imm 0
   180                              <3> 
   180                              <3> section list
   180 00000AF3 [F9070000]          <3>  dd %%link
   180                              <2> %2:
   181 00000AF7 58                  <1>   pop eax                    ; get n2
   182 00000AF8 F7E3                <1>   mul ebx                    ; multiply
   183 00000AFA 52                  <1>   push edx                   ; return 64 bit result
   184 00000AFB 89C3                <1>   mov ebx, eax
   185                              <1>   next
   185 00000AFD E909020000          <2>  jmp _next
   186                              <1> 
   187                              <1> ; ------------------------------------------------------------------------
   188                              <1> ; multiply n1 by n2
   189                              <1> 
   190                              <1> ;       ( n1 n2 --- n3 )
   191                              <1> 
   192                              <1> code '*', star
   192                              <2>  header %1,%2
   192                              <3> [section headers]
   192 00000801 [F9070000]          <3>  dd vlink
   192                              <3> %%link:
   192                              <3> %2n:
   192                              <3> %xdefine vlink %%link
   192 00000805 01                  <3>  db (%%name-$-1)+imm
   192 00000806 2A                  <3>  db %1
   192                              <3> %%name:
   192 00000807 [060B0000]          <3>  dd %2
   192                              <3> %xdefine imm 0
   192                              <3> 
   192                              <3> section list
   192 00000B02 [05080000]          <3>  dd %%link
   192                              <2> %2:
   193 00000B06 58                  <1>   pop eax                    ; get n1
   194 00000B07 F7E3                <1>   mul ebx                    ; multiply
   195 00000B09 89C3                <1>   mov ebx, eax               ; return result
   196                              <1>   next
   196 00000B0B E9FB010000          <2>  jmp _next
   197                              <1> 
   198                              <1> ; ------------------------------------------------------------------------
   199                              <1> 
   200                              <1> code 'm*', mstar
   200                              <2>  header %1,%2
   200                              <3> [section headers]
   200 0000080B [05080000]          <3>  dd vlink
   200                              <3> %%link:
   200                              <3> %2n:
   200                              <3> %xdefine vlink %%link
   200 0000080F 02                  <3>  db (%%name-$-1)+imm
   200 00000810 6D2A                <3>  db %1
   200                              <3> %%name:
   200 00000812 [140B0000]          <3>  dd %2
   200                              <3> %xdefine imm 0
   200                              <3> 
   200                              <3> section list
   200 00000B10 [0F080000]          <3>  dd %%link
   200                              <2> %2:
   201 00000B14 58                  <1>   pop eax
   202 00000B15 F7EB                <1>   imul ebx
   203 00000B17 50                  <1>   push eax
   204 00000B18 89D3                <1>   mov ebx, edx
   205                              <1>   next
   205 00000B1A E9EC010000          <2>  jmp _next
   206                              <1> 
   207                              <1> ; ------------------------------------------------------------------------
   208                              <1> 
   209                              <1> ;       ( ud un --- uremainder uquotient)
   210                              <1> 
   211                              <1> code 'um/mod', umsmod
   211                              <2>  header %1,%2
   211                              <3> [section headers]
   211 00000816 [0F080000]          <3>  dd vlink
   211                              <3> %%link:
   211                              <3> %2n:
   211                              <3> %xdefine vlink %%link
   211 0000081A 06                  <3>  db (%%name-$-1)+imm
   211 0000081B 756D2F6D6F64        <3>  db %1
   211                              <3> %%name:
   211 00000821 [230B0000]          <3>  dd %2
   211                              <3> %xdefine imm 0
   211                              <3> 
   211                              <3> section list
   211 00000B1F [1A080000]          <3>  dd %%link
   211                              <2> %2:
   212 00000B23 5A                  <1>   pop edx
   213 00000B24 58                  <1>   pop eax
   214 00000B25 F7F3                <1>   div ebx
   215 00000B27 52                  <1>   push edx
   216 00000B28 89C3                <1>   mov ebx, eax
   217                              <1>   next
   217 00000B2A E9DC010000          <2>  jmp _next
   218                              <1> 
   219                              <1> ; ------------------------------------------------------------------------
   220                              <1> ; signed version of above
   221                              <1> 
   222                              <1> ;       ( d1 n1 -- rem quot )
   223                              <1> 
   224                              <1> code 'sm/rem', smmod
   224                              <2>  header %1,%2
   224                              <3> [section headers]
   224 00000825 [1A080000]          <3>  dd vlink
   224                              <3> %%link:
   224                              <3> %2n:
   224                              <3> %xdefine vlink %%link
   224 00000829 06                  <3>  db (%%name-$-1)+imm
   224 0000082A 736D2F72656D        <3>  db %1
   224                              <3> %%name:
   224 00000830 [330B0000]          <3>  dd %2
   224                              <3> %xdefine imm 0
   224                              <3> 
   224                              <3> section list
   224 00000B2F [29080000]          <3>  dd %%link
   224                              <2> %2:
   225 00000B33 5A                  <1>   pop edx
   226 00000B34 58                  <1>   pop eax
   227 00000B35 F7FB                <1>   idiv ebx
   228 00000B37 52                  <1>   push edx
   229 00000B38 89C3                <1>   mov ebx, eax
   230                              <1>   next
   230 00000B3A E9CC010000          <2>  jmp _next
   231                              <1> 
   232                              <1> ; ------------------------------------------------------------------------
   233                              <1> 
   234                              <1> colon 'mu/mod', musmod
   234                              <2>  header %1,%2
   234                              <3> [section headers]
   234 00000834 [29080000]          <3>  dd vlink
   234                              <3> %%link:
   234                              <3> %2n:
   234                              <3> %xdefine vlink %%link
   234 00000838 06                  <3>  db (%%name-$-1)+imm
   234 00000839 6D752F6D6F64        <3>  db %1
   234                              <3> %%name:
   234 0000083F [430B0000]          <3>  dd %2
   234                              <3> %xdefine imm 0
   234                              <3> 
   234                              <3> section list
   234 00000B3F [38080000]          <3>  dd %%link
   234                              <2> %2:
   234 00000B43 E820020000          <2>  call nest
   234                              <2> %2_b:
   235 00000B48 [E1030000]-         <1>   dd tor, plit, 0
   235 00000B4C [D00D0000]00000000  <1>
   236 00000B54 [3B040000]-         <1>   dd rfetch, umsmod
   236 00000B58 [230B0000]          <1>
   237 00000B5C [01040000]-         <1>   dd rto, swap, tor
   237 00000B60 [18030000]-         <1>
   237 00000B64 [E1030000]          <1>
   238 00000B68 [230B0000]-         <1>   dd umsmod, rto
   238 00000B6C [01040000]          <1>
   239 00000B70 [740D0000]          <1>   dd exit
   240                              <1> 
   241                              <1> ; ------------------------------------------------------------------------
   242                              <1> 
   243                              <1> ;       ( d# n1 --- rem quot)
   244                              <1> 
   245                              <1> code 'm/mod', mmod
   245                              <2>  header %1,%2
   245                              <3> [section headers]
   245 00000843 [38080000]          <3>  dd vlink
   245                              <3> %%link:
   245                              <3> %2n:
   245                              <3> %xdefine vlink %%link
   245 00000847 05                  <3>  db (%%name-$-1)+imm
   245 00000848 6D2F6D6F64          <3>  db %1
   245                              <3> %%name:
   245 0000084D [780B0000]          <3>  dd %2
   245                              <3> %xdefine imm 0
   245                              <3> 
   245                              <3> section list
   245 00000B74 [47080000]          <3>  dd %%link
   245                              <2> %2:
   246 00000B78 5A                  <1>   pop edx
   247 00000B79 89D0                <1>   mov eax, edx
   248 00000B7B 31D8                <1>   xor eax, ebx
   249 00000B7D 790C                <1>   jns .L1
   250                              <1> 
   251 00000B7F 58                  <1>   pop eax
   252 00000B80 F7FB                <1>   idiv ebx
   253 00000B82 85D2                <1>   test edx, edx
   254 00000B84 7408                <1>   je .L2
   255 00000B86 01DA                <1>   add edx, ebx
   256 00000B88 48                  <1>   dec eax
   257 00000B89 EB03                <1>   jmp short .L2
   258                              <1> .L1:
   259 00000B8B 58                  <1>   pop eax
   260 00000B8C F7FB                <1>   idiv ebx
   261                              <1> 
   262                              <1> .L2:
   263 00000B8E 52                  <1>   push edx
   264 00000B8F 89C3                <1>   mov ebx, eax
   265                              <1>   next
   265 00000B91 E975010000          <2>  jmp _next
   266                              <1> 
   267                              <1> ; ------------------------------------------------------------------------
   268                              <1> ; floored division and remainder.
   269                              <1> 
   270                              <1> ;       ( num den --- rem quot )
   271                              <1> 
   272                              <1> code '/mod', smod
   272                              <2>  header %1,%2
   272                              <3> [section headers]
   272 00000851 [47080000]          <3>  dd vlink
   272                              <3> %%link:
   272                              <3> %2n:
   272                              <3> %xdefine vlink %%link
   272 00000855 04                  <3>  db (%%name-$-1)+imm
   272 00000856 2F6D6F64            <3>  db %1
   272                              <3> %%name:
   272 0000085A [9A0B0000]          <3>  dd %2
   272                              <3> %xdefine imm 0
   272                              <3> 
   272                              <3> section list
   272 00000B96 [55080000]          <3>  dd %%link
   272                              <2> %2:
   273 00000B9A 59                  <1>   pop ecx
   274 00000B9B 89C8                <1>   mov eax, ecx
   275 00000B9D 31D8                <1>   xor eax, ebx
   276 00000B9F 7910                <1>   jns .L1
   277                              <1> 
   278 00000BA1 89C8                <1>   mov eax, ecx
   279 00000BA3 31D1                <1>   xor ecx, edx
   280 00000BA5 99                  <1>   cdq
   281 00000BA6 F7FB                <1>   idiv ebx
   282 00000BA8 85D2                <1>   test edx, edx
   283 00000BAA 740C                <1>   je .L2
   284                              <1> 
   285 00000BAC 01DA                <1>   add edx, ebx
   286 00000BAE 48                  <1>   dec eax
   287 00000BAF EB07                <1>   jmp short .L2
   288                              <1> 
   289                              <1> .L1:
   290 00000BB1 89C8                <1>   mov eax, ecx
   291 00000BB3 89D2                <1>   mov edx, edx
   292 00000BB5 99                  <1>   cdq
   293 00000BB6 F7FB                <1>   idiv ebx
   294                              <1> 
   295                              <1> .L2:
   296 00000BB8 52                  <1>   push edx
   297 00000BB9 89C3                <1>   mov ebx, eax
   298                              <1>   next
   298 00000BBB E94B010000          <2>  jmp _next
   299                              <1> 
   300                              <1> ; ------------------------------------------------------------------------
   301                              <1> 
   302                              <1> colon '/', slash
   302                              <2>  header %1,%2
   302                              <3> [section headers]
   302 0000085E [55080000]          <3>  dd vlink
   302                              <3> %%link:
   302                              <3> %2n:
   302                              <3> %xdefine vlink %%link
   302 00000862 01                  <3>  db (%%name-$-1)+imm
   302 00000863 2F                  <3>  db %1
   302                              <3> %%name:
   302 00000864 [C40B0000]          <3>  dd %2
   302                              <3> %xdefine imm 0
   302                              <3> 
   302                              <3> section list
   302 00000BC0 [62080000]          <3>  dd %%link
   302                              <2> %2:
   302 00000BC4 E89F010000          <2>  call nest
   302                              <2> %2_b:
   303 00000BC9 [9A0B0000]-         <1>   dd smod, nip
   303 00000BCD [6E030000]          <1>
   304 00000BD1 [740D0000]          <1>   dd exit
   305                              <1> 
   306                              <1> ; ------------------------------------------------------------------------
   307                              <1> 
   308                              <1> colon 'mod', mod
   308                              <2>  header %1,%2
   308                              <3> [section headers]
   308 00000868 [62080000]          <3>  dd vlink
   308                              <3> %%link:
   308                              <3> %2n:
   308                              <3> %xdefine vlink %%link
   308 0000086C 03                  <3>  db (%%name-$-1)+imm
   308 0000086D 6D6F64              <3>  db %1
   308                              <3> %%name:
   308 00000870 [D90B0000]          <3>  dd %2
   308                              <3> %xdefine imm 0
   308                              <3> 
   308                              <3> section list
   308 00000BD5 [6C080000]          <3>  dd %%link
   308                              <2> %2:
   308 00000BD9 E88A010000          <2>  call nest
   308                              <2> %2_b:
   309 00000BDE [9A0B0000]-         <1>   dd smod, drop
   309 00000BE2 [3C030000]          <1>
   310 00000BE6 [740D0000]          <1>   dd exit
   311                              <1> 
   312                              <1> ; ------------------------------------------------------------------------
   313                              <1> 
   314                              <1> code '*/mod', ssmod
   314                              <2>  header %1,%2
   314                              <3> [section headers]
   314 00000874 [6C080000]          <3>  dd vlink
   314                              <3> %%link:
   314                              <3> %2n:
   314                              <3> %xdefine vlink %%link
   314 00000878 05                  <3>  db (%%name-$-1)+imm
   314 00000879 2A2F6D6F64          <3>  db %1
   314                              <3> %%name:
   314 0000087E [EE0B0000]          <3>  dd %2
   314                              <3> %xdefine imm 0
   314                              <3> 
   314                              <3> section list
   314 00000BEA [78080000]          <3>  dd %%link
   314                              <2> %2:
   315 00000BEE 59                  <1>   pop ecx
   316 00000BEF 58                  <1>   pop eax
   317 00000BF0 F7E9                <1>   imul ecx
   318 00000BF2 89D1                <1>   mov ecx, edx
   319 00000BF4 31D9                <1>   xor ecx, ebx
   320 00000BF6 790B                <1>   jns .L1
   321                              <1> 
   322 00000BF8 F7FB                <1>   idiv ebx
   323 00000BFA 85D2                <1>   test edx, edx
   324 00000BFC 7407                <1>   je short .L2
   325 00000BFE 01DA                <1>   add edx, ebx
   326 00000C00 48                  <1>   dec eax
   327 00000C01 EB02                <1>   jmp short .L2
   328                              <1> .L1:
   329 00000C03 F7FB                <1>   idiv ebx
   330                              <1> .L2:
   331 00000C05 89C3                <1>   mov ebx, eax
   332 00000C07 52                  <1>   push edx
   333                              <1>   next
   333 00000C08 E9FE000000          <2>  jmp _next
   334                              <1> 
   335                              <1> ; ------------------------------------------------------------------------
   336                              <1> 
   337                              <1> colon '*/', sslash
   337                              <2>  header %1,%2
   337                              <3> [section headers]
   337 00000882 [78080000]          <3>  dd vlink
   337                              <3> %%link:
   337                              <3> %2n:
   337                              <3> %xdefine vlink %%link
   337 00000886 02                  <3>  db (%%name-$-1)+imm
   337 00000887 2A2F                <3>  db %1
   337                              <3> %%name:
   337 00000889 [110C0000]          <3>  dd %2
   337                              <3> %xdefine imm 0
   337                              <3> 
   337                              <3> section list
   337 00000C0D [86080000]          <3>  dd %%link
   337                              <2> %2:
   337 00000C11 E852010000          <2>  call nest
   337                              <2> %2_b:
   338 00000C16 [EE0B0000]-         <1>   dd ssmod, nip
   338 00000C1A [6E030000]          <1>
   339 00000C1E [740D0000]          <1>   dd exit
   340                              <1> 
   341                              <1> ; ------------------------------------------------------------------------
   342                              <1> ; maybe this dont belong in the kernel but its useful outside it :)
   343                              <1> 
   344                              <1> code 'bswap', b_Swap
   344                              <2>  header %1,%2
   344                              <3> [section headers]
   344 0000088D [86080000]          <3>  dd vlink
   344                              <3> %%link:
   344                              <3> %2n:
   344                              <3> %xdefine vlink %%link
   344 00000891 05                  <3>  db (%%name-$-1)+imm
   344 00000892 6273776170          <3>  db %1
   344                              <3> %%name:
   344 00000897 [260C0000]          <3>  dd %2
   344                              <3> %xdefine imm 0
   344                              <3> 
   344                              <3> section list
   344 00000C22 [91080000]          <3>  dd %%link
   344                              <2> %2:
   345 00000C26 86FB                <1>   xchg bh, bl
   346 00000C28 C1CB10              <1>   ror ebx, 16
   347 00000C2B 86FB                <1>   xchg bh, bl
   348                              <1>   next
   348 00000C2D E9D9000000          <2>  jmp _next
   349                              <1> 
   350                              <1> ; ========================================================================
   114                                    %include "double.s"       ; double number math (not divides)
     1                              <1> ; double.s  - double number math (not division)
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; add two double (64 bit) numbers
     6                              <1> 
     7                              <1> ;       ( d1 d2 --- d3 )
     8                              <1> 
     9                              <1> code 'd+', dplus
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 0000089B [91080000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 0000089F 02                  <3>  db (%%name-$-1)+imm
     9 000008A0 642B                <3>  db %1
     9                              <3> %%name:
     9 000008A2 [360C0000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 00000C32 [9F080000]          <3>  dd %%link
     9                              <2> %2:
    10 00000C36 58                  <1>   pop eax                    ; d2 = ebx:eax
    11 00000C37 59                  <1>   pop ecx                    ; d1 = ecx:[esp]
    12 00000C38 010424              <1>   add [esp], eax             ; add d2 low to d1 low
    13 00000C3B 11CB                <1>   adc ebx, ecx               ; add d2 high to d1 high
    14                              <1>   next
    14 00000C3D E9C9000000          <2>  jmp _next
    15                              <1> 
    16                              <1> ; ------------------------------------------------------------------------
    17                              <1> ; subtract 64 bit numbers
    18                              <1> 
    19                              <1> ;       ( d1 d2 --- d3 )
    20                              <1> 
    21                              <1> code 'd-', dminus
    21                              <2>  header %1,%2
    21                              <3> [section headers]
    21 000008A6 [9F080000]          <3>  dd vlink
    21                              <3> %%link:
    21                              <3> %2n:
    21                              <3> %xdefine vlink %%link
    21 000008AA 02                  <3>  db (%%name-$-1)+imm
    21 000008AB 642D                <3>  db %1
    21                              <3> %%name:
    21 000008AD [460C0000]          <3>  dd %2
    21                              <3> %xdefine imm 0
    21                              <3> 
    21                              <3> section list
    21 00000C42 [AA080000]          <3>  dd %%link
    21                              <2> %2:
    22 00000C46 58                  <1>   pop eax                    ; d1 = ebx:eax
    23 00000C47 59                  <1>   pop ecx                    ; d2 = ecx:[esp]
    24 00000C48 290424              <1>   sub [esp], eax             ; subtract d2 low from d1 low
    25 00000C4B 19D9                <1>   sbb ecx, ebx               ; subtract d2 high from d1 high
    26 00000C4D 89CB                <1>   mov ebx, ecx               ; return result high in ebx
    27                              <1>   next
    27 00000C4F E9B7000000          <2>  jmp _next
    28                              <1> 
    29                              <1> ; ------------------------------------------------------------------------
    30                              <1> ; negate a double number
    31                              <1> 
    32                              <1> ;       ( d1 --- -d1 )
    33                              <1> 
    34                              <1> code 'dnegate', dnegate
    34                              <2>  header %1,%2
    34                              <3> [section headers]
    34 000008B1 [AA080000]          <3>  dd vlink
    34                              <3> %%link:
    34                              <3> %2n:
    34                              <3> %xdefine vlink %%link
    34 000008B5 07                  <3>  db (%%name-$-1)+imm
    34 000008B6 646E6567617465      <3>  db %1
    34                              <3> %%name:
    34 000008BD [580C0000]          <3>  dd %2
    34                              <3> %xdefine imm 0
    34                              <3> 
    34                              <3> section list
    34 00000C54 [B5080000]          <3>  dd %%link
    34                              <2> %2:
    35                              <1> .L1:
    36 00000C58 58                  <1>   pop eax                    ; get d1 low
    37 00000C59 F7DB                <1>   neg ebx                    ; negate n1 low and high
    38 00000C5B F7D8                <1>   neg eax
    39 00000C5D 83DB00              <1>   sbb ebx, byte 0            ; did the neg mess with overflow or something?
    40 00000C60 50                  <1>   push eax
    41                              <1>   next
    41 00000C61 E9A5000000          <2>  jmp _next
    42                              <1> 
    43                              <1> ; ------------------------------------------------------------------------
    44                              <1> ; compute absolute value of a double
    45                              <1> 
    46                              <1> ;       ( d1 ---- d1` )
    47                              <1> 
    48                              <1> code 'dabs', dabs
    48                              <2>  header %1,%2
    48                              <3> [section headers]
    48 000008C1 [B5080000]          <3>  dd vlink
    48                              <3> %%link:
    48                              <3> %2n:
    48                              <3> %xdefine vlink %%link
    48 000008C5 04                  <3>  db (%%name-$-1)+imm
    48 000008C6 64616273            <3>  db %1
    48                              <3> %%name:
    48 000008CA [6A0C0000]          <3>  dd %2
    48                              <3> %xdefine imm 0
    48                              <3> 
    48                              <3> section list
    48 00000C66 [C5080000]          <3>  dd %%link
    48                              <2> %2:
    49 00000C6A 85DB                <1>   test ebx, ebx              ; is d1 high negative?
    50 00000C6C 78EA                <1>   js dnegate.L1              ; if so negate d1
    51                              <1>   next
    51 00000C6E E998000000          <2>  jmp _next
    52                              <1> 
    53                              <1> ; ------------------------------------------------------------------------
    54                              <1> ; convert single to double (signed!)
    55                              <1> 
    56                              <1> ;       ( n1 --- d1 )
    57                              <1> 
    58                              <1> code 's>d', stod
    58                              <2>  header %1,%2
    58                              <3> [section headers]
    58 000008CE [C5080000]          <3>  dd vlink
    58                              <3> %%link:
    58                              <3> %2n:
    58                              <3> %xdefine vlink %%link
    58 000008D2 03                  <3>  db (%%name-$-1)+imm
    58 000008D3 733E64              <3>  db %1
    58                              <3> %%name:
    58 000008D6 [770C0000]          <3>  dd %2
    58                              <3> %xdefine imm 0
    58                              <3> 
    58                              <3> section list
    58 00000C73 [D2080000]          <3>  dd %%link
    58                              <2> %2:
    59 00000C77 53                  <1>   push ebx                   ; push d1 low = n1
    60 00000C78 01DB                <1>   add ebx, ebx               ; shift sign bit into carry
    61 00000C7A 19DB                <1>   sbb ebx, ebx               ; propogates sign of n1 throughout d1 high
    62                              <1>   next
    62 00000C7C E98A000000          <2>  jmp _next
    63                              <1> 
    64                              <1> ; ------------------------------------------------------------------------
    65                              <1> ; compare 2 double numbers
    66                              <1> 
    67                              <1> ;       ( d1 d2 --- f1 )
    68                              <1> 
    69                              <1> 
    70                              <1> colon 'd=', dequals
    70                              <2>  header %1,%2
    70                              <3> [section headers]
    70 000008DA [D2080000]          <3>  dd vlink
    70                              <3> %%link:
    70                              <3> %2n:
    70                              <3> %xdefine vlink %%link
    70 000008DE 02                  <3>  db (%%name-$-1)+imm
    70 000008DF 643D                <3>  db %1
    70                              <3> %%name:
    70 000008E1 [850C0000]          <3>  dd %2
    70                              <3> %xdefine imm 0
    70                              <3> 
    70                              <3> section list
    70 00000C81 [DE080000]          <3>  dd %%link
    70                              <2> %2:
    70 00000C85 E8DE000000          <2>  call nest
    70                              <2> %2_b:
    71 00000C8A [460C0000]          <1>   dd dminus                  ; stubract d2 from d1
    72 00000C8E [8F080000]          <1>   dd orr                     ; or together high and low of result
    73 00000C92 [B2080000]          <1>   dd zequals                 ; result will only be 0 when d1 = d2
    74 00000C96 [740D0000]          <1>   dd exit
    75                              <1> 
    76                              <1> ; ------------------------------------------------------------------------
    77                              <1> ; is double number negative?
    78                              <1> 
    79                              <1> ;       ( d1 --- f1 )
    80                              <1> 
    81                              <1> code 'd0<', dzlezz
    81                              <2>  header %1,%2
    81                              <3> [section headers]
    81 000008E5 [DE080000]          <3>  dd vlink
    81                              <3> %%link:
    81                              <3> %2n:
    81                              <3> %xdefine vlink %%link
    81 000008E9 03                  <3>  db (%%name-$-1)+imm
    81 000008EA 64303C              <3>  db %1
    81                              <3> %%name:
    81 000008ED [9E0C0000]          <3>  dd %2
    81                              <3> %xdefine imm 0
    81                              <3> 
    81                              <3> section list
    81 00000C9A [E9080000]          <3>  dd %%link
    81                              <2> %2:
    82 00000C9E 01DB                <1>   add ebx, ebx               ; shift sign bit into carry
    83 00000CA0 19DB                <1>   sbb ebx, ebx               ; propogates sign of n1 throughout d1 high
    84 00000CA2 58                  <1>   pop eax
    85                              <1>   next
    85 00000CA3 EB66                <2>  jmp _next
    86                              <1> 
    87                              <1> ; ------------------------------------------------------------------------
    88                              <1> ; see if double d1 is less than double d2
    89                              <1> 
    90                              <1> ;       ( d1 d2 --- f1 )
    91                              <1> 
    92                              <1> code 'd<', dless
    92                              <2>  header %1,%2
    92                              <3> [section headers]
    92 000008F1 [E9080000]          <3>  dd vlink
    92                              <3> %%link:
    92                              <3> %2n:
    92                              <3> %xdefine vlink %%link
    92 000008F5 02                  <3>  db (%%name-$-1)+imm
    92 000008F6 643C                <3>  db %1
    92                              <3> %%name:
    92 000008F8 [A90C0000]          <3>  dd %2
    92                              <3> %xdefine imm 0
    92                              <3> 
    92                              <3> section list
    92 00000CA5 [F5080000]          <3>  dd %%link
    92                              <2> %2:
    93 00000CA9 58                  <1>   pop eax
    94 00000CAA 59                  <1>   pop ecx
    95 00000CAB 390424              <1>   cmp [esp], eax
    96 00000CAE 58                  <1>   pop eax
    97 00000CAF 19D9                <1>   sbb ecx, ebx
    98 00000CB1 BB00000000          <1>   mov ebx, 0
    99 00000CB6 7D01                <1>   jge .L1
   100 00000CB8 4B                  <1>   dec ebx
   101                              <1> .L1:
   102                              <1>   next
   102 00000CB9 EB50                <2>  jmp _next
   103                              <1> 
   104                              <1> ; ------------------------------------------------------------------------
   105                              <1> 
   106                              <1> ;         ( d1 d2 --- f1 )
   107                              <1> 
   108                              <1> colon 'd>', dgreater
   108                              <2>  header %1,%2
   108                              <3> [section headers]
   108 000008FC [F5080000]          <3>  dd vlink
   108                              <3> %%link:
   108                              <3> %2n:
   108                              <3> %xdefine vlink %%link
   108 00000900 02                  <3>  db (%%name-$-1)+imm
   108 00000901 643E                <3>  db %1
   108                              <3> %%name:
   108 00000903 [BF0C0000]          <3>  dd %2
   108                              <3> %xdefine imm 0
   108                              <3> 
   108                              <3> section list
   108 00000CBB [00090000]          <3>  dd %%link
   108                              <2> %2:
   108 00000CBF E8A4000000          <2>  call nest
   108                              <2> %2_b:
   109 00000CC4 [24030000]          <1>   dd swap2
   110 00000CC8 [A90C0000]          <1>   dd dless
   111 00000CCC [740D0000]          <1>   dd exit
   112                              <1> 
   113                              <1> ; ------------------------------------------------------------------------
   114                              <1> 
   115                              <1> ;         ( d1 d2 --- f1 )
   116                              <1> 
   117                              <1> colon 'd<>', dnotequals
   117                              <2>  header %1,%2
   117                              <3> [section headers]
   117 00000907 [00090000]          <3>  dd vlink
   117                              <3> %%link:
   117                              <3> %2n:
   117                              <3> %xdefine vlink %%link
   117 0000090B 03                  <3>  db (%%name-$-1)+imm
   117 0000090C 643C3E              <3>  db %1
   117                              <3> %%name:
   117 0000090F [D40C0000]          <3>  dd %2
   117                              <3> %xdefine imm 0
   117                              <3> 
   117                              <3> section list
   117 00000CD0 [0B090000]          <3>  dd %%link
   117                              <2> %2:
   117 00000CD4 E88F000000          <2>  call nest
   117                              <2> %2_b:
   118 00000CD9 [850C0000]          <1>   dd dequals
   119 00000CDD [A7080000]          <1>   dd nott
   120 00000CE1 [740D0000]          <1>   dd exit
   121                              <1> 
   122                              <1> ; ========================================================================
   115                                    %include "exec.s"         ; word execution, nest/next etc
     1                              <1> ; exec.s         - x4 execution and interpretation words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1>   _defer_ 'abort', abort,  pabort
     4                              <2>  code %1,%2
     4                              <3>  header %1,%2
     4                              <4> [section headers]
     4 00000913 [0B090000]          <4>  dd vlink
     4                              <4> %%link:
     4                              <4> %2n:
     4                              <4> %xdefine vlink %%link
     4 00000917 05                  <4>  db (%%name-$-1)+imm
     4 00000918 61626F7274          <4>  db %1
     4                              <4> %%name:
     4 0000091D [E90C0000]          <4>  dd %2
     4                              <4> %xdefine imm 0
     4                              <4> 
     4                              <4> section list
     4 00000CE5 [17090000]          <4>  dd %%link
     4                              <3> %2:
     4 00000CE9 E8DB000000          <2>  call dodefer
     4                              <2> %2_b:
     4 00000CEE [80250000]          <2>  dd %3
     5                              <1> 
     6                              <1> ; ------------------------------------------------------------------------
     7                              <1> ; useful for debugging the forth kernel
     8                              <1> 
     9                              <1> code 'break', break         ; this is just a noop that is not used
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 00000921 [17090000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 00000925 05                  <3>  db (%%name-$-1)+imm
     9 00000926 627265616B          <3>  db %1
     9                              <3> %%name:
     9 0000092B [F60C0000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 00000CF2 [25090000]          <3>  dd %%link
     9                              <2> %2:
    10                              <1>   next                      ; anywhere within the kernel
    10 00000CF6 EB13                <2>  jmp _next
    11                              <1> 
    12                              <1> ; ------------------------------------------------------------------------
    13                              <1> ; no operation
    14                              <1> 
    15                              <1> ;       ( --- )
    16                              <1> 
    17                              <1> code 'noop', noop           ; no operation
    17                              <2>  header %1,%2
    17                              <3> [section headers]
    17 0000092F [25090000]          <3>  dd vlink
    17                              <3> %%link:
    17                              <3> %2n:
    17                              <3> %xdefine vlink %%link
    17 00000933 04                  <3>  db (%%name-$-1)+imm
    17 00000934 6E6F6F70            <3>  db %1
    17                              <3> %%name:
    17 00000938 [FC0C0000]          <3>  dd %2
    17                              <3> %xdefine imm 0
    17                              <3> 
    17                              <3> section list
    17 00000CF8 [33090000]          <3>  dd %%link
    17                              <2> %2:
    18                              <1>   next
    18 00000CFC EB0D                <2>  jmp _next
    19                              <1> 
    20                              <1> ; -----------------------------------------------------------------------
    21                              <1> ; belongs in src/ext/struct.f
    22                              <1> 
    23                              <1> code '(db)', pbf
    23                              <2>  header %1,%2
    23                              <3> [section headers]
    23 0000093C [33090000]          <3>  dd vlink
    23                              <3> %%link:
    23                              <3> %2n:
    23                              <3> %xdefine vlink %%link
    23 00000940 04                  <3>  db (%%name-$-1)+imm
    23 00000941 28646229            <3>  db %1
    23                              <3> %%name:
    23 00000945 [020D0000]          <3>  dd %2
    23                              <3> %xdefine imm 0
    23                              <3> 
    23                              <3> section list
    23 00000CFE [40090000]          <3>  dd %%link
    23                              <2> %2:
    24 00000D02 58                  <1>   pop eax
    25 00000D03 0318                <1>   add ebx, [eax]
    26                              <1>   next
    26 00000D05 EB04                <2>  jmp _next
    27                              <1> 
    28                              <1> ; ------------------------------------------------------------------------
    29                              <1> ; execute next word within a high level definition
    30                              <1> 
    31                              <1> ;       ( --- )
    32                              <1> 
    33                              <1> code '_next', _next
    33                              <2>  header %1,%2
    33                              <3> [section headers]
    33 00000949 [40090000]          <3>  dd vlink
    33                              <3> %%link:
    33                              <3> %2n:
    33                              <3> %xdefine vlink %%link
    33 0000094D 05                  <3>  db (%%name-$-1)+imm
    33 0000094E 5F6E657874          <3>  db %1
    33                              <3> %%name:
    33 00000953 [0B0D0000]          <3>  dd %2
    33                              <3> %xdefine imm 0
    33                              <3> 
    33                              <3> section list
    33 00000D07 [4D090000]          <3>  dd %%link
    33                              <2> %2:
    34 00000D0B AD                  <1>   lodsd                     ; get address of word to execute from
    35 00000D0C FFE0                <1>   jmp eax                   ; current definition and execute it
    36 00000D0E 90                  <1>   nop                       ; makes above exactly 4 bytes (patchable cell)
    37                              <1> 
    38                              <1> ; ------------------------------------------------------------------------
    39                              <1> ; debuggers next..
    40                              <1> 
    41 00000D0F B8ADFFE090          <1>   mov eax, $90e0ffad        ; restore next so debugger doesnt try to
    42 00000D14 A3[0B0D0000]        <1>   mov [_next], eax          ; debug itself
    43                              <1> 
    44 00000D19 53                  <1>   push ebx                  ; save applications top of stack
    45                              <1> 
    46 00000D1A 89E0                <1>   mov eax, esp              ; save applications esp
    47 00000D1C 8B25[2F0D0000]      <1>   mov esp, dword [sv]       ; restore debuggers esp
    48                              <1> 
    49 00000D22 59                  <1>   pop ecx                   ; fetch debuggers rp
    50 00000D23 5A                  <1>   pop edx                   ; fetch debuggers ip
    51                              <1> 
    52 00000D24 50                  <1>   push eax                  ; push apps esp to debuggers pstack
    53 00000D25 55                  <1>   push ebp                  ; push apps rp to debuggers pstack
    54 00000D26 89F3                <1>   mov ebx, esi              ; push apps ip to debuggers pstack
    55                              <1> 
    56 00000D28 89D6                <1>   mov esi, edx              ; set debuggers ip
    57 00000D2A 89CD                <1>   mov ebp, ecx              ; set debuggers rp
    58                              <1> 
    59                              <1> .L0:
    60 00000D2C AD                  <1>   lodsd                     ; jump back into debugger
    61 00000D2D FFE0                <1>   jmp eax
    62                              <1> 
    63                              <1> ; ------------------------------------------------------------------------
    64                              <1> 
    65 00000D2F 00000000            <1> sv:    dd 0
    66                              <1> 
    67                              <1> ; ------------------------------------------------------------------------
    68                              <1> ; debugger steps next xt of application code
    69                              <1> 
    70                              <1> ;     ( a1 a2 a3 --- )
    71                              <1> 
    72                              <1> code 'bnext', bnext
    72                              <2>  header %1,%2
    72                              <3> [section headers]
    72 00000957 [4D090000]          <3>  dd vlink
    72                              <3> %%link:
    72                              <3> %2n:
    72                              <3> %xdefine vlink %%link
    72 0000095B 05                  <3>  db (%%name-$-1)+imm
    72 0000095C 626E657874          <3>  db %1
    72                              <3> %%name:
    72 00000961 [370D0000]          <3>  dd %2
    72                              <3> %xdefine imm 0
    72                              <3> 
    72                              <3> section list
    72 00000D33 [5B090000]          <3>  dd %%link
    72                              <2> %2:
    73 00000D37 59                  <1>   pop ecx                   ; fetch apps rp
    74 00000D38 5A                  <1>   pop edx                   ; fetch apps ip
    75                              <1> 
    76 00000D39 56                  <1>   push esi                  ; debug ip
    77 00000D3A 55                  <1>   push ebp                  ; debug rp
    78 00000D3B 8925[2F0D0000]      <1>   mov [sv], esp             ; debug sp
    79                              <1> 
    80 00000D41 89DC                <1>   mov esp, ebx              ; set application context
    81 00000D43 89CD                <1>   mov ebp, ecx
    82 00000D45 89D6                <1>   mov esi, edx
    83 00000D47 5B                  <1>   pop ebx                   ; cache top of application stack in ebp
    84                              <1> 
    85 00000D48 B890909090          <1>   mov eax, $90909090        ; obliterate code at _next with nops
    86 00000D4D A3[0B0D0000]        <1>   mov [_next], eax
    87                              <1> 
    88 00000D52 AD                  <1>   lodsd                     ; run apps next xt
    89 00000D53 FFE0                <1>   jmp eax
    90                              <1> 
    91                              <1> ; ------------------------------------------------------------------------
    92                              <1> ; interpret does> part of a word (within word that defined it)
    93                              <1> 
    94                              <1> ;       ( a1 a2 --- a1 )
    95                              <1> 
    96                              <1> code 'dodoes', dodoes
    96                              <2>  header %1,%2
    96                              <3> [section headers]
    96 00000965 [5B090000]          <3>  dd vlink
    96                              <3> %%link:
    96                              <3> %2n:
    96                              <3> %xdefine vlink %%link
    96 00000969 06                  <3>  db (%%name-$-1)+imm
    96 0000096A 646F646F6573        <3>  db %1
    96                              <3> %%name:
    96 00000970 [590D0000]          <3>  dd %2
    96                              <3> %xdefine imm 0
    96                              <3> 
    96                              <3> section list
    96 00000D55 [69090000]          <3>  dd %%link
    96                              <2> %2:
    97 00000D59 87EC                <1>   xchg ebp, esp             ; save current ip to return stack
    98 00000D5B 56                  <1>   push esi
    99 00000D5C 87EC                <1>   xchg ebp, esp
   100 00000D5E 5E                  <1>   pop esi                   ; get address of word type interpreter
   101 00000D5F 871C24              <1>   xchg ebx, [esp]           ; put address of word body in ebx
   102                              <1>   next
   102 00000D62 EBA7                <2>  jmp _next
   103                              <1> 
   104                              <1> ; ------------------------------------------------------------------------
   105                              <1> ; nest into a high level definition - called by : definition
   106                              <1> 
   107                              <1> ;       ( a1 --- )
   108                              <1> 
   109                              <1> code 'nest', nest
   109                              <2>  header %1,%2
   109                              <3> [section headers]
   109 00000974 [69090000]          <3>  dd vlink
   109                              <3> %%link:
   109                              <3> %2n:
   109                              <3> %xdefine vlink %%link
   109 00000978 04                  <3>  db (%%name-$-1)+imm
   109 00000979 6E657374            <3>  db %1
   109                              <3> %%name:
   109 0000097D [680D0000]          <3>  dd %2
   109                              <3> %xdefine imm 0
   109                              <3> 
   109                              <3> section list
   109 00000D64 [78090000]          <3>  dd %%link
   109                              <2> %2:
   110 00000D68 87EC                <1>   xchg ebp, esp
   111 00000D6A 56                  <1>   push esi
   112 00000D6B 87EC                <1>   xchg ebp, esp
   113 00000D6D 5E                  <1>   pop esi
   114                              <1>   next
   114 00000D6E EB9B                <2>  jmp _next
   115                              <1> 
   116                              <1> ; ------------------------------------------------------------------------
   117                              <1> ; exit from current high level definition
   118                              <1> 
   119                              <1> ;       ( --- )
   120                              <1> 
   121                              <1> code 'exit', exit
   121                              <2>  header %1,%2
   121                              <3> [section headers]
   121 00000981 [78090000]          <3>  dd vlink
   121                              <3> %%link:
   121                              <3> %2n:
   121                              <3> %xdefine vlink %%link
   121 00000985 04                  <3>  db (%%name-$-1)+imm
   121 00000986 65786974            <3>  db %1
   121                              <3> %%name:
   121 0000098A [740D0000]          <3>  dd %2
   121                              <3> %xdefine imm 0
   121                              <3> 
   121                              <3> section list
   121 00000D70 [85090000]          <3>  dd %%link
   121                              <2> %2:
   122 00000D74 8B7500              <1>   mov esi, [ebp]            ; get return address from return stack into ip
   123 00000D77 83C504              <1>   add ebp, byte CELL
   124                              <1> .L0:
   125                              <1>   next
   125 00000D7A EB8F                <2>  jmp _next
   126                              <1> 
   127                              <1> ; ------------------------------------------------------------------------
   128                              <1> ; conditionally exit high level definition
   129                              <1> 
   130                              <1> ;       ( f1 --- )
   131                              <1> 
   132                              <1> code '?exit', qexit
   132                              <2>  header %1,%2
   132                              <3> [section headers]
   132 0000098E [85090000]          <3>  dd vlink
   132                              <3> %%link:
   132                              <3> %2n:
   132                              <3> %xdefine vlink %%link
   132 00000992 05                  <3>  db (%%name-$-1)+imm
   132 00000993 3F65786974          <3>  db %1
   132                              <3> %%name:
   132 00000998 [800D0000]          <3>  dd %2
   132                              <3> %xdefine imm 0
   132                              <3> 
   132                              <3> section list
   132 00000D7C [92090000]          <3>  dd %%link
   132                              <2> %2:
   133 00000D80 09DB                <1>   or ebx, ebx               ; test f1
   134 00000D82 5B                  <1>   pop ebx                   ; cache new tos (test result retained in psw)
   135 00000D83 74F5                <1>   jz exit.L0                ; 0 = false, non 0 = not false, -1 = true :)
   136 00000D85 EBED                <1>   jmp exit
   137                              <1> 
   138                              <1> ; ------------------------------------------------------------------------
   139                              <1> 
   140                              <1> ;       ( --- )
   141                              <1> 
   142                              <1> ; this was only used in the 8051 assembler which i need to bug fix anyway
   143                              <1> ; its rare that i use tail call optimizations like this
   144                              <1> 
   145                              <1> ; code 'goto', goto
   146                              <1> ;   lodsd
   147                              <1> ;   mov esi, [ebp]            ; get return address from return stack into ip
   148                              <1> ;   add ebp, byte CELL
   149                              <1> ;   jmp eax
   150                              <1> 
   151                              <1> ; ------------------------------------------------------------------------
   152                              <1> ; vector to the n1th word in the list following exec:
   153                              <1> 
   154                              <1> ; this word is an implied unnest from any word using it
   155                              <1> 
   156                              <1> ;       ( n1 --- )
   157                              <1> 
   158                              <1> code 'exec:', execc
   158                              <2>  header %1,%2
   158                              <3> [section headers]
   158 0000099C [92090000]          <3>  dd vlink
   158                              <3> %%link:
   158                              <3> %2n:
   158                              <3> %xdefine vlink %%link
   158 000009A0 05                  <3>  db (%%name-$-1)+imm
   158 000009A1 657865633A          <3>  db %1
   158                              <3> %%name:
   158 000009A6 [8B0D0000]          <3>  dd %2
   158                              <3> %xdefine imm 0
   158                              <3> 
   158                              <3> section list
   158 00000D87 [A0090000]          <3>  dd %%link
   158                              <2> %2:
   159 00000D8B 8B049E              <1>   mov eax,[esi+4*ebx]       ; get vector to n1th word following exec:
   160 00000D8E 5B                  <1>   pop ebx                   ; cache top of stack
   161 00000D8F 87E5                <1>   xchg esp, ebp             ; unnest now - makes exec: an implied exit
   162 00000D91 5E                  <1>   pop esi                   ; from any word using it
   163 00000D92 87E5                <1>   xchg esp, ebp
   164 00000D94 FFE0                <1>   jmp eax
   165                              <1> 
   166                              <1> ; ------------------------------------------------------------------------
   167                              <1> ; alternate for if dotrue else dofalse then
   168                              <1> 
   169                              <1> ;       ( f1 --- )
   170                              <1> 
   171                              <1> code '?:', qcolon
   171                              <2>  header %1,%2
   171                              <3> [section headers]
   171 000009AA [A0090000]          <3>  dd vlink
   171                              <3> %%link:
   171                              <3> %2n:
   171                              <3> %xdefine vlink %%link
   171 000009AE 02                  <3>  db (%%name-$-1)+imm
   171 000009AF 3F3A                <3>  db %1
   171                              <3> %%name:
   171 000009B1 [9A0D0000]          <3>  dd %2
   171                              <3> %xdefine imm 0
   171                              <3> 
   171                              <3> section list
   171 00000D96 [AE090000]          <3>  dd %%link
   171                              <2> %2:
   172 00000D9A 83EB01              <1>   sub ebx, byte 1           ; ebx 0= ?
   173 00000D9D 19DB                <1>   sbb ebx, ebx
   174 00000D9F 83E301              <1>   and ebx, byte 1           ; ebx was true/false ebx now = 0/1
   175                              <1> 
   176 00000DA2 8B049E              <1>   mov eax, [esi+4*ebx]      ; get vector to do-true or do-false
   177 00000DA5 5B                  <1>   pop ebx
   178 00000DA6 83C608              <1>   add esi, byte 8           ; point esi beyond vectors
   179 00000DA9 FFE0                <1>   jmp eax                   ; execute true word or false word
   180                              <1> 
   181                              <1> ; ------------------------------------------------------------------------
   182                              <1> ; execution time code for all constant (and var) definitions.
   183                              <1> 
   184                              <1> ;       ( a1 --- n1 )
   185                              <1> 
   186                              <1> code 'doconstant', doconstant
   186                              <2>  header %1,%2
   186                              <3> [section headers]
   186 000009B5 [AE090000]          <3>  dd vlink
   186                              <3> %%link:
   186                              <3> %2n:
   186                              <3> %xdefine vlink %%link
   186 000009B9 0A                  <3>  db (%%name-$-1)+imm
   186 000009BA 646F636F6E7374616E- <3>  db %1
   186 000009C3 74                  <3>
   186                              <3> %%name:
   186 000009C4 [AF0D0000]          <3>  dd %2
   186                              <3> %xdefine imm 0
   186                              <3> 
   186                              <3> section list
   186 00000DAB [B9090000]          <3>  dd %%link
   186                              <2> %2:
   187 00000DAF 871C24              <1>   xchg ebx, [esp]           ; flush cached tos, get a1
   188 00000DB2 8B1B                <1>   mov ebx, [ebx]            ; get value of constant (or var) from body
   189                              <1>   next
   189 00000DB4 E952FFFFFF          <2>  jmp _next
   190                              <1> 
   191                              <1> ; ------------------------------------------------------------------------
   192                              <1> ; execution time code for all variable definitions
   193                              <1> 
   194                              <1> ;       ( a1 --- a1 )
   195                              <1> 
   196                              <1> code 'dovariable', dovariable
   196                              <2>  header %1,%2
   196                              <3> [section headers]
   196 000009C8 [B9090000]          <3>  dd vlink
   196                              <3> %%link:
   196                              <3> %2n:
   196                              <3> %xdefine vlink %%link
   196 000009CC 0A                  <3>  db (%%name-$-1)+imm
   196 000009CD 646F7661726961626C- <3>  db %1
   196 000009D6 65                  <3>
   196                              <3> %%name:
   196 000009D7 [BD0D0000]          <3>  dd %2
   196                              <3> %xdefine imm 0
   196                              <3> 
   196                              <3> section list
   196 00000DB9 [CC090000]          <3>  dd %%link
   196                              <2> %2:
   197 00000DBD 871C24              <1>   xchg ebx, [esp]           ; flush tos cache, cache a1
   198                              <1>   next
   198 00000DC0 E946FFFFFF          <2>  jmp _next
   199                              <1> 
   200                              <1> ; ------------------------------------------------------------------------
   201                              <1> ; cfa of defered word calls here
   202                              <1> 
   203                              <1> ;       ( a1 --- )
   204                              <1> 
   205                              <1> code 'dodefer', dodefer
   205                              <2>  header %1,%2
   205                              <3> [section headers]
   205 000009DB [CC090000]          <3>  dd vlink
   205                              <3> %%link:
   205                              <3> %2n:
   205                              <3> %xdefine vlink %%link
   205 000009DF 07                  <3>  db (%%name-$-1)+imm
   205 000009E0 646F6465666572      <3>  db %1
   205                              <3> %%name:
   205 000009E7 [C90D0000]          <3>  dd %2
   205                              <3> %xdefine imm 0
   205                              <3> 
   205                              <3> section list
   205 00000DC5 [DF090000]          <3>  dd %%link
   205                              <2> %2:
   206 00000DC9 58                  <1>   pop eax                   ; get defered word execution vector
   207 00000DCA FF20                <1>   jmp [eax]                 ; execute defered word
   208                              <1> 
   209                              <1> ; ------------------------------------------------------------------------
   210                              <1> ; collect inline literal from within : definition
   211                              <1> 
   212                              <1> ;       ( --- n1 )
   213                              <1> 
   214                              <1> code '(lit)', plit
   214                              <2>  header %1,%2
   214                              <3> [section headers]
   214 000009EB [DF090000]          <3>  dd vlink
   214                              <3> %%link:
   214                              <3> %2n:
   214                              <3> %xdefine vlink %%link
   214 000009EF 05                  <3>  db (%%name-$-1)+imm
   214 000009F0 286C697429          <3>  db %1
   214                              <3> %%name:
   214 000009F5 [D00D0000]          <3>  dd %2
   214                              <3> %xdefine imm 0
   214                              <3> 
   214                              <3> section list
   214 00000DCC [EF090000]          <3>  dd %%link
   214                              <2> %2:
   215 00000DD0 AD                  <1>   lodsd                     ; collect literal n1
   216 00000DD1 53                  <1>   push ebx                  ; save cached top of stack
   217 00000DD2 89C3                <1>   mov ebx, eax              ; put n1 at top of stack
   218                              <1>   next
   218 00000DD4 E932FFFFFF          <2>  jmp _next
   219                              <1> 
   220                              <1> ; ------------------------------------------------------------------------
   221                              <1> ; execute word whose code address is at top of stack
   222                              <1> 
   223                              <1> ;       ( a1 --- )
   224                              <1> 
   225                              <1> code 'execute', execute
   225                              <2>  header %1,%2
   225                              <3> [section headers]
   225 000009F9 [EF090000]          <3>  dd vlink
   225                              <3> %%link:
   225                              <3> %2n:
   225                              <3> %xdefine vlink %%link
   225 000009FD 07                  <3>  db (%%name-$-1)+imm
   225 000009FE 65786563757465      <3>  db %1
   225                              <3> %%name:
   225 00000A05 [DD0D0000]          <3>  dd %2
   225                              <3> %xdefine imm 0
   225                              <3> 
   225                              <3> section list
   225 00000DD9 [FD090000]          <3>  dd %%link
   225                              <2> %2:
   226 00000DDD 871C24              <1>   xchg ebx, [esp]           ; put a1 on stack, cach new top of stack in ebx
   227 00000DE0 C3                  <1>   ret                       ; jmp to address a1
   228                              <1> 
   229                              <1> ; ------------------------------------------------------------------------
   230                              <1> ; return contents of body field of var
   231                              <1> 
   232                              <1> code "%?'", zqt
   232                              <2>  header %1,%2
   232                              <3> [section headers]
   232 00000A09 [FD090000]          <3>  dd vlink
   232                              <3> %%link:
   232                              <3> %2n:
   232                              <3> %xdefine vlink %%link
   232 00000A0D 03                  <3>  db (%%name-$-1)+imm
   232 00000A0E 253F27              <3>  db %1
   232                              <3> %%name:
   232 00000A11 [E50D0000]          <3>  dd %2
   232                              <3> %xdefine imm 0
   232                              <3> 
   232                              <3> section list
   232 00000DE1 [0D0A0000]          <3>  dd %%link
   232                              <2> %2:
   233 00000DE5 AD                  <1>   lodsd
   234 00000DE6 53                  <1>   push ebx
   235 00000DE7 8B18                <1>   mov ebx, dword [eax]
   236                              <1>   next
   236 00000DE9 E91DFFFFFF          <2>  jmp _next
   237                              <1> 
   238                              <1> ; ------------------------------------------------------------------------
   239                              <1> ; store n1 in var whose address is compiled into definition
   240                              <1> 
   241                              <1> ;       ( n1 --- )
   242                              <1> 
   243                              <1> code '%!>', zstoreto
   243                              <2>  header %1,%2
   243                              <3> [section headers]
   243 00000A15 [0D0A0000]          <3>  dd vlink
   243                              <3> %%link:
   243                              <3> %2n:
   243                              <3> %xdefine vlink %%link
   243 00000A19 03                  <3>  db (%%name-$-1)+imm
   243 00000A1A 25213E              <3>  db %1
   243                              <3> %%name:
   243 00000A1D [F20D0000]          <3>  dd %2
   243                              <3> %xdefine imm 0
   243                              <3> 
   243                              <3> section list
   243 00000DEE [190A0000]          <3>  dd %%link
   243                              <2> %2:
   244 00000DF2 AD                  <1>   lodsd                     ; get address of word to modify
   245 00000DF3 8918                <1>   mov [eax], ebx            ; store tos in body of word
   246 00000DF5 5B                  <1>   pop ebx
   247                              <1>   next
   247 00000DF6 E910FFFFFF          <2>  jmp _next
   248                              <1> 
   249                              <1> ; ------------------------------------------------------------------------
   250                              <1> ; zero var whose address is compiled into current definition
   251                              <1> 
   252                              <1> ;       ( --- )
   253                              <1> 
   254                              <1> code '%off>', zoffto
   254                              <2>  header %1,%2
   254                              <3> [section headers]
   254 00000A21 [190A0000]          <3>  dd vlink
   254                              <3> %%link:
   254                              <3> %2n:
   254                              <3> %xdefine vlink %%link
   254 00000A25 05                  <3>  db (%%name-$-1)+imm
   254 00000A26 256F66663E          <3>  db %1
   254                              <3> %%name:
   254 00000A2B [FF0D0000]          <3>  dd %2
   254                              <3> %xdefine imm 0
   254                              <3> 
   254                              <3> section list
   254 00000DFB [250A0000]          <3>  dd %%link
   254                              <2> %2:
   255 00000DFF AD                  <1>   lodsd                     ; get address of var to zero
   256 00000E00 C70000000000        <1>   mov dword [eax], 0        ; zero it
   257                              <1>   next
   257 00000E06 E900FFFFFF          <2>  jmp _next
   258                              <1> 
   259                              <1> ; ------------------------------------------------------------------------
   260                              <1> ; set var whose address is compiled into current definition to true
   261                              <1> 
   262                              <1> ;       ( --- )
   263                              <1> 
   264                              <1> code '%on>', zonto
   264                              <2>  header %1,%2
   264                              <3> [section headers]
   264 00000A2F [250A0000]          <3>  dd vlink
   264                              <3> %%link:
   264                              <3> %2n:
   264                              <3> %xdefine vlink %%link
   264 00000A33 04                  <3>  db (%%name-$-1)+imm
   264 00000A34 256F6E3E            <3>  db %1
   264                              <3> %%name:
   264 00000A38 [0F0E0000]          <3>  dd %2
   264                              <3> %xdefine imm 0
   264                              <3> 
   264                              <3> section list
   264 00000E0B [330A0000]          <3>  dd %%link
   264                              <2> %2:
   265 00000E0F AD                  <1>   lodsd                     ; get address of var
   266 00000E10 C700FFFFFFFF        <1>   mov dword [eax], -1       ; set value to true
   267                              <1>   next
   267 00000E16 E9F0FEFFFF          <2>  jmp _next
   268                              <1> 
   269                              <1> ; ------------------------------------------------------------------------
   270                              <1> ; increment var whose address is compiled into current definition
   271                              <1> 
   272                              <1> ;       ( --- )
   273                              <1> 
   274                              <1> code '%incr>', zincrto
   274                              <2>  header %1,%2
   274                              <3> [section headers]
   274 00000A3C [330A0000]          <3>  dd vlink
   274                              <3> %%link:
   274                              <3> %2n:
   274                              <3> %xdefine vlink %%link
   274 00000A40 06                  <3>  db (%%name-$-1)+imm
   274 00000A41 25696E63723E        <3>  db %1
   274                              <3> %%name:
   274 00000A47 [1F0E0000]          <3>  dd %2
   274                              <3> %xdefine imm 0
   274                              <3> 
   274                              <3> section list
   274 00000E1B [400A0000]          <3>  dd %%link
   274                              <2> %2:
   275 00000E1F AD                  <1>   lodsd                     ; get address of var
   276 00000E20 FF00                <1>   inc dword [eax]           ; increment that address
   277                              <1>   next
   277 00000E22 E9E4FEFFFF          <2>  jmp _next
   278                              <1> 
   279                              <1> ; ------------------------------------------------------------------------
   280                              <1> ; decrement var whose address is conpiled into current definition
   281                              <1> 
   282                              <1> ;       ( --- )
   283                              <1> 
   284                              <1> code '%decr>', zdecrto
   284                              <2>  header %1,%2
   284                              <3> [section headers]
   284 00000A4B [400A0000]          <3>  dd vlink
   284                              <3> %%link:
   284                              <3> %2n:
   284                              <3> %xdefine vlink %%link
   284 00000A4F 06                  <3>  db (%%name-$-1)+imm
   284 00000A50 25646563723E        <3>  db %1
   284                              <3> %%name:
   284 00000A56 [2B0E0000]          <3>  dd %2
   284                              <3> %xdefine imm 0
   284                              <3> 
   284                              <3> section list
   284 00000E27 [4F0A0000]          <3>  dd %%link
   284                              <2> %2:
   285 00000E2B AD                  <1>   lodsd                     ; get address of var
   286 00000E2C FF08                <1>   dec dword [eax]           ; decrement that address
   287                              <1>   next
   287 00000E2E E9D8FEFFFF          <2>  jmp _next
   288                              <1> 
   289                              <1> ; ------------------------------------------------------------------------
   290                              <1> ; add n1 to var whose address is compiled into current definition
   291                              <1> 
   292                              <1> ;       ( n1 --- )
   293                              <1> 
   294                              <1> code '%+!>', zplusstoreto
   294                              <2>  header %1,%2
   294                              <3> [section headers]
   294 00000A5A [4F0A0000]          <3>  dd vlink
   294                              <3> %%link:
   294                              <3> %2n:
   294                              <3> %xdefine vlink %%link
   294 00000A5E 04                  <3>  db (%%name-$-1)+imm
   294 00000A5F 252B213E            <3>  db %1
   294                              <3> %%name:
   294 00000A63 [370E0000]          <3>  dd %2
   294                              <3> %xdefine imm 0
   294                              <3> 
   294                              <3> section list
   294 00000E33 [5E0A0000]          <3>  dd %%link
   294                              <2> %2:
   295 00000E37 AD                  <1>   lodsd                     ; get address of var
   296 00000E38 0118                <1>   add dword [eax], ebx      ; add n1 to var
   297 00000E3A 5B                  <1>   pop ebx
   298                              <1>   next
   298 00000E3B E9CBFEFFFF          <2>  jmp _next
   299                              <1> 
   300                              <1> ; ------------------------------------------------------------------------
   301                              <1> ; default execution vector for a defered word
   302                              <1> 
   303                              <1> ;       ( --- )
   304                              <1> 
   305                              <1> colon 'crash', crash
   305                              <2>  header %1,%2
   305                              <3> [section headers]
   305 00000A67 [5E0A0000]          <3>  dd vlink
   305                              <3> %%link:
   305                              <3> %2n:
   305                              <3> %xdefine vlink %%link
   305 00000A6B 05                  <3>  db (%%name-$-1)+imm
   305 00000A6C 6372617368          <3>  db %1
   305                              <3> %%name:
   305 00000A71 [440E0000]          <3>  dd %2
   305                              <3> %xdefine imm 0
   305                              <3> 
   305                              <3> section list
   305 00000E40 [6B0A0000]          <3>  dd %%link
   305                              <2> %2:
   305 00000E44 E81FFFFFFF          <2>  call nest
   305                              <2> %2_b:
   306 00000E49 [69080000]-         <1>   dd true, pabortq
   306 00000E4D [8D120000]          <1>
   307 00000E51 06637261736821      <1>   db 6, 'crash!'
   308 00000E58 [740D0000]          <1>   dd exit
   309                              <1> 
   310                              <1> ; ------------------------------------------------------------------------
   311                              <1> ; quit x4 back to shell
   312                              <1> 
   313                              <1> ;       ( --- )
   314                              <1> 
   315                              <1> colon 'bye', bye
   315                              <2>  header %1,%2
   315                              <3> [section headers]
   315 00000A75 [6B0A0000]          <3>  dd vlink
   315                              <3> %%link:
   315                              <3> %2n:
   315                              <3> %xdefine vlink %%link
   315 00000A79 03                  <3>  db (%%name-$-1)+imm
   315 00000A7A 627965              <3>  db %1
   315                              <3> %%name:
   315 00000A7D [600E0000]          <3>  dd %2
   315                              <3> %xdefine imm 0
   315                              <3> 
   315                              <3> section list
   315 00000E5C [790A0000]          <3>  dd %%link
   315                              <2> %2:
   315 00000E60 E803FFFFFF          <2>  call nest
   315                              <2> %2_b:
   316 00000E65 [FB000000]          <1>   dd atexit                 ; run the exit chain
   317 00000E69 [96110000]-         <1>   dd cr, cr, pdotq          ; exit nicely
   317 00000E6D [96110000]-         <1>
   317 00000E71 [4B120000]          <1>
   318 00000E75 0A4175205265766F69- <1>   db 10,'Au Revoir!'
   318 00000E7E 7221                <1>
   319 00000E80 [96110000]-         <1>   dd cr, cr
   319 00000E84 [96110000]          <1>
   320 00000E88 [66010000]-         <1>   dd errno, sys_exit
   320 00000E8C [39020000]          <1>
   321 00000E90 [740D0000]          <1>   dd exit
   322                              <1> 
   323                              <1> ; ========================================================================
   116                                    %include "loops.s"        ; looping and branching constructs
     1                              <1> ; loops.1        - x4 looping and branching constructs
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; compute bounds of a do loop
     6                              <1> 
     7                              <1> ;       ( a1 n1 --- a2 a1 )
     8                              <1> 
     9                              <1> code 'bounds', bounds
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 00000A81 [790A0000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 00000A85 06                  <3>  db (%%name-$-1)+imm
     9 00000A86 626F756E6473        <3>  db %1
     9                              <3> %%name:
     9 00000A8C [980E0000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 00000E94 [850A0000]          <3>  dd %%link
     9                              <2> %2:
    10 00000E98 031C24              <1>   add ebx, dword [esp]      ; get a1 + a2 in
    11 00000E9B 871C24              <1>   xchg ebx, dword [esp]     ; return start add at top of stack
    12                              <1>   next
    12 00000E9E E968FEFFFF          <2>  jmp _next
    13                              <1> 
    14                              <1> ; ------------------------------------------------------------------------
    15                              <1> ; these noop words exist only for the decompiler
    16                              <1> 
    17                              <1> ;       ( ---)
    18                              <1> 
    19                              <1> code 'dothen', dothen
    19                              <2>  header %1,%2
    19                              <3> [section headers]
    19 00000A90 [850A0000]          <3>  dd vlink
    19                              <3> %%link:
    19                              <3> %2n:
    19                              <3> %xdefine vlink %%link
    19 00000A94 06                  <3>  db (%%name-$-1)+imm
    19 00000A95 646F7468656E        <3>  db %1
    19                              <3> %%name:
    19 00000A9B [A70E0000]          <3>  dd %2
    19                              <3> %xdefine imm 0
    19                              <3> 
    19                              <3> section list
    19 00000EA3 [940A0000]          <3>  dd %%link
    19                              <2> %2:
    20                              <1>   next
    20 00000EA7 E95FFEFFFF          <2>  jmp _next
    21                              <1> 
    22                              <1> ; ------------------------------------------------------------------------
    23                              <1> 
    24                              <1> ;       ( --- )
    25                              <1> 
    26                              <1> code 'dobegin', dobegin
    26                              <2>  header %1,%2
    26                              <3> [section headers]
    26 00000A9F [940A0000]          <3>  dd vlink
    26                              <3> %%link:
    26                              <3> %2n:
    26                              <3> %xdefine vlink %%link
    26 00000AA3 07                  <3>  db (%%name-$-1)+imm
    26 00000AA4 646F626567696E      <3>  db %1
    26                              <3> %%name:
    26 00000AAB [B00E0000]          <3>  dd %2
    26                              <3> %xdefine imm 0
    26                              <3> 
    26                              <3> section list
    26 00000EAC [A30A0000]          <3>  dd %%link
    26                              <2> %2:
    27                              <1>   next
    27 00000EB0 E956FEFFFF          <2>  jmp _next
    28                              <1> 
    29                              <1> ; ------------------------------------------------------------------------
    30                              <1> ; unconditional branches within high elvel definition
    31                              <1> 
    32                              <1> ;       ( --- )
    33                              <1> 
    34                              <1> code 'branch', branch
    34                              <2>  header %1,%2
    34                              <3> [section headers]
    34 00000AAF [A30A0000]          <3>  dd vlink
    34                              <3> %%link:
    34                              <3> %2n:
    34                              <3> %xdefine vlink %%link
    34 00000AB3 06                  <3>  db (%%name-$-1)+imm
    34 00000AB4 6272616E6368        <3>  db %1
    34                              <3> %%name:
    34 00000ABA [B90E0000]          <3>  dd %2
    34                              <3> %xdefine imm 0
    34                              <3> 
    34                              <3> section list
    34 00000EB5 [B30A0000]          <3>  dd %%link
    34                              <2> %2:
    35 00000EB9 8B36                <1>   mov esi, [esi]            ;set ip = literl branch vector
    36                              <1>   next
    36 00000EBB E94BFEFFFF          <2>  jmp _next
    37                              <1> 
    38                              <1> ; ------------------------------------------------------------------------
    39                              <1> 
    40                              <1> ;       ( --- )
    41                              <1> 
    42                              <1> code 'doelse', doelse
    42                              <2>  header %1,%2
    42                              <3> [section headers]
    42 00000ABE [B30A0000]          <3>  dd vlink
    42                              <3> %%link:
    42                              <3> %2n:
    42                              <3> %xdefine vlink %%link
    42 00000AC2 06                  <3>  db (%%name-$-1)+imm
    42 00000AC3 646F656C7365        <3>  db %1
    42                              <3> %%name:
    42 00000AC9 [C40E0000]          <3>  dd %2
    42                              <3> %xdefine imm 0
    42                              <3> 
    42                              <3> section list
    42 00000EC0 [C20A0000]          <3>  dd %%link
    42                              <2> %2:
    43 00000EC4 EBF3                <1>   jmp branch
    44                              <1> 
    45                              <1> ; ------------------------------------------------------------------------
    46                              <1> ; unconditional branch
    47                              <1> 
    48                              <1> ;       ( --- )
    49                              <1> 
    50                              <1> code 'doagain', doagain
    50                              <2>  header %1,%2
    50                              <3> [section headers]
    50 00000ACD [C20A0000]          <3>  dd vlink
    50                              <3> %%link:
    50                              <3> %2n:
    50                              <3> %xdefine vlink %%link
    50 00000AD1 07                  <3>  db (%%name-$-1)+imm
    50 00000AD2 646F616761696E      <3>  db %1
    50                              <3> %%name:
    50 00000AD9 [CA0E0000]          <3>  dd %2
    50                              <3> %xdefine imm 0
    50                              <3> 
    50                              <3> section list
    50 00000EC6 [D10A0000]          <3>  dd %%link
    50                              <2> %2:
    51 00000ECA EBED                <1>   jmp branch
    52                              <1> 
    53                              <1> ; ------------------------------------------------------------------------
    54                              <1> ; unconditional branch
    55                              <1> 
    56                              <1> ;       ( --- )
    57                              <1> 
    58                              <1> code 'dorepeat', dorepeat
    58                              <2>  header %1,%2
    58                              <3> [section headers]
    58 00000ADD [D10A0000]          <3>  dd vlink
    58                              <3> %%link:
    58                              <3> %2n:
    58                              <3> %xdefine vlink %%link
    58 00000AE1 08                  <3>  db (%%name-$-1)+imm
    58 00000AE2 646F726570656174    <3>  db %1
    58                              <3> %%name:
    58 00000AEA [D00E0000]          <3>  dd %2
    58                              <3> %xdefine imm 0
    58                              <3> 
    58                              <3> section list
    58 00000ECC [E10A0000]          <3>  dd %%link
    58                              <2> %2:
    59 00000ED0 EBE7                <1>   jmp branch
    60                              <1> 
    61                              <1> ; ------------------------------------------------------------------------
    62                              <1> ; conditional branches within high level definition
    63                              <1> 
    64                              <1> ;       ( f1 --- )
    65                              <1> 
    66                              <1> code '?branch', qbranch
    66                              <2>  header %1,%2
    66                              <3> [section headers]
    66 00000AEE [E10A0000]          <3>  dd vlink
    66                              <3> %%link:
    66                              <3> %2n:
    66                              <3> %xdefine vlink %%link
    66 00000AF2 07                  <3>  db (%%name-$-1)+imm
    66 00000AF3 3F6272616E6368      <3>  db %1
    66                              <3> %%name:
    66 00000AFA [D60E0000]          <3>  dd %2
    66                              <3> %xdefine imm 0
    66                              <3> 
    66                              <3> section list
    66 00000ED2 [F20A0000]          <3>  dd %%link
    66                              <2> %2:
    67 00000ED6 85DB                <1>   test ebx, ebx             ; if its NOT zero go to branch code above
    68 00000ED8 5B                  <1>   pop ebx
    69 00000ED9 74DE                <1>   jz branch
    70 00000EDB 83C604              <1>   add esi, byte 4           ; else point IP past literal branch vector
    71                              <1>   next
    71 00000EDE E928FEFFFF          <2>  jmp _next
    72                              <1> 
    73                              <1> ; ------------------------------------------------------------------------
    74                              <1> 
    75                              <1> code 'doif', doif
    75                              <2>  header %1,%2
    75                              <3> [section headers]
    75 00000AFE [F20A0000]          <3>  dd vlink
    75                              <3> %%link:
    75                              <3> %2n:
    75                              <3> %xdefine vlink %%link
    75 00000B02 04                  <3>  db (%%name-$-1)+imm
    75 00000B03 646F6966            <3>  db %1
    75                              <3> %%name:
    75 00000B07 [E70E0000]          <3>  dd %2
    75                              <3> %xdefine imm 0
    75                              <3> 
    75                              <3> section list
    75 00000EE3 [020B0000]          <3>  dd %%link
    75                              <2> %2:
    76 00000EE7 EBED                <1>   jmp qbranch
    77                              <1> 
    78                              <1> ; ------------------------------------------------------------------------
    79                              <1> 
    80                              <1> code '?while', qwhile
    80                              <2>  header %1,%2
    80                              <3> [section headers]
    80 00000B0B [020B0000]          <3>  dd vlink
    80                              <3> %%link:
    80                              <3> %2n:
    80                              <3> %xdefine vlink %%link
    80 00000B0F 06                  <3>  db (%%name-$-1)+imm
    80 00000B10 3F7768696C65        <3>  db %1
    80                              <3> %%name:
    80 00000B16 [ED0E0000]          <3>  dd %2
    80                              <3> %xdefine imm 0
    80                              <3> 
    80                              <3> section list
    80 00000EE9 [0F0B0000]          <3>  dd %%link
    80                              <2> %2:
    81 00000EED EBE7                <1>   jmp qbranch
    82                              <1> 
    83                              <1> ;-------------------------------------------------------------------------
    84                              <1> 
    85                              <1> code '?until', quntil
    85                              <2>  header %1,%2
    85                              <3> [section headers]
    85 00000B1A [0F0B0000]          <3>  dd vlink
    85                              <3> %%link:
    85                              <3> %2n:
    85                              <3> %xdefine vlink %%link
    85 00000B1E 06                  <3>  db (%%name-$-1)+imm
    85 00000B1F 3F756E74696C        <3>  db %1
    85                              <3> %%name:
    85 00000B25 [F30E0000]          <3>  dd %2
    85                              <3> %xdefine imm 0
    85                              <3> 
    85                              <3> section list
    85 00000EEF [1E0B0000]          <3>  dd %%link
    85                              <2> %2:
    86 00000EF3 EBE1                <1>   jmp qbranch
    87                              <1> 
    88                              <1> ; ------------------------------------------------------------------------
    89                              <1> ; conditional branches within high level definition
    90                              <1> 
    91                              <1> ;       ( f1 --- )
    92                              <1> 
    93                              <1> code '0branch', zbranch
    93                              <2>  header %1,%2
    93                              <3> [section headers]
    93 00000B29 [1E0B0000]          <3>  dd vlink
    93                              <3> %%link:
    93                              <3> %2n:
    93                              <3> %xdefine vlink %%link
    93 00000B2D 07                  <3>  db (%%name-$-1)+imm
    93 00000B2E 306272616E6368      <3>  db %1
    93                              <3> %%name:
    93 00000B35 [F90E0000]          <3>  dd %2
    93                              <3> %xdefine imm 0
    93                              <3> 
    93                              <3> section list
    93 00000EF5 [2D0B0000]          <3>  dd %%link
    93                              <2> %2:
    94 00000EF9 85DB                <1>   test ebx, ebx             ; is f1 true
    95 00000EFB 5B                  <1>   pop ebx                   ; this does not modify psw so test results
    96 00000EFC 75BB                <1>   jnz short branch          ; are still actionable
    97 00000EFE 83C604              <1>   add esi, byte 4           ; branch if f1 is true - else skip banch vector
    98                              <1>   next
    98 00000F01 E905FEFFFF          <2>  jmp _next
    99                              <1> 
   100                              <1> ; ------------------------------------------------------------------------
   101                              <1> 
   102                              <1> ;       ( n1 --- )
   103                              <1> 
   104                              <1> code 'docase', docase
   104                              <2>  header %1,%2
   104                              <3> [section headers]
   104 00000B39 [2D0B0000]          <3>  dd vlink
   104                              <3> %%link:
   104                              <3> %2n:
   104                              <3> %xdefine vlink %%link
   104 00000B3D 06                  <3>  db (%%name-$-1)+imm
   104 00000B3E 646F63617365        <3>  db %1
   104                              <3> %%name:
   104 00000B44 [0A0F0000]          <3>  dd %2
   104                              <3> %xdefine imm 0
   104                              <3> 
   104                              <3> section list
   104 00000F06 [3D0B0000]          <3>  dd %%link
   104                              <2> %2:
   105 00000F0A AD                  <1>   lodsd                     ; case exit point
   106 00000F0B 89C7                <1>   mov edi, eax
   107 00000F0D AD                  <1>   lodsd                     ; default vector
   108 00000F0E 89C2                <1>   mov edx, eax
   109 00000F10 AD                  <1>   lodsd
   110 00000F11 89C1                <1>   mov ecx, eax              ; count
   111                              <1> 
   112                              <1> .L0:
   113 00000F13 AD                  <1>   lodsd                     ; get next compiled case option
   114 00000F14 39D8                <1>   cmp eax, ebx              ; same as n1?
   115 00000F16 7411                <1>   jz .L1
   116 00000F18 AD                  <1>   lodsd                     ; no, skip option vector
   117 00000F19 E2F8                <1>   loop .L0
   118 00000F1B 89D0                <1>   mov eax, edx              ; option not found, select default vector
   119 00000F1D 09C0                <1>   or eax, eax               ; was default vector specified?
   120 00000F1F 7509                <1>   jne .L2
   121 00000F21 89FE                <1>   mov esi, edi              ; none of the above, exit case statement
   122 00000F23 5B                  <1>   pop ebx                   ; cache new top of stack
   123                              <1>   next
   123 00000F24 E9E2FDFFFF          <2>  jmp _next
   124                              <1> 
   125                              <1> .L1:
   126 00000F29 AD                  <1>   lodsd                     ; get case option vector
   127                              <1> .L2:                        ; eax has selected vector (can be default)
   128 00000F2A 89FE                <1>   mov esi, edi              ; point esi at exit point
   129 00000F2C 5B                  <1>   pop ebx                   ; cache new top of stack
   130 00000F2D FFE0                <1>   jmp eax                   ; execute selected vector
   131                              <1> 
   132                              <1> ; ------------------------------------------------------------------------
   133                              <1> ; clean do loop stuff off return stack
   134                              <1> 
   135                              <1> code 'undo',undo
   135                              <2>  header %1,%2
   135                              <3> [section headers]
   135 00000B48 [3D0B0000]          <3>  dd vlink
   135                              <3> %%link:
   135                              <3> %2n:
   135                              <3> %xdefine vlink %%link
   135 00000B4C 04                  <3>  db (%%name-$-1)+imm
   135 00000B4D 756E646F            <3>  db %1
   135                              <3> %%name:
   135 00000B51 [330F0000]          <3>  dd %2
   135                              <3> %xdefine imm 0
   135                              <3> 
   135                              <3> section list
   135 00000F2F [4C0B0000]          <3>  dd %%link
   135                              <2> %2:
   136 00000F33 83C50C              <1>   add ebp, byte 12          ; do placed 3 items on return stack. drop them
   137                              <1>   next
   137 00000F36 E9D0FDFFFF          <2>  jmp _next
   138                              <1> 
   139                              <1> ; ------------------------------------------------------------------------
   140                              <1> ; increment loop index and loop back if not at limit
   141                              <1> 
   142                              <1> code '(loop)', ploop
   142                              <2>  header %1,%2
   142                              <3> [section headers]
   142 00000B55 [4C0B0000]          <3>  dd vlink
   142                              <3> %%link:
   142                              <3> %2n:
   142                              <3> %xdefine vlink %%link
   142 00000B59 06                  <3>  db (%%name-$-1)+imm
   142 00000B5A 286C6F6F7029        <3>  db %1
   142                              <3> %%name:
   142 00000B60 [3F0F0000]          <3>  dd %2
   142                              <3> %xdefine imm 0
   142                              <3> 
   142                              <3> section list
   142 00000F3B [590B0000]          <3>  dd %%link
   142                              <2> %2:
   143 00000F3F FF4500              <1>   inc dword [ebp]           ; increment loop index. OV will set on limit
   144 00000F42 0F8171FFFFFF        <1>   jno branch                ; if not at limit branch back in definition
   145                              <1> .L0:
   146 00000F48 83C604              <1>   add esi, byte 4           ; reached limit, skip past branch vector and...
   147 00000F4B EBE6                <1>   jmp short undo            ; and undo loop
   148                              <1> 
   149                              <1> ; ------------------------------------------------------------------------
   150                              <1> ; add N to loop index and loop back if not at limit
   151                              <1> 
   152                              <1> ;       ( n --- )
   153                              <1> 
   154                              <1> code '(+loop)', pploop
   154                              <2>  header %1,%2
   154                              <3> [section headers]
   154 00000B64 [590B0000]          <3>  dd vlink
   154                              <3> %%link:
   154                              <3> %2n:
   154                              <3> %xdefine vlink %%link
   154 00000B68 07                  <3>  db (%%name-$-1)+imm
   154 00000B69 282B6C6F6F7029      <3>  db %1
   154                              <3> %%name:
   154 00000B70 [510F0000]          <3>  dd %2
   154                              <3> %xdefine imm 0
   154                              <3> 
   154                              <3> section list
   154 00000F4D [680B0000]          <3>  dd %%link
   154                              <2> %2:
   155 00000F51 015D00              <1>   add dword [ebp], ebx      ; add it to loop index
   156 00000F54 5B                  <1>   pop ebx
   157 00000F55 0F815EFFFFFF        <1>   jno branch                ; if not at limit branch back in definition
   158 00000F5B 70EB                <1>   jo ploop.L0               ; else clean up loop stuff and exit loop
   159                              <1> 
   160                              <1> ; ------------------------------------------------------------------------
   161                              <1> ; initiate a do loop
   162                              <1> 
   163                              <1> ;       ( end start --- )
   164                              <1> 
   165                              <1> code '(do)',pdo
   165                              <2>  header %1,%2
   165                              <3> [section headers]
   165 00000B74 [680B0000]          <3>  dd vlink
   165                              <3> %%link:
   165                              <3> %2n:
   165                              <3> %xdefine vlink %%link
   165 00000B78 04                  <3>  db (%%name-$-1)+imm
   165 00000B79 28646F29            <3>  db %1
   165                              <3> %%name:
   165 00000B7D [610F0000]          <3>  dd %2
   165                              <3> %xdefine imm 0
   165                              <3> 
   165                              <3> section list
   165 00000F5D [780B0000]          <3>  dd %%link
   165                              <2> %2:
   166 00000F61 5A                  <1>   pop edx                   ; get loop start index
   167                              <1> .L0:
   168 00000F62 87EC                <1>   xchg ebp, esp             ; point esp at return stack
   169 00000F64 AD                  <1>   lodsd                     ; get compiled in loop exit point
   170 00000F65 50                  <1>   push eax                  ; put loop exit point on return stack
   171 00000F66 81C200000080        <1>   add edx, $80000000        ; fudge loop index
   172 00000F6C 29D3                <1>   sub ebx, edx
   173 00000F6E 52                  <1>   push edx                  ; push fudged loop indicies onto return stack
   174 00000F6F 53                  <1>   push ebx
   175 00000F70 87EC                <1>   xchg ebp, esp             ; point esp back at parameter stack
   176 00000F72 5B                  <1>   pop ebx                   ; cache new top of stack iten
   177                              <1>   next
   177 00000F73 E993FDFFFF          <2>  jmp _next
   178                              <1> 
   179                              <1> ; ------------------------------------------------------------------------
   180                              <1> ; initiate a do loop if start index != limit
   181                              <1> 
   182                              <1> ;       ( n1 n2 --- )
   183                              <1> 
   184                              <1> code '(?do)', pqdo
   184                              <2>  header %1,%2
   184                              <3> [section headers]
   184 00000B81 [780B0000]          <3>  dd vlink
   184                              <3> %%link:
   184                              <3> %2n:
   184                              <3> %xdefine vlink %%link
   184 00000B85 05                  <3>  db (%%name-$-1)+imm
   184 00000B86 283F646F29          <3>  db %1
   184                              <3> %%name:
   184 00000B8B [7C0F0000]          <3>  dd %2
   184                              <3> %xdefine imm 0
   184                              <3> 
   184                              <3> section list
   184 00000F78 [850B0000]          <3>  dd %%link
   184                              <2> %2:
   185 00000F7C 5A                  <1>   pop edx                   ; get limit
   186 00000F7D 39D3                <1>   cmp ebx, edx              ; same ?
   187 00000F7F 75E1                <1>   jne pdo.L0                ; if not then go ahead an init loop
   188 00000F81 5B                  <1>   pop ebx
   189 00000F82 E932FFFFFF          <1>   jmp branch
   190                              <1> 
   191                              <1> ; ------------------------------------------------------------------------
   192                              <1> ; leave do loop
   193                              <1> 
   194                              <1> code '(leave)', pleave
   194                              <2>  header %1,%2
   194                              <3> [section headers]
   194 00000B8F [850B0000]          <3>  dd vlink
   194                              <3> %%link:
   194                              <3> %2n:
   194                              <3> %xdefine vlink %%link
   194 00000B93 07                  <3>  db (%%name-$-1)+imm
   194 00000B94 286C6561766529      <3>  db %1
   194                              <3> %%name:
   194 00000B9B [8B0F0000]          <3>  dd %2
   194                              <3> %xdefine imm 0
   194                              <3> 
   194                              <3> section list
   194 00000F87 [930B0000]          <3>  dd %%link
   194                              <2> %2:
   195 00000F8B 8B7508              <1>   mov esi, dword [ebp+8]    ; set ip to loop exit point
   196 00000F8E EBA3                <1>   jmp short undo
   197                              <1> 
   198                              <1> ; ------------------------------------------------------------------------
   199                              <1> ; leave loop if flag is true
   200                              <1> 
   201                              <1> ;       ( f1 --- )
   202                              <1> 
   203                              <1> code '(?leave)', pqleave
   203                              <2>  header %1,%2
   203                              <3> [section headers]
   203 00000B9F [930B0000]          <3>  dd vlink
   203                              <3> %%link:
   203                              <3> %2n:
   203                              <3> %xdefine vlink %%link
   203 00000BA3 08                  <3>  db (%%name-$-1)+imm
   203 00000BA4 283F6C6561766529    <3>  db %1
   203                              <3> %%name:
   203 00000BAC [940F0000]          <3>  dd %2
   203                              <3> %xdefine imm 0
   203                              <3> 
   203                              <3> section list
   203 00000F90 [A30B0000]          <3>  dd %%link
   203                              <2> %2:
   204 00000F94 09DB                <1>   or ebx, ebx               ; f1 is true/false ?
   205 00000F96 5B                  <1>   pop ebx
   206 00000F97 75F2                <1>   jnz short pleave
   207                              <1>   next
   207 00000F99 E96DFDFFFF          <2>  jmp _next
   208                              <1> 
   209                              <1> ; ------------------------------------------------------------------------
   210                              <1> 
   211                              <1> ;     ( n1 --- )
   212                              <1> 
   213                              <1> code 'dofor', dofor
   213                              <2>  header %1,%2
   213                              <3> [section headers]
   213 00000BB0 [A30B0000]          <3>  dd vlink
   213                              <3> %%link:
   213                              <3> %2n:
   213                              <3> %xdefine vlink %%link
   213 00000BB4 05                  <3>  db (%%name-$-1)+imm
   213 00000BB5 646F666F72          <3>  db %1
   213                              <3> %%name:
   213 00000BBA [A20F0000]          <3>  dd %2
   213                              <3> %xdefine imm 0
   213                              <3> 
   213                              <3> section list
   213 00000F9E [B40B0000]          <3>  dd %%link
   213                              <2> %2:
   214 00000FA2 83FB00              <1>   cmp ebx, 0                ; zero itteration loop?
   215 00000FA5 7407                <1>   jz .L0
   216 00000FA7 4B                  <1>   dec ebx                   ; zero base the loop index
   217 00000FA8 AD                  <1>   lodsd                     ; skip loop exit branch vector
   218 00000FA9 E933F4FFFF          <1>   jmp tor
   219                              <1> .L0:
   220 00000FAE 5B                  <1>   pop ebx                   ; pop new top of stack
   221 00000FAF E905FFFFFF          <1>   jmp branch                ; branch to loop end
   222                              <1> 
   223                              <1> ; ------------------------------------------------------------------------
   224                              <1> ; i refuse to call this word "next" because "next" is special!
   225                              <1> 
   226                              <1> ;       ( --- )
   227                              <1> 
   228                              <1> code '(nxt)', pnxt
   228                              <2>  header %1,%2
   228                              <3> [section headers]
   228 00000BBE [B40B0000]          <3>  dd vlink
   228                              <3> %%link:
   228                              <3> %2n:
   228                              <3> %xdefine vlink %%link
   228 00000BC2 05                  <3>  db (%%name-$-1)+imm
   228 00000BC3 286E787429          <3>  db %1
   228                              <3> %%name:
   228 00000BC8 [B80F0000]          <3>  dd %2
   228                              <3> %xdefine imm 0
   228                              <3> 
   228                              <3> section list
   228 00000FB4 [C20B0000]          <3>  dd %%link
   228                              <2> %2:
   229 00000FB8 FF4D00              <1>   dec dword [ebp]           ; decrement index
   230 00000FBB 837D00FF            <1>   cmp dword [ebp], -1       ; did index decrement through zero?
   231 00000FBF 0F85F4FEFFFF        <1>   jnz branch                ; no - loop back
   232                              <1> 
   233 00000FC5 83C504              <1>   add ebp, byte 4           ; yes - clean return stack
   234 00000FC8 83C604              <1>   add esi, byte 4           ; skip branch vector
   235                              <1>   next
   235 00000FCB E93BFDFFFF          <2>  jmp _next
   236                              <1> 
   237                              <1> ; ------------------------------------------------------------------------
   238                              <1> 
   239                              <1> ;     ( ... cfa n1 --- ??? )
   240                              <1> 
   241                              <1> colon "(rep)", prep
   241                              <2>  header %1,%2
   241                              <3> [section headers]
   241 00000BCC [C20B0000]          <3>  dd vlink
   241                              <3> %%link:
   241                              <3> %2n:
   241                              <3> %xdefine vlink %%link
   241 00000BD0 05                  <3>  db (%%name-$-1)+imm
   241 00000BD1 2872657029          <3>  db %1
   241                              <3> %%name:
   241 00000BD6 [D40F0000]          <3>  dd %2
   241                              <3> %xdefine imm 0
   241                              <3> 
   241                              <3> section list
   241 00000FD0 [D00B0000]          <3>  dd %%link
   241                              <2> %2:
   241 00000FD4 E88FFDFFFF          <2>  call nest
   241                              <2> %2_b:
   242 00000FD9 [18030000]          <1>   dd swap
   243 00000FDD [A20F0000]-         <1>   dd dofor, .L2
   243 00000FE1 [F90F0000]          <1>
   244                              <1> .L1:
   245 00000FE5 [21040000]-         <1>   dd duptor, execute
   245 00000FE9 [DD0D0000]          <1>
   246 00000FED [01040000]          <1>   dd rto
   247 00000FF1 [B80F0000]-         <1>   dd pnxt, .L1
   247 00000FF5 [E50F0000]          <1>
   248                              <1> .L2:
   249 00000FF9 [3C030000]          <1>   dd drop
   250 00000FFD [740D0000]          <1>   dd exit
   251                              <1> 
   252                              <1> ; ------------------------------------------------------------------------
   253                              <1> 
   254                              <1> colon "dorep", dorep
   254                              <2>  header %1,%2
   254                              <3> [section headers]
   254 00000BDA [D00B0000]          <3>  dd vlink
   254                              <3> %%link:
   254                              <3> %2n:
   254                              <3> %xdefine vlink %%link
   254 00000BDE 05                  <3>  db (%%name-$-1)+imm
   254 00000BDF 646F726570          <3>  db %1
   254                              <3> %%name:
   254 00000BE4 [05100000]          <3>  dd %2
   254                              <3> %xdefine imm 0
   254                              <3> 
   254                              <3> section list
   254 00001001 [DE0B0000]          <3>  dd %%link
   254                              <2> %2:
   254 00001005 E85EFDFFFF          <2>  call nest
   254                              <2> %2_b:
   255 0000100A [4C1D0000]-         <1>  dd param, prep
   255 0000100E [D40F0000]          <1>
   256 00001012 [740D0000]          <1>  dd exit
   257                              <1> 
   258                              <1> ; ------------------------------------------------------------------------
   259                              <1> ; get outermost loop index
   260                              <1> 
   261                              <1> code 'i', i
   261                              <2>  header %1,%2
   261                              <3> [section headers]
   261 00000BE8 [DE0B0000]          <3>  dd vlink
   261                              <3> %%link:
   261                              <3> %2n:
   261                              <3> %xdefine vlink %%link
   261 00000BEC 01                  <3>  db (%%name-$-1)+imm
   261 00000BED 69                  <3>  db %1
   261                              <3> %%name:
   261 00000BEE [1A100000]          <3>  dd %2
   261                              <3> %xdefine imm 0
   261                              <3> 
   261                              <3> section list
   261 00001016 [EC0B0000]          <3>  dd %%link
   261                              <2> %2:
   262 0000101A 31C0                <1>   xor eax, eax              ; calculate i from r stack [+ 0] and [+ 4]
   263                              <1> .L0:
   264 0000101C 53                  <1>   push ebx                  ; flush cached top of stack
   265 0000101D 8D0428              <1>   lea eax, [eax+ebp]        ; point eax at requested index/limit
   266 00001020 8B18                <1>   mov ebx, [eax]            ; get current index (fudged)
   267 00001022 035804              <1>   add ebx, [eax+4]          ; defudge by adding in fudged limit
   268                              <1>   next
   268 00001025 E9E1FCFFFF          <2>  jmp _next
   269                              <1> 
   270                              <1> ; ------------------------------------------------------------------------
   271                              <1> ; get second inner loop index
   272                              <1> 
   273                              <1> code 'j', j
   273                              <2>  header %1,%2
   273                              <3> [section headers]
   273 00000BF2 [EC0B0000]          <3>  dd vlink
   273                              <3> %%link:
   273                              <3> %2n:
   273                              <3> %xdefine vlink %%link
   273 00000BF6 01                  <3>  db (%%name-$-1)+imm
   273 00000BF7 6A                  <3>  db %1
   273                              <3> %%name:
   273 00000BF8 [2E100000]          <3>  dd %2
   273                              <3> %xdefine imm 0
   273                              <3> 
   273                              <3> section list
   273 0000102A [F60B0000]          <3>  dd %%link
   273                              <2> %2:
   274 0000102E B80C000000          <1>   mov eax, 12               ;calculate j from r stack [+ 12] and [+ 16]
   275 00001033 EBE7                <1>   jmp short i.L0
   276                              <1> 
   277                              <1> ;-------------------------------------------------------------------------
   278                              <1> ;get third inner loop index
   279                              <1> 
   280                              <1> code 'k', k
   280                              <2>  header %1,%2
   280                              <3> [section headers]
   280 00000BFC [F60B0000]          <3>  dd vlink
   280                              <3> %%link:
   280                              <3> %2n:
   280                              <3> %xdefine vlink %%link
   280 00000C00 01                  <3>  db (%%name-$-1)+imm
   280 00000C01 6B                  <3>  db %1
   280                              <3> %%name:
   280 00000C02 [39100000]          <3>  dd %2
   280                              <3> %xdefine imm 0
   280                              <3> 
   280                              <3> section list
   280 00001035 [000C0000]          <3>  dd %%link
   280                              <2> %2:
   281 00001039 B818000000          <1>   mov eax, 24                ;calculate k from r stack [+ 24] and [+ 28]
   282 0000103E EBDC                <1>   jmp short i.L0
   283                              <1> 
   284                              <1> ;=========================================================================
   117                                    %include "io.s"           ; console i/o etc
     1                              <1> ; io.1      - x4 i/o words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _defer_ 'emit', emit, pemit
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 00000C06 [000C0000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 00000C0A 04                  <4>  db (%%name-$-1)+imm
     6 00000C0B 656D6974            <4>  db %1
     6                              <4> %%name:
     6 00000C0F [44100000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 00001040 [0A0C0000]          <4>  dd %%link
     6                              <3> %2:
     6 00001044 E880FDFFFF          <2>  call dodefer
     6                              <2> %2_b:
     6 00001049 [B9100000]          <2>  dd %3
     7                              <1>   _defer_ 'key', key, pkey
     7                              <2>  code %1,%2
     7                              <3>  header %1,%2
     7                              <4> [section headers]
     7 00000C13 [0A0C0000]          <4>  dd vlink
     7                              <4> %%link:
     7                              <4> %2n:
     7                              <4> %xdefine vlink %%link
     7 00000C17 03                  <4>  db (%%name-$-1)+imm
     7 00000C18 6B6579              <4>  db %1
     7                              <4> %%name:
     7 00000C1B [51100000]          <4>  dd %2
     7                              <4> %xdefine imm 0
     7                              <4> 
     7                              <4> section list
     7 0000104D [170C0000]          <4>  dd %%link
     7                              <3> %2:
     7 00001051 E873FDFFFF          <2>  call dodefer
     7                              <2> %2_b:
     7 00001056 [27110000]          <2>  dd %3
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------------------
    10                              <1> 
    11                              <1>   _constant_ 'bs', bs, 8         ; a backspace
    11                              <2>  code %1,%2
    11                              <3>  header %1,%2
    11                              <4> [section headers]
    11 00000C1F [170C0000]          <4>  dd vlink
    11                              <4> %%link:
    11                              <4> %2n:
    11                              <4> %xdefine vlink %%link
    11 00000C23 02                  <4>  db (%%name-$-1)+imm
    11 00000C24 6273                <4>  db %1
    11                              <4> %%name:
    11 00000C26 [5E100000]          <4>  dd %2
    11                              <4> %xdefine imm 0
    11                              <4> 
    11                              <4> section list
    11 0000105A [230C0000]          <4>  dd %%link
    11                              <3> %2:
    11 0000105E E84CFDFFFF          <2>  call doconstant
    11                              <2> %2_b:
    11 00001063 08000000            <2>  dd %3
    12                              <1>   _constant_ 'bl', bl_, 32       ; a space
    12                              <2>  code %1,%2
    12                              <3>  header %1,%2
    12                              <4> [section headers]
    12 00000C2A [230C0000]          <4>  dd vlink
    12                              <4> %%link:
    12                              <4> %2n:
    12                              <4> %xdefine vlink %%link
    12 00000C2E 02                  <4>  db (%%name-$-1)+imm
    12 00000C2F 626C                <4>  db %1
    12                              <4> %%name:
    12 00000C31 [6B100000]          <4>  dd %2
    12                              <4> %xdefine imm 0
    12                              <4> 
    12                              <4> section list
    12 00001067 [2E0C0000]          <4>  dd %%link
    12                              <3> %2:
    12 0000106B E83FFDFFFF          <2>  call doconstant
    12                              <2> %2_b:
    12 00001070 20000000            <2>  dd %3
    13                              <1> 
    14                              <1>   _variable_ '#out', numout, 0   ; # characters thus far emmited on line
    14                              <2>  code %1,%2
    14                              <3>  header %1,%2
    14                              <4> [section headers]
    14 00000C35 [2E0C0000]          <4>  dd vlink
    14                              <4> %%link:
    14                              <4> %2n:
    14                              <4> %xdefine vlink %%link
    14 00000C39 04                  <4>  db (%%name-$-1)+imm
    14 00000C3A 236F7574            <4>  db %1
    14                              <4> %%name:
    14 00000C3E [78100000]          <4>  dd %2
    14                              <4> %xdefine imm 0
    14                              <4> 
    14                              <4> section list
    14 00001074 [390C0000]          <4>  dd %%link
    14                              <3> %2:
    14 00001078 E840FDFFFF          <2>  call dovariable
    14                              <2> %2_b:
    14 0000107D 00000000            <2>  dd %3
    15                              <1>   _variable_ '#line', numline, 0 ; how far down the screen we are
    15                              <2>  code %1,%2
    15                              <3>  header %1,%2
    15                              <4> [section headers]
    15 00000C42 [390C0000]          <4>  dd vlink
    15                              <4> %%link:
    15                              <4> %2n:
    15                              <4> %xdefine vlink %%link
    15 00000C46 05                  <4>  db (%%name-$-1)+imm
    15 00000C47 236C696E65          <4>  db %1
    15                              <4> %%name:
    15 00000C4C [85100000]          <4>  dd %2
    15                              <4> %xdefine imm 0
    15                              <4> 
    15                              <4> section list
    15 00001081 [460C0000]          <4>  dd %%link
    15                              <3> %2:
    15 00001085 E833FDFFFF          <2>  call dovariable
    15                              <2> %2_b:
    15 0000108A 00000000            <2>  dd %3
    16                              <1> 
    17                              <1>   _var_ 'fdout', fdout, 1        ; defaults file descriptor for emit
    17                              <2>  code %1,%2
    17                              <3>  header %1,%2
    17                              <4> [section headers]
    17 00000C50 [460C0000]          <4>  dd vlink
    17                              <4> %%link:
    17                              <4> %2n:
    17                              <4> %xdefine vlink %%link
    17 00000C54 05                  <4>  db (%%name-$-1)+imm
    17 00000C55 66646F7574          <4>  db %1
    17                              <4> %%name:
    17 00000C5A [92100000]          <4>  dd %2
    17                              <4> %xdefine imm 0
    17                              <4> 
    17                              <4> section list
    17 0000108E [540C0000]          <4>  dd %%link
    17                              <3> %2:
    17 00001092 E818FDFFFF          <2>  call doconstant
    17                              <2> %2_b:
    17 00001097 01000000            <2>  dd %3
    18                              <1> 
    19                              <1> ; ------------------------------------------------------------------------
    20                              <1> ; these constants are patched by an extension to reflect reality
    21                              <1> 
    22                              <1>   _constant_ 'rows', rows, 25    ; default terminal size to 80 by 25
    22                              <2>  code %1,%2
    22                              <3>  header %1,%2
    22                              <4> [section headers]
    22 00000C5E [540C0000]          <4>  dd vlink
    22                              <4> %%link:
    22                              <4> %2n:
    22                              <4> %xdefine vlink %%link
    22 00000C62 04                  <4>  db (%%name-$-1)+imm
    22 00000C63 726F7773            <4>  db %1
    22                              <4> %%name:
    22 00000C67 [9F100000]          <4>  dd %2
    22                              <4> %xdefine imm 0
    22                              <4> 
    22                              <4> section list
    22 0000109B [620C0000]          <4>  dd %%link
    22                              <3> %2:
    22 0000109F E80BFDFFFF          <2>  call doconstant
    22                              <2> %2_b:
    22 000010A4 19000000            <2>  dd %3
    23                              <1>   _constant_ 'cols', cols, 80
    23                              <2>  code %1,%2
    23                              <3>  header %1,%2
    23                              <4> [section headers]
    23 00000C6B [620C0000]          <4>  dd vlink
    23                              <4> %%link:
    23                              <4> %2n:
    23                              <4> %xdefine vlink %%link
    23 00000C6F 04                  <4>  db (%%name-$-1)+imm
    23 00000C70 636F6C73            <4>  db %1
    23                              <4> %%name:
    23 00000C74 [AC100000]          <4>  dd %2
    23                              <4> %xdefine imm 0
    23                              <4> 
    23                              <4> section list
    23 000010A8 [6F0C0000]          <4>  dd %%link
    23                              <3> %2:
    23 000010AC E8FEFCFFFF          <2>  call doconstant
    23                              <2> %2_b:
    23 000010B1 50000000            <2>  dd %3
    24                              <1> 
    25                              <1> ; ------------------------------------------------------------------------
    26                              <1> ; output a character to stdout
    27                              <1> 
    28                              <1> ;       ( c1 --- )
    29                              <1> 
    30                              <1> colon '(emit)', pemit
    30                              <2>  header %1,%2
    30                              <3> [section headers]
    30 00000C78 [6F0C0000]          <3>  dd vlink
    30                              <3> %%link:
    30                              <3> %2n:
    30                              <3> %xdefine vlink %%link
    30 00000C7C 06                  <3>  db (%%name-$-1)+imm
    30 00000C7D 28656D697429        <3>  db %1
    30                              <3> %%name:
    30 00000C83 [B9100000]          <3>  dd %2
    30                              <3> %xdefine imm 0
    30                              <3> 
    30                              <3> section list
    30 000010B5 [7C0C0000]          <3>  dd %%link
    30                              <2> %2:
    30 000010B9 E8AAFCFFFF          <2>  call nest
    30                              <2> %2_b:
    31 000010BE [48040000]          <1>   dd spfetch                ; point to character to emit
    32 000010C2 [92100000]-         <1>   dd fdout, swap            ; normally stdout
    32 000010C6 [18030000]          <1>
    33 000010CA [D00D0000]01000000  <1>   dd plit, 1                ; writing one character only to stdout
    34 000010D2 [4F020000]-         <1>   dd sys_write, drop2       ; discard return value and character
    34 000010D6 [46030000]          <1>
    35 000010DA [78100000]-         <1>   dd numout, incr
    35 000010DE [5D060000]          <1>
    36 000010E2 [740D0000]          <1>   dd exit
    37                              <1> 
    38                              <1> ; ------------------------------------------------------------------------
    39                              <1> ; uses qkfd pollfd structure to poll standardin
    40                              <1> 
    41                              <1> ;       ( --- f1 )
    42                              <1> 
    43                              <1> colon 'key?', keyq
    43                              <2>  header %1,%2
    43                              <3> [section headers]
    43 00000C87 [7C0C0000]          <3>  dd vlink
    43                              <3> %%link:
    43                              <3> %2n:
    43                              <3> %xdefine vlink %%link
    43 00000C8B 04                  <3>  db (%%name-$-1)+imm
    43 00000C8C 6B65793F            <3>  db %1
    43                              <3> %%name:
    43 00000C90 [EA100000]          <3>  dd %2
    43                              <3> %xdefine imm 0
    43                              <3> 
    43                              <3> section list
    43 000010E6 [8B0C0000]          <3>  dd %%link
    43                              <2> %2:
    43 000010EA E879FCFFFF          <2>  call nest
    43                              <2> %2_b:
    44 000010EF [D00D0000]00000000  <1>   dd plit, 0                ; timeout in ms
    45 000010F7 [D00D0000]01000000  <1>   dd plit, 1                ; we only have one pollfd structure
    46 000010FF [D00D0000]-         <1>   dd plit, .L0              ; at this address
    46 00001103 [1B110000]          <1>
    47 00001107 [91020000]          <1>   dd sys_poll
    48 0000110B [D00D0000]01000000- <1>   dd plit, 1, equals        ; ok i know this is bad but - meh
    48 00001113 [C0080000]          <1>
    49 00001117 [740D0000]          <1>   dd exit
    50                              <1> .L0:
    51 0000111B 00000000            <1>   dd 0                      ; stdin file handle
    52 0000111F 0100                <1>   dw 1                      ; want to know when data is there to read
    53 00001121 0000                <1>   dw 0                      ; returned events placed here
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------------------
    56                              <1> ; wait for data to become available on stdin then read stdin
    57                              <1> 
    58                              <1> ;       ( --- c1 )
    59                              <1> 
    60                              <1> colon '(key)', pkey
    60                              <2>  header %1,%2
    60                              <3> [section headers]
    60 00000C94 [8B0C0000]          <3>  dd vlink
    60                              <3> %%link:
    60                              <3> %2n:
    60                              <3> %xdefine vlink %%link
    60 00000C98 05                  <3>  db (%%name-$-1)+imm
    60 00000C99 286B657929          <3>  db %1
    60                              <3> %%name:
    60 00000C9E [27110000]          <3>  dd %2
    60                              <3> %xdefine imm 0
    60                              <3> 
    60                              <3> section list
    60 00001123 [980C0000]          <3>  dd %%link
    60                              <2> %2:
    60 00001127 E83CFCFFFF          <2>  call nest
    60                              <2> %2_b:
    61 0000112C [D00D0000]00000000  <1>   dd plit, 0                ; create read buffer
    62 00001134 [48040000]          <1>   dd spfetch                ; point at it :)
    63 00001138 [D00D0000]01000000- <1>   dd plit, 1, swap          ; read one character
    63 00001140 [18030000]          <1>
    64 00001144 [D00D0000]00000000  <1>   dd plit, 0                ; from stdin
    65 0000114C [44020000]-         <1>   dd sys_read, qexit        ; return if there was no error
    65 00001150 [800D0000]          <1>
    66                              <1> 
    67 00001154 [86000000]-         <1>   dd intty, qexit           ; there was an error. if stdin is not on a tty
    67 00001158 [800D0000]          <1>
    68 0000115C [600E0000]          <1>   dd bye                    ; i.e. we are running from a #! script
    69 00001160 [740D0000]          <1>   dd exit                   ; then abort script
    70                              <1> 
    71                              <1> ; ------------------------------------------------------------------------
    72                              <1> ; output string of length n1 at a1
    73                              <1> 
    74                              <1> ;     ( a1 --- a1` )
    75                              <1> 
    76                              <1> colon "(type)", ptype
    76                              <2>  header %1,%2
    76                              <3> [section headers]
    76 00000CA2 [980C0000]          <3>  dd vlink
    76                              <3> %%link:
    76                              <3> %2n:
    76                              <3> %xdefine vlink %%link
    76 00000CA6 06                  <3>  db (%%name-$-1)+imm
    76 00000CA7 287479706529        <3>  db %1
    76                              <3> %%name:
    76 00000CAD [68110000]          <3>  dd %2
    76                              <3> %xdefine imm 0
    76                              <3> 
    76                              <3> section list
    76 00001164 [A60C0000]          <3>  dd %%link
    76                              <2> %2:
    76 00001168 E8FBFBFFFF          <2>  call nest
    76                              <2> %2_b:
    77 0000116D [D7050000]-         <1>   dd count, emit
    77 00001171 [44100000]          <1>
    78 00001175 [740D0000]          <1>   dd exit
    79                              <1> 
    80                              <1> ; ------------------------------------------------------------------------
    81                              <1> 
    82                              <1> ;     ( a1 n1 --- )
    83                              <1> 
    84                              <1> colon "type", type
    84                              <2>  header %1,%2
    84                              <3> [section headers]
    84 00000CB1 [A60C0000]          <3>  dd vlink
    84                              <3> %%link:
    84                              <3> %2n:
    84                              <3> %xdefine vlink %%link
    84 00000CB5 04                  <3>  db (%%name-$-1)+imm
    84 00000CB6 74797065            <3>  db %1
    84                              <3> %%name:
    84 00000CBA [7D110000]          <3>  dd %2
    84                              <3> %xdefine imm 0
    84                              <3> 
    84                              <3> section list
    84 00001179 [B50C0000]          <3>  dd %%link
    84                              <2> %2:
    84 0000117D E8E6FBFFFF          <2>  call nest
    84                              <2> %2_b:
    85 00001182 [05100000]-         <1>   dd dorep, ptype
    85 00001186 [68110000]          <1>
    86 0000118A [3C030000]          <1>   dd drop
    87 0000118E [740D0000]          <1>   dd exit
    88                              <1> 
    89                              <1> ; ------------------------------------------------------------------------
    90                              <1> ; emit a carriage return (or is it a new line :)
    91                              <1> 
    92                              <1> ;       ( --- )
    93                              <1> 
    94                              <1> colon 'cr', cr
    94                              <2>  header %1,%2
    94                              <3> [section headers]
    94 00000CBE [B50C0000]          <3>  dd vlink
    94                              <3> %%link:
    94                              <3> %2n:
    94                              <3> %xdefine vlink %%link
    94 00000CC2 02                  <3>  db (%%name-$-1)+imm
    94 00000CC3 6372                <3>  db %1
    94                              <3> %%name:
    94 00000CC5 [96110000]          <3>  dd %2
    94                              <3> %xdefine imm 0
    94                              <3> 
    94                              <3> section list
    94 00001192 [C20C0000]          <3>  dd %%link
    94                              <2> %2:
    94 00001196 E8CDFBFFFF          <2>  call nest
    94                              <2> %2_b:
    95 0000119B [D00D0000]0A000000- <1>   dd plit, $0a, emit
    95 000011A3 [44100000]          <1>
    96 000011A7 [85100000]-         <1>   dd numline, dup, fetch
    96 000011AB [E2020000]-         <1>
    96 000011AF [7A050000]          <1>
    97 000011B3 [8B0A0000]-         <1>   dd oneplus, rows, min
    97 000011B7 [9F100000]-         <1>
    97 000011BB [4C090000]          <1>
    98 000011BF [18030000]-         <1>   dd swap, store
    98 000011C3 [85050000]          <1>
    99 000011C7 [78100000]-         <1>   dd numout, off
    99 000011CB [4D060000]          <1>
   100 000011CF [740D0000]          <1>   dd exit
   101                              <1> 
   102                              <1> ; ------------------------------------------------------------------------
   103                              <1> ; emit a blank (a space character)
   104                              <1> 
   105                              <1> ;       ( --- )
   106                              <1> 
   107                              <1> colon 'space', space
   107                              <2>  header %1,%2
   107                              <3> [section headers]
   107 00000CC9 [C20C0000]          <3>  dd vlink
   107                              <3> %%link:
   107                              <3> %2n:
   107                              <3> %xdefine vlink %%link
   107 00000CCD 05                  <3>  db (%%name-$-1)+imm
   107 00000CCE 7370616365          <3>  db %1
   107                              <3> %%name:
   107 00000CD3 [D7110000]          <3>  dd %2
   107                              <3> %xdefine imm 0
   107                              <3> 
   107                              <3> section list
   107 000011D3 [CD0C0000]          <3>  dd %%link
   107                              <2> %2:
   107 000011D7 E88CFBFFFF          <2>  call nest
   107                              <2> %2_b:
   108 000011DC [D00D0000]20000000- <1>   dd plit, $20, emit        ; emit a space
   108 000011E4 [44100000]          <1>
   109 000011E8 [740D0000]          <1>   dd exit
   110                              <1> 
   111                              <1> ; ------------------------------------------------------------------------
   112                              <1> ; display n1 spaces
   113                              <1> 
   114                              <1> ;       ( n1 --- )
   115                              <1> 
   116                              <1> colon 'spaces', spaces
   116                              <2>  header %1,%2
   116                              <3> [section headers]
   116 00000CD7 [CD0C0000]          <3>  dd vlink
   116                              <3> %%link:
   116                              <3> %2n:
   116                              <3> %xdefine vlink %%link
   116 00000CDB 06                  <3>  db (%%name-$-1)+imm
   116 00000CDC 737061636573        <3>  db %1
   116                              <3> %%name:
   116 00000CE2 [F0110000]          <3>  dd %2
   116                              <3> %xdefine imm 0
   116                              <3> 
   116                              <3> section list
   116 000011EC [DB0C0000]          <3>  dd %%link
   116                              <2> %2:
   116 000011F0 E873FBFFFF          <2>  call nest
   116                              <2> %2_b:
   117 000011F5 [05100000]-         <1>   dd dorep, space
   117 000011F9 [D7110000]          <1>
   118 000011FD [740D0000]          <1>   dd exit
   119                              <1> 
   120                              <1> ; ------------------------------------------------------------------------
   121                              <1> ; emit a backspace and adjust #out
   122                              <1> 
   123                              <1> ;       ( --- )
   124                              <1> 
   125                              <1> colon '(bs)', pbs
   125                              <2>  header %1,%2
   125                              <3> [section headers]
   125 00000CE6 [DB0C0000]          <3>  dd vlink
   125                              <3> %%link:
   125                              <3> %2n:
   125                              <3> %xdefine vlink %%link
   125 00000CEA 04                  <3>  db (%%name-$-1)+imm
   125 00000CEB 28627329            <3>  db %1
   125                              <3> %%name:
   125 00000CEF [05120000]          <3>  dd %2
   125                              <3> %xdefine imm 0
   125                              <3> 
   125                              <3> section list
   125 00001201 [EA0C0000]          <3>  dd %%link
   125                              <2> %2:
   125 00001205 E85EFBFFFF          <2>  call nest
   125                              <2> %2_b:
   126 0000120A [5E100000]-         <1>   dd bs, emit               ; emit increments #out and we moved it <--
   126 0000120E [44100000]          <1>
   127 00001212 [D00D0000]FEFFFFFF  <1>   dd plit, -2               ; so we must subtract 2 from it
   128 0000121A [78100000]-         <1>   dd numout, plusstore
   128 0000121E [85060000]          <1>
   129 00001222 [740D0000]          <1>   dd exit
   130                              <1> 
   131                              <1> ; ------------------------------------------------------------------------
   132                              <1> ; output n1 backspaces
   133                              <1> 
   134                              <1> ;       ( n1 --- )
   135                              <1> 
   136                              <1> colon 'backspaces', backspaces
   136                              <2>  header %1,%2
   136                              <3> [section headers]
   136 00000CF3 [EA0C0000]          <3>  dd vlink
   136                              <3> %%link:
   136                              <3> %2n:
   136                              <3> %xdefine vlink %%link
   136 00000CF7 0A                  <3>  db (%%name-$-1)+imm
   136 00000CF8 6261636B7370616365- <3>  db %1
   136 00000D01 73                  <3>
   136                              <3> %%name:
   136 00000D02 [2A120000]          <3>  dd %2
   136                              <3> %xdefine imm 0
   136                              <3> 
   136                              <3> section list
   136 00001226 [F70C0000]          <3>  dd %%link
   136                              <2> %2:
   136 0000122A E839FBFFFF          <2>  call nest
   136                              <2> %2_b:
   137 0000122F [78100000]-         <1>   dd numout, fetch, min
   137 00001233 [7A050000]-         <1>
   137 00001237 [4C090000]          <1>
   138 0000123B [05100000]-         <1>   dd dorep, pbs
   138 0000123F [05120000]          <1>
   139 00001243 [740D0000]          <1>   dd exit
   140                              <1> 
   141                              <1> ; ------------------------------------------------------------------------
   142                              <1> ; output an inline string
   143                              <1> 
   144                              <1> ;       ( --- )
   145                              <1> 
   146                              <1> colon '(.")', pdotq
   146                              <2>  header %1,%2
   146                              <3> [section headers]
   146 00000D06 [F70C0000]          <3>  dd vlink
   146                              <3> %%link:
   146                              <3> %2n:
   146                              <3> %xdefine vlink %%link
   146 00000D0A 04                  <3>  db (%%name-$-1)+imm
   146 00000D0B 282E2229            <3>  db %1
   146                              <3> %%name:
   146 00000D0F [4B120000]          <3>  dd %2
   146                              <3> %xdefine imm 0
   146                              <3> 
   146                              <3> section list
   146 00001247 [0A0D0000]          <3>  dd %%link
   146                              <2> %2:
   146 0000124B E818FBFFFF          <2>  call nest
   146                              <2> %2_b:
   147 00001250 [01040000]          <1>   dd rto                    ; get address of string to display
   148 00001254 [D7050000]          <1>   dd count                  ; get length of string
   149 00001258 [F9020000]-         <1>   dd dup2, plus, tor        ; set return address past end of string
   149 0000125C [070A0000]-         <1>
   149 00001260 [E1030000]          <1>
   150 00001264 [7D110000]          <1>   dd type                   ; display string
   151 00001268 [740D0000]          <1>   dd exit
   152                              <1> 
   153                              <1> ; ------------------------------------------------------------------------
   154                              <1> ; return address of scratchpad
   155                              <1> 
   156                              <1> ;       ( --- a1 )
   157                              <1> 
   158                              <1> colon 'pad', pad
   158                              <2>  header %1,%2
   158                              <3> [section headers]
   158 00000D13 [0A0D0000]          <3>  dd vlink
   158                              <3> %%link:
   158                              <3> %2n:
   158                              <3> %xdefine vlink %%link
   158 00000D17 03                  <3>  db (%%name-$-1)+imm
   158 00000D18 706164              <3>  db %1
   158                              <3> %%name:
   158 00000D1B [70120000]          <3>  dd %2
   158                              <3> %xdefine imm 0
   158                              <3> 
   158                              <3> section list
   158 0000126C [170D0000]          <3>  dd %%link
   158                              <2> %2:
   158 00001270 E8F3FAFFFF          <2>  call nest
   158                              <2> %2_b:
   159 00001275 [B51A0000]          <1>   dd here
   160 00001279 [D00D0000]50000000- <1>   dd plit, 80, plus
   160 00001281 [070A0000]          <1>
   161 00001285 [740D0000]          <1>   dd exit
   162                              <1> 
   163                              <1> ; ------------------------------------------------------------------------
   164                              <1> ; if f1 is true abort with a message
   165                              <1> 
   166                              <1> ;       ( f1 --- )
   167                              <1> 
   168                              <1> colon '(abort")', pabortq
   168                              <2>  header %1,%2
   168                              <3> [section headers]
   168 00000D1F [170D0000]          <3>  dd vlink
   168                              <3> %%link:
   168                              <3> %2n:
   168                              <3> %xdefine vlink %%link
   168 00000D23 08                  <3>  db (%%name-$-1)+imm
   168 00000D24 2861626F72742229    <3>  db %1
   168                              <3> %%name:
   168 00000D2C [8D120000]          <3>  dd %2
   168                              <3> %xdefine imm 0
   168                              <3> 
   168                              <3> section list
   168 00001289 [230D0000]          <3>  dd %%link
   168                              <2> %2:
   168 0000128D E8D6FAFFFF          <2>  call nest
   168                              <2> %2_b:
   169 00001292 [01040000]-         <1>   dd rto, count             ; get address of abort message
   169 00001296 [D7050000]          <1>
   170 0000129A [A0030000]          <1>   dd rot                    ; get f1 back at top of stack
   171 0000129E [E70E0000]-         <1>   dd doif, .L0              ; is f1 true ?
   171 000012A2 [B2120000]          <1>
   172 000012A6 [7D110000]-         <1>   dd type, cr, abort        ; yes display message and abort
   172 000012AA [96110000]-         <1>
   172 000012AE [E90C0000]          <1>
   173                              <1> 
   174                              <1> .L0:
   175 000012B2 [A70E0000]          <1>   dd dothen
   176 000012B6 [070A0000]-         <1>   dd plus, tor              ; nope - add string length to string address
   176 000012BA [E1030000]          <1>
   177 000012BE [740D0000]          <1>   dd exit                   ; and put it as our return address
   178                              <1> 
   179                              <1> ; ------------------------------------------------------------------------
   180                              <1> ; return the right side of the string, starting at position n1
   181                              <1> 
   182                              <1> ;       ( a1 n1 n2 --- a2 n3 )
   183                              <1> 
   184                              <1> ; adds n2 to a1, subtracts n2 from n1
   185                              <1> 
   186                              <1> code '/string', sstring
   186                              <2>  header %1,%2
   186                              <3> [section headers]
   186 00000D30 [230D0000]          <3>  dd vlink
   186                              <3> %%link:
   186                              <3> %2n:
   186                              <3> %xdefine vlink %%link
   186 00000D34 07                  <3>  db (%%name-$-1)+imm
   186 00000D35 2F737472696E67      <3>  db %1
   186                              <3> %%name:
   186 00000D3C [C6120000]          <3>  dd %2
   186                              <3> %xdefine imm 0
   186                              <3> 
   186                              <3> section list
   186 000012C2 [340D0000]          <3>  dd %%link
   186                              <2> %2:
   187 000012C6 291C24              <1>   sub [esp], ebx
   188 000012C9 015C2404            <1>   add [esp+4], ebx
   189 000012CD 5B                  <1>   pop ebx
   190                              <1>   next
   190 000012CE E938FAFFFF          <2>  jmp _next
   191                              <1> 
   192                              <1> ; ========================================================================
   118                                    %include "number.s"       ; number input
     1                              <1> ; number.s  - number input
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1>   _var_ 'base', base, 10  ;default radix is 10
     4                              <2>  code %1,%2
     4                              <3>  header %1,%2
     4                              <4> [section headers]
     4 00000D40 [340D0000]          <4>  dd vlink
     4                              <4> %%link:
     4                              <4> %2n:
     4                              <4> %xdefine vlink %%link
     4 00000D44 04                  <4>  db (%%name-$-1)+imm
     4 00000D45 62617365            <4>  db %1
     4                              <4> %%name:
     4 00000D49 [D7120000]          <4>  dd %2
     4                              <4> %xdefine imm 0
     4                              <4> 
     4                              <4> section list
     4 000012D3 [440D0000]          <4>  dd %%link
     4                              <3> %2:
     4 000012D7 E8D3FAFFFF          <2>  call doconstant
     4                              <2> %2_b:
     4 000012DC 0A000000            <2>  dd %3
     5                              <1> 
     6                              <1> ; ------------------------------------------------------------------------
     7                              <1> ; is character c1 a valid digit in the current base
     8                              <1> 
     9                              <1> ;       ( c1 base --- n1 true | false )
    10                              <1> 
    11                              <1> code 'digit', digit
    11                              <2>  header %1,%2
    11                              <3> [section headers]
    11 00000D4D [440D0000]          <3>  dd vlink
    11                              <3> %%link:
    11                              <3> %2n:
    11                              <3> %xdefine vlink %%link
    11 00000D51 05                  <3>  db (%%name-$-1)+imm
    11 00000D52 6469676974          <3>  db %1
    11                              <3> %%name:
    11 00000D57 [E4120000]          <3>  dd %2
    11                              <3> %xdefine imm 0
    11                              <3> 
    11                              <3> section list
    11 000012E0 [510D0000]          <3>  dd %%link
    11                              <2> %2:
    12 000012E4 5A                  <1>   pop edx                   ; get base
    13                              <1> 
    14 000012E5 80EB30              <1>   sub bl, '0'               ; un askify character
    15 000012E8 721C                <1>   jb .L2                    ; oopts - not a valid digit in any base
    16                              <1> 
    17 000012EA 80FB09              <1>   cmp bl, 9                 ; greater than 9 ?
    18 000012ED 7E08                <1>   jle .L1
    19 000012EF 80FB11              <1>   cmp bl, 17                ; make sure its not ascii $3a through $40
    20 000012F2 7212                <1>   jb .L2
    21 000012F4 80EB07              <1>   sub bl, 7                 ; convert a,b,c,d etc into 10,11,12,13 etc
    22                              <1> 
    23                              <1> .L1:
    24 000012F7 38D3                <1>   cmp bl, dl                ; valid digit in current base?
    25 000012F9 7D0B                <1>   jge .L2
    26                              <1> 
    27 000012FB 53                  <1>   push ebx                  ; yes!!!
    28 000012FC BBFFFFFFFF          <1>   mov ebx, -1
    29                              <1>   next
    29 00001301 E905FAFFFF          <2>  jmp _next
    30                              <1> 
    31                              <1> .L2:
    32 00001306 31DB                <1>   xor ebx, ebx              ; not a valid digit
    33                              <1>   next
    33 00001308 E9FEF9FFFF          <2>  jmp _next
    34                              <1> 
    35                              <1> ; ------------------------------------------------------------------------
    36                              <1> ; see if string of length n1 at addres a1 is a valid number in base
    37                              <1> 
    38                              <1> ;       ( a1 n1 base --- n1 true | false )
    39                              <1> 
    40                              <1> colon '(number)', pnumber
    40                              <2>  header %1,%2
    40                              <3> [section headers]
    40 00000D5B [510D0000]          <3>  dd vlink
    40                              <3> %%link:
    40                              <3> %2n:
    40                              <3> %xdefine vlink %%link
    40 00000D5F 08                  <3>  db (%%name-$-1)+imm
    40 00000D60 286E756D62657229    <3>  db %1
    40                              <3> %%name:
    40 00000D68 [11130000]          <3>  dd %2
    40                              <3> %xdefine imm 0
    40                              <3> 
    40                              <3> section list
    40 0000130D [5F0D0000]          <3>  dd %%link
    40                              <2> %2:
    40 00001311 E852FAFFFF          <2>  call nest
    40                              <2> %2_b:
    41 00001316 [B0030000]-         <1>   dd dashrot, plit, 0       ; ( base result a1 n1 -- )
    41 0000131A [D00D0000]00000000  <1>
    42 00001322 [B0030000]          <1>   dd dashrot
    43 00001326 [980E0000]          <1>   dd bounds                 ; ( base result a1 a2 --- )
    44 0000132A [610F0000]-         <1>   dd pdo, .L3               ; for length of string a1 do
    44 0000132E [7E130000]          <1>
    45                              <1> .L1:
    46 00001332 [60030000]-         <1>   dd over, i, cfetch        ; ( base result base c --- )
    46 00001336 [1A100000]-         <1>
    46 0000133A [91050000]          <1>
    47 0000133E [A6070000]-         <1>   dd upc, digit, nott       ; ( base result [n1 t | f] ---)
    47 00001342 [E4120000]-         <1>
    47 00001346 [A7080000]          <1>
    48 0000134A [E70E0000]-         <1>   dd doif, .L2
    48 0000134E [62130000]          <1>
    49                              <1> 
    50 00001352 [53030000]-         <1>   dd drop3, undo            ;oopts, not a number
    50 00001356 [330F0000]          <1>
    51 0000135A [76080000]          <1>   dd false
    52 0000135E [740D0000]          <1>   dd exit
    53                              <1> 
    54                              <1> .L2:
    55 00001362 [A70E0000]          <1>   dd dothen
    56 00001366 [18030000]          <1>   dd swap                   ; ( base n1 result --- )
    57 0000136A [86030000]-         <1>   dd pluck, star, plus
    57 0000136E [060B0000]-         <1>
    57 00001372 [070A0000]          <1>
    58 00001376 [3F0F0000]-         <1>   dd ploop, .L1             ; ( base result --- )
    58 0000137A [32130000]          <1>
    59                              <1> 
    60                              <1> .L3:
    61 0000137E [6E030000]          <1>   dd nip                    ;discard base
    62 00001382 [69080000]          <1>   dd true
    63 00001386 [740D0000]          <1>   dd exit
    64                              <1> 
    65                              <1> ; ------------------------------------------------------------------------
    66                              <1> ; see if person is entering a negative number
    67                              <1> 
    68                              <1> ;       ( a1 n1 --- f1 a1' n1' )
    69                              <1> 
    70                              <1> colon '?negative', qnegative
    70                              <2>  header %1,%2
    70                              <3> [section headers]
    70 00000D6C [5F0D0000]          <3>  dd vlink
    70                              <3> %%link:
    70                              <3> %2n:
    70                              <3> %xdefine vlink %%link
    70 00000D70 09                  <3>  db (%%name-$-1)+imm
    70 00000D71 3F6E65676174697665  <3>  db %1
    70                              <3> %%name:
    70 00000D7A [8E130000]          <3>  dd %2
    70                              <3> %xdefine imm 0
    70                              <3> 
    70                              <3> section list
    70 0000138A [700D0000]          <3>  dd %%link
    70                              <2> %2:
    70 0000138E E8D5F9FFFF          <2>  call nest
    70                              <2> %2_b:
    71 00001393 [60030000]-         <1>   dd over, cfetch
    71 00001397 [91050000]          <1>
    72 0000139B [D00D0000]2D000000  <1>   dd plit, '-'
    73 000013A3 [C0080000]-         <1>   dd equals, dashrot
    73 000013A7 [B0030000]          <1>
    74 000013AB [86030000]          <1>   dd pluck
    75 000013AF [E70E0000]-         <1>   dd doif, .L0
    75 000013B3 [C3130000]          <1>
    76 000013B7 [D00D0000]01000000- <1>   dd plit, 1, sstring
    76 000013BF [C6120000]          <1>
    77                              <1> .L0:
    78 000013C3 [A70E0000]          <1>   dd dothen
    79 000013C7 [740D0000]          <1>   dd exit
    80                              <1> 
    81                              <1> ;-\ ------------------------------------------------------------------------
    82                              <1> 
    83                              <1> ;       ( f1 a1 n1 base --- n2 true | false )
    84                              <1> 
    85                              <1> ; e.g.       123
    86                              <1> ;           -456
    87                              <1> 
    88                              <1> colon '(num)', pnum
    88                              <2>  header %1,%2
    88                              <3> [section headers]
    88 00000D7E [700D0000]          <3>  dd vlink
    88                              <3> %%link:
    88                              <3> %2n:
    88                              <3> %xdefine vlink %%link
    88 00000D82 05                  <3>  db (%%name-$-1)+imm
    88 00000D83 286E756D29          <3>  db %1
    88                              <3> %%name:
    88 00000D88 [CF130000]          <3>  dd %2
    88                              <3> %xdefine imm 0
    88                              <3> 
    88                              <3> section list
    88 000013CB [820D0000]          <3>  dd %%link
    88                              <2> %2:
    88 000013CF E894F9FFFF          <2>  call nest
    88                              <2> %2_b:
    89 000013D4 [11130000]          <1>   dd pnumber                ; convert string at a1 to number if can
    90 000013D8 [E2020000]          <1>   dd dup                    ; was it a number ?
    91 000013DC [E70E0000]-         <1>   dd doif, .L0
    91 000013E0 [F4130000]          <1>
    92 000013E4 [E1030000]-         <1>   dd tor, swap, qnegate     ; yes, negate it if f1 is true
    92 000013E8 [18030000]-         <1>
    92 000013EC [DA0A0000]          <1>
    93 000013F0 [01040000]          <1>   dd rto
    94                              <1> .L0:
    95 000013F4 [A70E0000]          <1>   dd dothen
    96 000013F8 [740D0000]          <1>   dd exit
    97                              <1> 
    98                              <1> ; ------------------------------------------------------------------------
    99                              <1> 
   100                              <1> ;       ( f1 a1 n1 c1 --- [n2 true | false] | f1 a1 n1 )
   101                              <1> 
   102                              <1> ; e.g.       $65
   103                              <1> ;           -$48
   104                              <1> 
   105                              <1>   _noname_
   105 000013FC 00000000            <2>  dd 0
   106                              <1> 
   107                              <1> qhex:
   108 00001400 E863F9FFFF          <1>   call nest
   109 00001405 [E2020000]-         <1>   dd dup, plit, '$'         ; hex number specified?
   109 00001409 [D00D0000]24000000  <1>
   110 00001411 [C0080000]          <1>   dd equals
   111 00001415 [E70E0000]-         <1>   dd doif, .L0
   111 00001419 [3D140000]          <1>
   112 0000141D [01040000]-         <1>   dd rto, drop2             ; yes - discard return address and the '$'
   112 00001421 [46030000]          <1>
   113 00001425 [D00D0000]01000000- <1>   dd plit, 1, sstring       ; skip the $ character
   113 0000142D [C6120000]          <1>
   114 00001431 [D00D0000]10000000  <1>   dd plit, 16               ; base for (number) is 16
   115 00001439 [CF130000]          <1>   dd pnum                   ; convert number
   116                              <1> .L0:
   117 0000143D [A70E0000]          <1>   dd dothen
   118 00001441 [740D0000]          <1>   dd exit
   119                              <1> 
   120                              <1> ; ------------------------------------------------------------------------
   121                              <1> 
   122                              <1> ;       ( f1 a1 n1 c1 --- [n2 true | false] | f1 a1 n1 )
   123                              <1> 
   124                              <1> ; e.g.       %1101
   125                              <1> ;           -%1001
   126                              <1> 
   127                              <1>   _noname_
   127 00001445 00000000            <2>  dd 0
   128                              <1> 
   129                              <1> qbin:
   130 00001449 E81AF9FFFF          <1>   call nest
   131 0000144E [E2020000]-         <1>   dd dup, plit, '%'         ; binary number specified ?
   131 00001452 [D00D0000]25000000  <1>
   132 0000145A [C0080000]          <1>   dd equals
   133 0000145E [E70E0000]-         <1>   dd doif, .L0
   133 00001462 [86140000]          <1>
   134 00001466 [01040000]-         <1>   dd rto, drop2
   134 0000146A [46030000]          <1>
   135 0000146E [D00D0000]01000000- <1>   dd plit, 1, sstring
   135 00001476 [C6120000]          <1>
   136 0000147A [D00D0000]02000000  <1>   dd plit, 2                ; yes, base is 2
   137 00001482 [CF130000]          <1>   dd pnum
   138                              <1> .L0:
   139 00001486 [A70E0000]          <1>   dd dothen
   140 0000148A [740D0000]          <1>   dd exit
   141                              <1> 
   142                              <1> ; ------------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;       ( f1 a1 n1 c1 --- [n2 true | false] | f1 a1 n1 )
   145                              <1> 
   146                              <1> ;e.g.       \023
   147                              <1> ;          -\034
   148                              <1> 
   149                              <1>   _noname_
   149 0000148E 00000000            <2>  dd 0
   150                              <1> 
   151                              <1> qoctal:
   152 00001492 E8D1F8FFFF          <1>   call nest
   153 00001497 [E2020000]-         <1>   dd dup, plit, $5c         ;  octal specified ? (ugh)
   153 0000149B [D00D0000]5C000000  <1>
   154 000014A3 [C0080000]          <1>   dd equals                 ; allows c like \036 etc
   155 000014A7 [E70E0000]-         <1>   dd doif, .L0
   155 000014AB [CF140000]          <1>
   156 000014AF [01040000]-         <1>   dd rto, drop2
   156 000014B3 [46030000]          <1>
   157 000014B7 [D00D0000]01000000- <1>   dd plit, 1, sstring
   157 000014BF [C6120000]          <1>
   158 000014C3 [D00D0000]08000000  <1>   dd plit, 8                ; yes, base is 8
   159 000014CB [CF130000]          <1>   dd pnum
   160                              <1> .L0:
   161 000014CF [A70E0000]          <1>   dd dothen
   162 000014D3 [740D0000]          <1>   dd exit
   163                              <1> 
   164                              <1> ; ------------------------------------------------------------------------
   165                              <1> 
   166                              <1> ;       ( f1 a1 n1 c1 --- [n2 true | false] | f1 a1 n1 )
   167                              <1> 
   168                              <1> ; e.g.       'x'
   169                              <1> ;           -'y'
   170                              <1> 
   171                              <1>   _noname_
   171 000014D7 00000000            <2>  dd 0
   172                              <1> 
   173                              <1> qchar:
   174 000014DB E888F8FFFF          <1>   call nest
   175 000014E0 [D00D0000]27000000  <1>   dd plit, $27              ; char specified ?
   176 000014E8 [C0080000]-         <1>   dd equals, nott, qexit
   176 000014EC [A7080000]-         <1>
   176 000014F0 [800D0000]          <1>
   177                              <1> 
   178 000014F4 [01040000]-         <1>   dd rto, drop2             ; discard return address and n1
   178 000014F8 [46030000]          <1>
   179 000014FC [E2020000]-         <1>   dd dup, twoplus, cfetch   ; must have closing ` on char
   179 00001500 [9F0A0000]-         <1>
   179 00001504 [91050000]          <1>
   180 00001508 [D00D0000]27000000  <1>   dd plit, $27
   181 00001510 [C0080000]          <1>   dd equals
   182 00001514 [E70E0000]-         <1>   dd doif, .L1
   182 00001518 [34150000]          <1>
   183                              <1> 
   184 0000151C [8B0A0000]          <1>   dd oneplus                ; yes, point at char
   185 00001520 [91050000]          <1>   dd cfetch
   186 00001524 [18030000]-         <1>   dd swap, qnegate
   186 00001528 [DA0A0000]          <1>
   187 0000152C [69080000]          <1>   dd true
   188 00001530 [740D0000]          <1>   dd exit
   189                              <1> 
   190                              <1> .L1:
   191 00001534 [A70E0000]          <1>   dd dothen
   192 00001538 [46030000]-         <1>   dd drop2, false
   192 0000153C [76080000]          <1>
   193 00001540 [740D0000]          <1>   dd exit
   194                              <1> 
   195                              <1> ; ------------------------------------------------------------------------
   196                              <1> ; convert string at a1 to a number in current base (if can)
   197                              <1> 
   198                              <1> ;       ( a1 --- n1 true | false )
   199                              <1> 
   200                              <1> colon 'number', number
   200                              <2>  header %1,%2
   200                              <3> [section headers]
   200 00000D8C [820D0000]          <3>  dd vlink
   200                              <3> %%link:
   200                              <3> %2n:
   200                              <3> %xdefine vlink %%link
   200 00000D90 06                  <3>  db (%%name-$-1)+imm
   200 00000D91 6E756D626572        <3>  db %1
   200                              <3> %%name:
   200 00000D97 [48150000]          <3>  dd %2
   200                              <3> %xdefine imm 0
   200                              <3> 
   200                              <3> section list
   200 00001544 [900D0000]          <3>  dd %%link
   200                              <2> %2:
   200 00001548 E81BF8FFFF          <2>  call nest
   200                              <2> %2_b:
   201 0000154D [D7050000]          <1>   dd count                  ; ( a1+1 n1 --- )
   202 00001551 [8E130000]          <1>   dd qnegative              ; is first char of # a '-' ?
   203 00001555 [60030000]-         <1>   dd over, cfetch           ; get next char of string...
   203 00001559 [91050000]          <1>
   204                              <1> 
   205                              <1>   ; if any of the next 4 tests passes it is an implied exit from this word
   206                              <1> 
   207 0000155D [00140000]          <1>   dd qhex                   ; is it a $number ?
   208 00001561 [49140000]          <1>   dd qbin                   ; is it a %number ?
   209 00001565 [92140000]          <1>   dd qoctal                 ; is it a \number ?
   210 00001569 [DB140000]          <1>   dd qchar                  ; is it a 'x' number
   211                              <1> 
   212 0000156D [D7120000]          <1>   dd base                   ; none of the above - use current base
   213 00001571 [CF130000]          <1>   dd pnum                   ; and try convert number
   214 00001575 [740D0000]          <1>   dd exit
   215                              <1> 
   216                              <1> ; ========================================================================
   119                                    %include "scan.s"         ; skip and scan etc
     1                              <1> ; scan.s    - skip and scan etc
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; actual char that word delimited on (actually scan)
     6                              <1> 
     7                              <1>   _constant_ 'wchar', wchar, 0
     7                              <2>  code %1,%2
     7                              <3>  header %1,%2
     7                              <4> [section headers]
     7 00000D9B [900D0000]          <4>  dd vlink
     7                              <4> %%link:
     7                              <4> %2n:
     7                              <4> %xdefine vlink %%link
     7 00000D9F 05                  <4>  db (%%name-$-1)+imm
     7 00000DA0 7763686172          <4>  db %1
     7                              <4> %%name:
     7 00000DA5 [7D150000]          <4>  dd %2
     7                              <4> %xdefine imm 0
     7                              <4> 
     7                              <4> section list
     7 00001579 [9F0D0000]          <4>  dd %%link
     7                              <3> %2:
     7 0000157D E82DF8FFFF          <2>  call doconstant
     7                              <2> %2_b:
     7 00001582 00000000            <2>  dd %3
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------------------
    10                              <1> ; skip leading characters equal to c1 within a string
    11                              <1> 
    12                              <1> ;       ( a1 n1 c1 --- a2 n2 )
    13                              <1> 
    14                              <1> code 'skip', skip
    14                              <2>  header %1,%2
    14                              <3> [section headers]
    14 00000DA9 [9F0D0000]          <3>  dd vlink
    14                              <3> %%link:
    14                              <3> %2n:
    14                              <3> %xdefine vlink %%link
    14 00000DAD 04                  <3>  db (%%name-$-1)+imm
    14 00000DAE 736B6970            <3>  db %1
    14                              <3> %%name:
    14 00000DB2 [8A150000]          <3>  dd %2
    14                              <3> %xdefine imm 0
    14                              <3> 
    14                              <3> section list
    14 00001586 [AD0D0000]          <3>  dd %%link
    14                              <2> %2:
    15 0000158A 59                  <1>   pop ecx                   ; get length
    16 0000158B E30A                <1>   jecxz .L1
    17                              <1> 
    18 0000158D 5F                  <1>   pop edi
    19 0000158E 89D8                <1>   mov eax, ebx              ; get c1 in al
    20                              <1> 
    21 00001590 F3AE                <1>   rep scasb                 ; scan string till no match
    22 00001592 7402                <1>   jz .L0                    ; run out of string ?
    23                              <1> 
    24 00001594 41                  <1>   inc ecx                   ; jump back into string
    25 00001595 4F                  <1>   dec edi
    26                              <1> 
    27                              <1> .L0:
    28 00001596 57                  <1>   push edi                  ; return a2
    29                              <1> 
    30                              <1> .L1:
    31 00001597 89CB                <1>   mov ebx, ecx              ; return n2
    32                              <1>   next
    32 00001599 E96DF7FFFF          <2>  jmp _next
    33                              <1> 
    34                              <1> ; ------------------------------------------------------------------------
    35                              <1> ; scan string for character c1
    36                              <1> 
    37                              <1> ;       ( a1 n1 c1 --- a2 n2 )
    38                              <1> 
    39                              <1> ;       a2 = address where c1 was found (end of string if not found)
    40                              <1> ;       n2 = length from a2 to end of string
    41                              <1> 
    42                              <1> ; i think n2 is a totally useless value to return. it would be much more
    43                              <1> ; usefull if this returned the length of the a2 string instead. it would
    44                              <1> ; simplify parse no end. - mental note - make this return sane values ?
    45                              <1> ; this would break code that expects n2 to be standard... (who cares?)
    46                              <1> 
    47                              <1> code 'scan', scan
    47                              <2>  header %1,%2
    47                              <3> [section headers]
    47 00000DB6 [AD0D0000]          <3>  dd vlink
    47                              <3> %%link:
    47                              <3> %2n:
    47                              <3> %xdefine vlink %%link
    47 00000DBA 04                  <3>  db (%%name-$-1)+imm
    47 00000DBB 7363616E            <3>  db %1
    47                              <3> %%name:
    47 00000DBF [A2150000]          <3>  dd %2
    47                              <3> %xdefine imm 0
    47                              <3> 
    47                              <3> section list
    47 0000159E [BA0D0000]          <3>  dd %%link
    47                              <2> %2:
    48 000015A2 59                  <1>   pop ecx                   ; get length of string in ecx (n1)
    49 000015A3 E30A                <1>   jecxz .L2                 ; null string ?
    50 000015A5 5F                  <1>   pop edi                   ; address of string in edi (a1)
    51 000015A6 89D8                <1>   mov eax, ebx              ; get item to search for in eax (c1)
    52 000015A8 F2AE                <1>   repnz scasb               ; search string for char
    53 000015AA 7502                <1>   jnz .L1                   ; run out of string ? or find item ?
    54 000015AC 41                  <1>   inc ecx                   ; point back at located item
    55 000015AD 4F                  <1>   dec edi
    56                              <1> .L1:
    57 000015AE 57                  <1>   push edi                  ; return a2
    58                              <1> .L2:
    59 000015AF 89CB                <1>   mov ebx, ecx              ; return n2
    60                              <1>   next
    60 000015B1 E955F7FFFF          <2>  jmp _next
    61                              <1> 
    62                              <1> ; -----------------------------------------------------------------------
    63                              <1> ; scan memory for 16 bit item n2
    64                              <1> 
    65                              <1> ;       ( a1 n1 w1 --- a2 n2 )
    66                              <1> 
    67                              <1> code 'wscan', wscan
    67                              <2>  header %1,%2
    67                              <3> [section headers]
    67 00000DC3 [BA0D0000]          <3>  dd vlink
    67                              <3> %%link:
    67                              <3> %2n:
    67                              <3> %xdefine vlink %%link
    67 00000DC7 05                  <3>  db (%%name-$-1)+imm
    67 00000DC8 777363616E          <3>  db %1
    67                              <3> %%name:
    67 00000DCD [BA150000]          <3>  dd %2
    67                              <3> %xdefine imm 0
    67                              <3> 
    67                              <3> section list
    67 000015B6 [C70D0000]          <3>  dd %%link
    67                              <2> %2:
    68 000015BA 59                  <1>   pop ecx                   ; get length of buffer to search (n1)
    69 000015BB E30D                <1>   jecxz .L2                 ; null string ?
    70 000015BD 5F                  <1>   pop edi                   ; get address of memory to search (a1)
    71 000015BE 89D8                <1>   mov eax, ebx              ; get item to search for in eax (w1)
    72 000015C0 F266AF              <1>   repnz scasw               ; search...
    73 000015C3 7504                <1>   jnz .L1
    74 000015C5 41                  <1>   inc ecx
    75 000015C6 83EF02              <1>   sub edi, byte 2
    76                              <1> .L1:
    77 000015C9 57                  <1>   push edi
    78                              <1> .L2:
    79 000015CA 89CB                <1>   mov ebx, ecx
    80                              <1>   next
    80 000015CC E93AF7FFFF          <2>  jmp _next
    81                              <1> 
    82                              <1> ; ------------------------------------------------------------------------
    83                              <1> ; scan memory for 32 bit item
    84                              <1> 
    85                              <1> ;       ( a1 n1 n2 --- a2 n2 )
    86                              <1> 
    87                              <1> code 'dscan', dscan
    87                              <2>  header %1,%2
    87                              <3> [section headers]
    87 00000DD1 [C70D0000]          <3>  dd vlink
    87                              <3> %%link:
    87                              <3> %2n:
    87                              <3> %xdefine vlink %%link
    87 00000DD5 05                  <3>  db (%%name-$-1)+imm
    87 00000DD6 647363616E          <3>  db %1
    87                              <3> %%name:
    87 00000DDB [D5150000]          <3>  dd %2
    87                              <3> %xdefine imm 0
    87                              <3> 
    87                              <3> section list
    87 000015D1 [D50D0000]          <3>  dd %%link
    87                              <2> %2:
    88 000015D5 59                  <1>   pop ecx                   ; get length of buffer to search (n1)
    89 000015D6 E30C                <1>   jecxz .L2                 ; null string ?
    90 000015D8 5F                  <1>   pop edi                   ; get addess of memory to search (a1)
    91 000015D9 89D8                <1>   mov eax, ebx              ; get item to search for in eax (n2)
    92 000015DB F2AF                <1>   repnz scasd               ; search...
    93 000015DD 7504                <1>   jnz .L1
    94 000015DF 41                  <1>   inc ecx
    95 000015E0 83EF04              <1>   sub edi, byte 4
    96                              <1> .L1:
    97 000015E3 57                  <1>   push edi
    98                              <1> .L2:
    99 000015E4 89CB                <1>   mov ebx, ecx
   100                              <1>   next
   100 000015E6 E920F7FFFF          <2>  jmp _next
   101                              <1> 
   102                              <1> ; ------------------------------------------------------------------------
   103                              <1> ; as above but also delimits on eol
   104                              <1> 
   105                              <1> ; this word is used by parse-word now instead of the above so that we can
   106                              <1> ; consider an entire memory mapped source file to be our terminal input
   107                              <1> ; buffer.
   108                              <1> 
   109                              <1> ;       ( a1 n1 c1 --- a2 n2 )
   110                              <1> 
   111                              <1> code 'scan-eol', scan_eol
   111                              <2>  header %1,%2
   111                              <3> [section headers]
   111 00000DDF [D50D0000]          <3>  dd vlink
   111                              <3> %%link:
   111                              <3> %2n:
   111                              <3> %xdefine vlink %%link
   111 00000DE3 08                  <3>  db (%%name-$-1)+imm
   111 00000DE4 7363616E2D656F6C    <3>  db %1
   111                              <3> %%name:
   111 00000DEC [EF150000]          <3>  dd %2
   111                              <3> %xdefine imm 0
   111                              <3> 
   111                              <3> section list
   111 000015EB [E30D0000]          <3>  dd %%link
   111                              <2> %2:
   112 000015EF 59                  <1>   pop ecx                   ; get length of string to scan
   113 000015F0 E31F                <1>   jecxz .L3                 ; empty string ?
   114 000015F2 5F                  <1>   pop edi                   ; no, get address of string
   115                              <1> 
   116                              <1> .L0:
   117 000015F3 8A07                <1>   mov al, [edi]             ; get next byte of string
   118                              <1> 
   119 000015F5 3C0A                <1>   cmp al, $0a               ; end of line ?
   120 000015F7 7417                <1>   je .L2
   121 000015F9 3C0D                <1>   cmp al, $0d
   122 000015FB 7413                <1>   je .L2
   123                              <1> 
   124 000015FD 38D8                <1>   cmp al, bl                ; not eol, same as char c1 ?
   125 000015FF 740F                <1>   je .L2
   126                              <1> 
   127 00001601 80FB20              <1>   cmp bl, $20               ; if were scanning for blanks then
   128 00001604 7504                <1>   jne .L1                   ; also delimit on the evil tab
   129 00001606 3C09                <1>   cmp al, 9                 ; the evil tab is a blank too
   130 00001608 7406                <1>   je .L2                    ; DONT USE TABS!
   131                              <1> 
   132                              <1> .L1:
   133 0000160A 47                  <1>   inc edi
   134 0000160B 49                  <1>   dec ecx
   135 0000160C 75E5                <1>   jnz .L0                   ; ran out of string?
   136                              <1> 
   137 0000160E 30C0                <1>   xor al, al                ; we didnt delimit, we ran out of string
   138                              <1> 
   139                              <1> .L2:
   140 00001610 57                  <1>   push edi
   141                              <1> 
   142                              <1> .L3:
   143 00001611 A2[82150000]        <1>   mov [wchar_b], al         ; remember char that we delimited on
   144                              <1> 
   145 00001616 89CB                <1>   mov ebx, ecx
   146                              <1>   next
   146 00001618 E9EEF6FFFF          <2>  jmp _next
   147                              <1> 
   148                              <1> ; ------------------------------------------------------------------------
   149                              <1> ; scan for terminatig zero byte
   150                              <1> 
   151                              <1> ;       ( a1 --- a2 )
   152                              <1> 
   153                              <1> code 'scanz', scanz         ; bug fix modifications by stephen ma
   153                              <2>  header %1,%2
   153                              <3> [section headers]
   153 00000DF0 [E30D0000]          <3>  dd vlink
   153                              <3> %%link:
   153                              <3> %2n:
   153                              <3> %xdefine vlink %%link
   153 00000DF4 05                  <3>  db (%%name-$-1)+imm
   153 00000DF5 7363616E7A          <3>  db %1
   153                              <3> %%name:
   153 00000DFA [21160000]          <3>  dd %2
   153                              <3> %xdefine imm 0
   153                              <3> 
   153                              <3> section list
   153 0000161D [F40D0000]          <3>  dd %%link
   153                              <2> %2:
   154 00001621 31C0                <1>   xor eax,eax               ; were looking for binary zero.
   155 00001623 89DF                <1>   mov edi,ebx               ; edi = string address
   156 00001625 8D48FF              <1>   lea ecx,[eax-1]           ; ecx = -1 (effectively infinite byte count)
   157 00001628 F2AE                <1>   repne scasb               ; scan for zero byte.
   158 0000162A 8D5FFF              <1>   lea ebx,[edi-1]           ; return the address of the null byte.
   159                              <1>   next
   159 0000162D E9D9F6FFFF          <2>  jmp _next
   160                              <1> 
   161                              <1> ; ========================================================================
   120                                    %include "expect.s"       ; query and expect
     1                              <1> ; expect.s
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1>   _defer_ 'expect', expect, pexpect
     4                              <2>  code %1,%2
     4                              <3>  header %1,%2
     4                              <4> [section headers]
     4 00000DFE [F40D0000]          <4>  dd vlink
     4                              <4> %%link:
     4                              <4> %2n:
     4                              <4> %xdefine vlink %%link
     4 00000E02 06                  <4>  db (%%name-$-1)+imm
     4 00000E03 657870656374        <4>  db %1
     4                              <4> %%name:
     4 00000E09 [36160000]          <4>  dd %2
     4                              <4> %xdefine imm 0
     4                              <4> 
     4                              <4> section list
     4 00001632 [020E0000]          <4>  dd %%link
     4                              <3> %2:
     4 00001636 E88EF7FFFF          <2>  call dodefer
     4                              <2> %2_b:
     4 0000163B [04170000]          <2>  dd %3
     5                              <1> 
     6                              <1> ; ------------------------------------------------------------------------
     7                              <1> ; process input of a backspace character
     8                              <1> 
     9                              <1> ;       ( #sofar --- 0 | #sofar-1 )
    10                              <1> 
    11                              <1> colon 'bsin', bsin
    11                              <2>  header %1,%2
    11                              <3> [section headers]
    11 00000E0D [020E0000]          <3>  dd vlink
    11                              <3> %%link:
    11                              <3> %2n:
    11                              <3> %xdefine vlink %%link
    11 00000E11 04                  <3>  db (%%name-$-1)+imm
    11 00000E12 6273696E            <3>  db %1
    11                              <3> %%name:
    11 00000E16 [43160000]          <3>  dd %2
    11                              <3> %xdefine imm 0
    11                              <3> 
    11                              <3> section list
    11 0000163F [110E0000]          <3>  dd %%link
    11                              <2> %2:
    11 00001643 E820F7FFFF          <2>  call nest
    11                              <2> %2_b:
    12 00001648 [E2020000]          <1>   dd dup
    13 0000164C [B2080000]-         <1>   dd zequals, qexit
    13 00001650 [800D0000]          <1>
    14 00001654 [950A0000]          <1>   dd oneminus               ; decrement #sofar
    15 00001658 [05120000]-         <1>   dd pbs, space, pbs        ; rub out 1 char left
    15 0000165C [D7110000]-         <1>
    15 00001660 [05120000]          <1>
    16 00001664 [740D0000]          <1>   dd exit
    17                              <1> 
    18                              <1> ; ------------------------------------------------------------------------
    19                              <1> 
    20                              <1> ;       ( max adr #sofar char --- max adr max )
    21                              <1> 
    22                              <1> colon 'cr-in', crin
    22                              <2>  header %1,%2
    22                              <3> [section headers]
    22 00000E1A [110E0000]          <3>  dd vlink
    22                              <3> %%link:
    22                              <3> %2n:
    22                              <3> %xdefine vlink %%link
    22 00000E1E 05                  <3>  db (%%name-$-1)+imm
    22 00000E1F 63722D696E          <3>  db %1
    22                              <3> %%name:
    22 00000E24 [6C160000]          <3>  dd %2
    22                              <3> %xdefine imm 0
    22                              <3> 
    22                              <3> section list
    22 00001668 [1E0E0000]          <3>  dd %%link
    22                              <2> %2:
    22 0000166C E8F7F6FFFF          <2>  call nest
    22                              <2> %2_b:
    23 00001671 [3C030000]          <1>   dd drop
    24 00001675 [21040000]          <1>   dd duptor                 ; remember # recieved chars
    25 00001679 [F20D0000]-         <1>   dd zstoreto, numtib_b
    25 0000167D [94170000]          <1>
    26 00001681 [60030000]-         <1>   dd over, rto              ; return #sofar = max
    26 00001685 [01040000]          <1>
    27 00001689 [B2080000]-         <1>   dd zequals, qexit
    27 0000168D [800D0000]          <1>
    28 00001691 [D7110000]          <1>   dd space
    29 00001695 [740D0000]          <1>   dd exit
    30                              <1> 
    31                              <1> ; ------------------------------------------------------------------------
    32                              <1> 
    33                              <1> colon "?bsin", qbsin
    33                              <2>  header %1,%2
    33                              <3> [section headers]
    33 00000E28 [1E0E0000]          <3>  dd vlink
    33                              <3> %%link:
    33                              <3> %2n:
    33                              <3> %xdefine vlink %%link
    33 00000E2C 05                  <3>  db (%%name-$-1)+imm
    33 00000E2D 3F6273696E          <3>  db %1
    33                              <3> %%name:
    33 00000E32 [9D160000]          <3>  dd %2
    33                              <3> %xdefine imm 0
    33                              <3> 
    33                              <3> section list
    33 00001699 [2C0E0000]          <3>  dd %%link
    33                              <2> %2:
    33 0000169D E8C6F6FFFF          <2>  call nest
    33                              <2> %2_b:
    34 000016A2 [5E100000]-         <1>   dd bs, notequals, qexit
    34 000016A6 [EA080000]-         <1>
    34 000016AA [800D0000]          <1>
    35 000016AE [43160000]          <1>   dd bsin
    36 000016B2 [740D0000]          <1>   dd exit
    37                              <1> 
    38                              <1> ; ------------------------------------------------------------------------
    39                              <1> 
    40                              <1> ;        ( c1 --- )
    41                              <1> 
    42                              <1> colon '^char', ctrlchar
    42                              <2>  header %1,%2
    42                              <3> [section headers]
    42 00000E36 [2C0E0000]          <3>  dd vlink
    42                              <3> %%link:
    42                              <3> %2n:
    42                              <3> %xdefine vlink %%link
    42 00000E3A 05                  <3>  db (%%name-$-1)+imm
    42 00000E3B 5E63686172          <3>  db %1
    42                              <3> %%name:
    42 00000E40 [BA160000]          <3>  dd %2
    42                              <3> %xdefine imm 0
    42                              <3> 
    42                              <3> section list
    42 000016B6 [3A0E0000]          <3>  dd %%link
    42                              <2> %2:
    42 000016BA E8A9F6FFFF          <2>  call nest
    42                              <2> %2_b:
    43 000016BF [E2020000]          <1>   dd dup
    44 000016C3 [D00D0000]0A000000- <1>   dd plit, 0ah, equals
    44 000016CB [C0080000]          <1>
    45 000016CF [9A0D0000]          <1>   dd qcolon
    46 000016D3 [6C160000]-         <1>   dd crin, qbsin
    46 000016D7 [9D160000]          <1>
    47 000016DB [740D0000]          <1>   dd exit
    48                              <1> 
    49                              <1> ; ------------------------------------------------------------------------
    50                              <1> 
    51                              <1> ;       ( adr #sofar char --- adr #sofar )
    52                              <1> 
    53                              <1> colon 'norm-char', normchar
    53                              <2>  header %1,%2
    53                              <3> [section headers]
    53 00000E44 [3A0E0000]          <3>  dd vlink
    53                              <3> %%link:
    53                              <3> %2n:
    53                              <3> %xdefine vlink %%link
    53 00000E48 09                  <3>  db (%%name-$-1)+imm
    53 00000E49 6E6F726D2D63686172  <3>  db %1
    53                              <3> %%name:
    53 00000E52 [E3160000]          <3>  dd %2
    53                              <3> %xdefine imm 0
    53                              <3> 
    53                              <3> section list
    53 000016DF [480E0000]          <3>  dd %%link
    53                              <2> %2:
    53 000016E3 E880F6FFFF          <2>  call nest
    53                              <2> %2_b:
    54 000016E8 [07030000]          <1>   dd dup3                   ; ( a1 n1 c1 a1 n1 c1 --- )
    55 000016EC [44100000]          <1>   dd emit                   ; echo c1
    56 000016F0 [070A0000]-         <1>   dd plus, cstore           ; store c1 at (a1 + n1)
    56 000016F4 [9D050000]          <1>
    57 000016F8 [8B0A0000]          <1>   dd oneplus                ; increment #sofar
    58 000016FC [740D0000]          <1>   dd exit
    59                              <1> 
    60                              <1> ; ------------------------------------------------------------------------
    61                              <1> ; input n1 chars max to buffer at a1
    62                              <1> 
    63                              <1> ;       ( a1 n1 -- )
    64                              <1> 
    65                              <1> colon '(expect)', pexpect
    65                              <2>  header %1,%2
    65                              <3> [section headers]
    65 00000E56 [480E0000]          <3>  dd vlink
    65                              <3> %%link:
    65                              <3> %2n:
    65                              <3> %xdefine vlink %%link
    65 00000E5A 08                  <3>  db (%%name-$-1)+imm
    65 00000E5B 2865787065637429    <3>  db %1
    65                              <3> %%name:
    65 00000E63 [04170000]          <3>  dd %2
    65                              <3> %xdefine imm 0
    65                              <3> 
    65                              <3> section list
    65 00001700 [5A0E0000]          <3>  dd %%link
    65                              <2> %2:
    65 00001704 E85FF6FFFF          <2>  call nest
    65                              <2> %2_b:
    66 00001709 [18030000]-         <1>   dd swap, plit, 0          ; ( len adr #sofar )
    66 0000170D [D00D0000]00000000  <1>
    67 00001715 [B00E0000]          <1>   dd dobegin
    68                              <1> .L1:
    69 00001719 [86030000]          <1>   dd pluck                  ; get diff between expected and #sofar
    70 0000171D [60030000]-         <1>   dd over, minus            ; ( len adr #sofar #left )
    70 00001721 [130A0000]          <1>
    71 00001725 [ED0E0000]-         <1>   dd qwhile, .L2            ; while #left != 0
    71 00001729 [51170000]          <1>
    72 0000172D [51100000]-         <1>   dd key, dup               ; read key
    72 00001731 [E2020000]          <1>
    73 00001735 [6B100000]-         <1>   dd bl_, less              ; < hex 20 ?
    73 00001739 [12090000]          <1>
    74 0000173D [9A0D0000]          <1>   dd qcolon
    75 00001741 [BA160000]-         <1>   dd ctrlchar, normchar
    75 00001745 [E3160000]          <1>
    76 00001749 [D00E0000]-         <1>   dd dorepeat, .L1
    76 0000174D [19170000]          <1>
    77                              <1> .L2:
    78 00001751 [53030000]          <1>   dd drop3                  ; clear working parameters off stack
    79 00001755 [740D0000]          <1>   dd exit
    80                              <1> 
    81                              <1> ; ------------------------------------------------------------------------
    82                              <1> ; input string of 256 chars max to tib
    83                              <1> 
    84                              <1> colon 'query', query
    84                              <2>  header %1,%2
    84                              <3> [section headers]
    84 00000E67 [5A0E0000]          <3>  dd vlink
    84                              <3> %%link:
    84                              <3> %2n:
    84                              <3> %xdefine vlink %%link
    84 00000E6B 05                  <3>  db (%%name-$-1)+imm
    84 00000E6C 7175657279          <3>  db %1
    84                              <3> %%name:
    84 00000E71 [5D170000]          <3>  dd %2
    84                              <3> %xdefine imm 0
    84                              <3> 
    84                              <3> section list
    84 00001759 [6B0E0000]          <3>  dd %%link
    84                              <2> %2:
    84 0000175D E806F6FFFF          <2>  call nest
    84                              <2> %2_b:
    85 00001762 [9C170000]-         <1>   dd tib, plit, TIBSZ
    85 00001766 [D00D0000]00040000  <1>
    86 0000176E [36160000]          <1>   dd expect                 ; get 256 chars to tib
    87 00001772 [FF0D0000]-         <1>   dd zoffto,toin_b          ; we have parsed zero so far
    87 00001776 [87170000]          <1>
    88 0000177A [740D0000]          <1>   dd exit
    89                              <1> 
    90                              <1> ; ========================================================================
   121                                    %include "parse.s"        ; parse and parse-word etc
     1                              <1> ; parse.s
     2                              <1> ;-------------------------------------------------------------------------
     3                              <1> 
     4                              <1>   _var_ '>in', toin, 0      ; current position within TIB
     4                              <2>  code %1,%2
     4                              <3>  header %1,%2
     4                              <4> [section headers]
     4 00000E75 [6B0E0000]          <4>  dd vlink
     4                              <4> %%link:
     4                              <4> %2n:
     4                              <4> %xdefine vlink %%link
     4 00000E79 03                  <4>  db (%%name-$-1)+imm
     4 00000E7A 3E696E              <4>  db %1
     4                              <4> %%name:
     4 00000E7D [82170000]          <4>  dd %2
     4                              <4> %xdefine imm 0
     4                              <4> 
     4                              <4> section list
     4 0000177E [790E0000]          <4>  dd %%link
     4                              <3> %2:
     4 00001782 E828F6FFFF          <2>  call doconstant
     4                              <2> %2_b:
     4 00001787 00000000            <2>  dd %3
     5                              <1>   _var_ '#tib', numtib, 0   ; number of chars in TIB
     5                              <2>  code %1,%2
     5                              <3>  header %1,%2
     5                              <4> [section headers]
     5 00000E81 [790E0000]          <4>  dd vlink
     5                              <4> %%link:
     5                              <4> %2n:
     5                              <4> %xdefine vlink %%link
     5 00000E85 04                  <4>  db (%%name-$-1)+imm
     5 00000E86 23746962            <4>  db %1
     5                              <4> %%name:
     5 00000E8A [8F170000]          <4>  dd %2
     5                              <4> %xdefine imm 0
     5                              <4> 
     5                              <4> section list
     5 0000178B [850E0000]          <4>  dd %%link
     5                              <3> %2:
     5 0000178F E81BF6FFFF          <2>  call doconstant
     5                              <2> %2_b:
     5 00001794 00000000            <2>  dd %3
     6                              <1>   _var_ "tib", tib, 0       ; address of tib
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 00000E8E [850E0000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 00000E92 03                  <4>  db (%%name-$-1)+imm
     6 00000E93 746962              <4>  db %1
     6                              <4> %%name:
     6 00000E96 [9C170000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 00001798 [920E0000]          <4>  dd %%link
     6                              <3> %2:
     6 0000179C E80EF6FFFF          <2>  call doconstant
     6                              <2> %2_b:
     6 000017A1 00000000            <2>  dd %3
     7                              <1> 
     8                              <1> ; ------------------------------------------------------------------------
     9                              <1> ; default input source address and char count
    10                              <1> 
    11                              <1> ;       ( --- a1 n1 )
    12                              <1> 
    13                              <1> colon '(source)', psource
    13                              <2>  header %1,%2
    13                              <3> [section headers]
    13 00000E9A [920E0000]          <3>  dd vlink
    13                              <3> %%link:
    13                              <3> %2n:
    13                              <3> %xdefine vlink %%link
    13 00000E9E 08                  <3>  db (%%name-$-1)+imm
    13 00000E9F 28736F7572636529    <3>  db %1
    13                              <3> %%name:
    13 00000EA7 [A9170000]          <3>  dd %2
    13                              <3> %xdefine imm 0
    13                              <3> 
    13                              <3> section list
    13 000017A5 [9E0E0000]          <3>  dd %%link
    13                              <2> %2:
    13 000017A9 E8BAF5FFFF          <2>  call nest
    13                              <2> %2_b:
    14 000017AE [9C170000]          <1>   dd tib                    ; get address of terminal input buff
    15 000017B2 [8F170000]          <1>   dd numtib                 ; get char count
    16 000017B6 [740D0000]          <1>   dd exit
    17                              <1> 
    18                              <1> ; ------------------------------------------------------------------------
    19                              <1> ; return # characters as yet unparsed in tib
    20                              <1> 
    21                              <1> ;       ( --- n1 )
    22                              <1> 
    23                              <1> colon 'left', left
    23                              <2>  header %1,%2
    23                              <3> [section headers]
    23 00000EAB [9E0E0000]          <3>  dd vlink
    23                              <3> %%link:
    23                              <3> %2n:
    23                              <3> %xdefine vlink %%link
    23 00000EAF 04                  <3>  db (%%name-$-1)+imm
    23 00000EB0 6C656674            <3>  db %1
    23                              <3> %%name:
    23 00000EB4 [BE170000]          <3>  dd %2
    23                              <3> %xdefine imm 0
    23                              <3> 
    23                              <3> section list
    23 000017BA [AF0E0000]          <3>  dd %%link
    23                              <2> %2:
    23 000017BE E8A5F5FFFF          <2>  call nest
    23                              <2> %2_b:
    24 000017C3 [8F170000]          <1>   dd numtib                 ; number of chars in tib (total)
    25 000017C7 [82170000]          <1>   dd toin                   ; how far we have parsed
    26 000017CB [130A0000]          <1>   dd minus                  ; calculate difference
    27 000017CF [740D0000]          <1>   dd exit
    28                              <1> 
    29                              <1> ; ------------------------------------------------------------------------
    30                              <1> 
    31                              <1> colon '?refill', qrefill
    31                              <2>  header %1,%2
    31                              <3> [section headers]
    31 00000EB8 [AF0E0000]          <3>  dd vlink
    31                              <3> %%link:
    31                              <3> %2n:
    31                              <3> %xdefine vlink %%link
    31 00000EBC 07                  <3>  db (%%name-$-1)+imm
    31 00000EBD 3F726566696C6C      <3>  db %1
    31                              <3> %%name:
    31 00000EC4 [D7170000]          <3>  dd %2
    31                              <3> %xdefine imm 0
    31                              <3> 
    31                              <3> section list
    31 000017D3 [BC0E0000]          <3>  dd %%link
    31                              <2> %2:
    31 000017D7 E88CF5FFFF          <2>  call nest
    31                              <2> %2_b:
    32 000017DC [BE170000]-         <1>   dd left, qexit            ; if there is nothing left to parse out of tib
    32 000017E0 [800D0000]          <1>
    33 000017E4 [2F240000]          <1>   dd refill                 ; refill tib from input stream
    34 000017E8 [740D0000]          <1>   dd exit
    35                              <1> 
    36                              <1> ; ------------------------------------------------------------------------
    37                              <1> ; parse a word from input, delimited by c1
    38                              <1> 
    39                              <1> ;       ( c1 --- a1 n1 )
    40                              <1> 
    41                              <1> colon 'parse', parse
    41                              <2>  header %1,%2
    41                              <3> [section headers]
    41 00000EC8 [BC0E0000]          <3>  dd vlink
    41                              <3> %%link:
    41                              <3> %2n:
    41                              <3> %xdefine vlink %%link
    41 00000ECC 05                  <3>  db (%%name-$-1)+imm
    41 00000ECD 7061727365          <3>  db %1
    41                              <3> %%name:
    41 00000ED2 [F0170000]          <3>  dd %2
    41                              <3> %xdefine imm 0
    41                              <3> 
    41                              <3> section list
    41 000017EC [CC0E0000]          <3>  dd %%link
    41                              <2> %2:
    41 000017F0 E873F5FFFF          <2>  call nest
    41                              <2> %2_b:
    42 000017F5 [E1030000]          <1>   dd tor
    43 000017F9 [22240000]-         <1>   dd source, toin
    43 000017FD [82170000]          <1>
    44 00001801 [C6120000]-         <1>   dd sstring, over, swap
    44 00001805 [60030000]-         <1>
    44 00001809 [18030000]          <1>
    45 0000180D [01040000]          <1>   dd rto
    46 00001811 [EF150000]-         <1>   dd scan_eol, tor
    46 00001815 [E1030000]          <1>
    47 00001819 [60030000]-         <1>   dd over, minus, dup
    47 0000181D [130A0000]-         <1>
    47 00001821 [E2020000]          <1>
    48 00001825 [01040000]-         <1>   dd rto, znotequals, minus
    48 00001829 [DD080000]-         <1>
    48 0000182D [130A0000]          <1>
    49 00001831 [370E0000]-         <1>   dd zplusstoreto, toin_b
    49 00001835 [87170000]          <1>
    50 00001839 [740D0000]          <1>   dd exit
    51                              <1> 
    52                              <1> ; ------------------------------------------------------------------------
    53                              <1> ; like parse but skips leading delimiters - used by word
    54                              <1> 
    55                              <1> ;       ( c1 --- a1 n1 )
    56                              <1> 
    57                              <1> colon 'parse-word', parseword
    57                              <2>  header %1,%2
    57                              <3> [section headers]
    57 00000ED6 [CC0E0000]          <3>  dd vlink
    57                              <3> %%link:
    57                              <3> %2n:
    57                              <3> %xdefine vlink %%link
    57 00000EDA 0A                  <3>  db (%%name-$-1)+imm
    57 00000EDB 70617273652D776F72- <3>  db %1
    57 00000EE4 64                  <3>
    57                              <3> %%name:
    57 00000EE5 [41180000]          <3>  dd %2
    57                              <3> %xdefine imm 0
    57                              <3> 
    57                              <3> section list
    57 0000183D [DA0E0000]          <3>  dd %%link
    57                              <2> %2:
    57 00001841 E822F5FFFF          <2>  call nest
    57                              <2> %2_b:
    58 00001846 [E1030000]          <1>   dd tor
    59 0000184A [22240000]-         <1>   dd source, tuck
    59 0000184E [7A030000]          <1>
    60 00001852 [82170000]-         <1>   dd toin, sstring
    60 00001856 [C6120000]          <1>
    61 0000185A [3B040000]-         <1>   dd rfetch, skip
    61 0000185E [8A150000]          <1>
    62 00001862 [60030000]-         <1>   dd over, swap
    62 00001866 [18030000]          <1>
    63 0000186A [01040000]-         <1>   dd rto, scan_eol
    63 0000186E [EF150000]          <1>
    64 00001872 [E1030000]          <1>   dd tor
    65 00001876 [60030000]-         <1>   dd over, minus
    65 0000187A [130A0000]          <1>
    66 0000187E [A0030000]-         <1>   dd rot, rto
    66 00001882 [01040000]          <1>
    67 00001886 [E2020000]-         <1>   dd dup, znotequals, plus
    67 0000188A [DD080000]-         <1>
    67 0000188E [070A0000]          <1>
    68 00001892 [130A0000]          <1>   dd minus
    69 00001896 [F20D0000]-         <1>   dd zstoreto, toin_b
    69 0000189A [87170000]          <1>
    70 0000189E [740D0000]          <1>   dd exit
    71                              <1> 
    72                              <1> ; ------------------------------------------------------------------------
    73                              <1> ; parse string from input. refills tib if empty
    74                              <1> 
    75                              <1> ;       ( c1 --- )
    76                              <1> 
    77                              <1> colon 'word', word_
    77                              <2>  header %1,%2
    77                              <3> [section headers]
    77 00000EE9 [DA0E0000]          <3>  dd vlink
    77                              <3> %%link:
    77                              <3> %2n:
    77                              <3> %xdefine vlink %%link
    77 00000EED 04                  <3>  db (%%name-$-1)+imm
    77 00000EEE 776F7264            <3>  db %1
    77                              <3> %%name:
    77 00000EF2 [A6180000]          <3>  dd %2
    77                              <3> %xdefine imm 0
    77                              <3> 
    77                              <3> section list
    77 000018A2 [ED0E0000]          <3>  dd %%link
    77                              <2> %2:
    77 000018A6 E8BDF4FFFF          <2>  call nest
    77                              <2> %2_b:
    78 000018AB [D7170000]          <1>   dd qrefill
    79 000018AF [41180000]          <1>   dd parseword              ; ( a1 n1 --- )
    80 000018B3 [C51A0000]-         <1>   dd hhere, strstore        ; copy string to hhere
    80 000018B7 [07080000]          <1>
    81 000018BB [740D0000]          <1>   dd exit
    82                              <1> 
    83                              <1> ; ========================================================================
   122                                  
   123                                  ; ------------------------------------------------------------------------
   124                                  ; chain words on compiler vocabulary
   125                                  
   126                                    _compiler_
   126                              <1>  save_link
   126                              <2>  %if(voc = 0)
   126                              <2>  %xdefine forth_link vlink
   126                              <2>  %elif(voc = 1)
   126                              <2>  %xdefine comp_link vlink
   126                              <2>  %else
   126                              <2>  %xdefine root_link vlink
   126                              <2>  %endif
   126                              <1>  %xdefine vlink comp_link
   126                              <1>  %define voc 1
   127                                  
   128                                    %include "comment.s"      ; important and often neglected
     1                              <1> ; comment.s
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _immediate_
     6                              <2>  %xdefine imm IMM
     7                              <1> 
     8                              <1> colon '\', backslash   ; '
     8                              <2>  header %1,%2
     8                              <3> [section headers]
     8 00000EF6 00000000            <3>  dd vlink
     8                              <3> %%link:
     8                              <3> %2n:
     8                              <3> %xdefine vlink %%link
     8 00000EFA 41                  <3>  db (%%name-$-1)+imm
     8 00000EFB 5C                  <3>  db %1
     8                              <3> %%name:
     8 00000EFC [C3180000]          <3>  dd %2
     8                              <3> %xdefine imm 0
     8                              <3> 
     8                              <3> section list
     8 000018BF [FA0E0000]          <3>  dd %%link
     8                              <2> %2:
     8 000018C3 E8A0F4FFFF          <2>  call nest
     8                              <2> %2_b:
     9 000018C8 [D00D0000]0A000000  <1>   dd plit, 0xa
    10 000018D0 [F0170000]-         <1>   dd parse, drop2
    10 000018D4 [46030000]          <1>
    11 000018D8 [740D0000]          <1>   dd exit
    12                              <1> 
    13                              <1> ; ------------------------------------------------------------------------
    14                              <1> ; stack comment - ignore everything in input stream till next )
    15                              <1> 
    16                              <1>   _immediate_
    16                              <2>  %xdefine imm IMM
    17                              <1> 
    18                              <1> colon '(', lparen
    18                              <2>  header %1,%2
    18                              <3> [section headers]
    18 00000F00 [FA0E0000]          <3>  dd vlink
    18                              <3> %%link:
    18                              <3> %2n:
    18                              <3> %xdefine vlink %%link
    18 00000F04 41                  <3>  db (%%name-$-1)+imm
    18 00000F05 28                  <3>  db %1
    18                              <3> %%name:
    18 00000F06 [E0180000]          <3>  dd %2
    18                              <3> %xdefine imm 0
    18                              <3> 
    18                              <3> section list
    18 000018DC [040F0000]          <3>  dd %%link
    18                              <2> %2:
    18 000018E0 E883F4FFFF          <2>  call nest
    18                              <2> %2_b:
    19 000018E5 [D00D0000]29000000  <1>   dd plit, ')'
    20 000018ED [F0170000]-         <1>   dd parse, drop2
    20 000018F1 [46030000]          <1>
    21 000018F5 [740D0000]          <1>   dd exit
    22                              <1> 
    23                              <1> ; ------------------------------------------------------------------------
    24                              <1> ; ignore but echo evrything till next ) in input stream
    25                              <1> 
    26                              <1>   _immediate_
    26                              <2>  %xdefine imm IMM
    27                              <1> 
    28                              <1> colon '.(', dotlparen
    28                              <2>  header %1,%2
    28                              <3> [section headers]
    28 00000F0A [040F0000]          <3>  dd vlink
    28                              <3> %%link:
    28                              <3> %2n:
    28                              <3> %xdefine vlink %%link
    28 00000F0E 42                  <3>  db (%%name-$-1)+imm
    28 00000F0F 2E28                <3>  db %1
    28                              <3> %%name:
    28 00000F11 [FD180000]          <3>  dd %2
    28                              <3> %xdefine imm 0
    28                              <3> 
    28                              <3> section list
    28 000018F9 [0E0F0000]          <3>  dd %%link
    28                              <2> %2:
    28 000018FD E866F4FFFF          <2>  call nest
    28                              <2> %2_b:
    29 00001902 [D00D0000]29000000  <1>   dd plit, ')'
    30 0000190A [F0170000]-         <1>   dd parse, type
    30 0000190E [7D110000]          <1>
    31 00001912 [740D0000]          <1>   dd exit
    32                              <1> 
    33                              <1> ; ------------------------------------------------------------------------
    34                              <1> ; ignore whole of rest of file
    35                              <1> 
    36                              <1>   _immediate_
    36                              <2>  %xdefine imm IMM
    37                              <1> 
    38                              <1> colon '\s', backs
    38                              <2>  header %1,%2
    38                              <3> [section headers]
    38 00000F15 [0E0F0000]          <3>  dd vlink
    38                              <3> %%link:
    38                              <3> %2n:
    38                              <3> %xdefine vlink %%link
    38 00000F19 42                  <3>  db (%%name-$-1)+imm
    38 00000F1A 5C73                <3>  db %1
    38                              <3> %%name:
    38 00000F1C [1A190000]          <3>  dd %2
    38                              <3> %xdefine imm 0
    38                              <3> 
    38                              <3> section list
    38 00001916 [190F0000]          <3>  dd %%link
    38                              <2> %2:
    38 0000191A E849F4FFFF          <2>  call nest
    38                              <2> %2_b:
    39 0000191F [1D200000]          <1>   dd floads
    40 00001923 [9A0D0000]-         <1>   dd qcolon, abortfload, noop
    40 00001927 [84210000]-         <1>
    40 0000192B [FC0C0000]          <1>
    41 0000192F [740D0000]          <1>   dd exit
    42                              <1> 
    43                              <1> ; ------------------------------------------------------------------------
    44                              <1> ; belongs in comment.f but cant define it there and need it here
    45                              <1> 
    46                              <1>   _immediate_
    46                              <2>  %xdefine imm IMM
    47                              <1> 
    48                              <1> colon "\\s", xs
    48                              <2>  header %1,%2
    48                              <3> [section headers]
    48 00000F20 [190F0000]          <3>  dd vlink
    48                              <3> %%link:
    48                              <3> %2n:
    48                              <3> %xdefine vlink %%link
    48 00000F24 43                  <3>  db (%%name-$-1)+imm
    48 00000F25 5C5C73              <3>  db %1
    48                              <3> %%name:
    48 00000F28 [37190000]          <3>  dd %2
    48                              <3> %xdefine imm 0
    48                              <3> 
    48                              <3> section list
    48 00001933 [240F0000]          <3>  dd %%link
    48                              <2> %2:
    48 00001937 E82CF4FFFF          <2>  call nest
    48                              <2> %2_b:
    49 0000193C [B00E0000]          <1>   dd dobegin
    50                              <1> .L0:
    51 00001940 [1D200000]          <1>   dd floads                 ; close all in progress floads
    52 00001944 [ED0E0000]-         <1>   dd qwhile, .L1
    52 00001948 [58190000]          <1>
    53 0000194C [84210000]          <1>   dd abortfload
    54 00001950 [D00E0000]-         <1>   dd dorepeat, .L0
    54 00001954 [40190000]          <1>
    55                              <1> .L1:
    56 00001958 [740D0000]          <1>   dd exit
    57                              <1> 
    58                              <1> ; ========================================================================
    59                              <1> 
   129                                    %include "find.s"         ; dictionary searches
     1                              <1> ; find.s   - x4 dictionary searches
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; calculate hash value (thread number) for counted string at a1
     6                              <1> 
     7                              <1> ;       ( a1 --- thread )
     8                              <1> 
     9                              <1> code "hash", hash
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 00000F2C [240F0000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 00000F30 04                  <3>  db (%%name-$-1)+imm
     9 00000F31 68617368            <3>  db %1
     9                              <3> %%name:
     9 00000F35 [60190000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 0000195C [300F0000]          <3>  dd %%link
     9                              <2> %2:
    10 00001960 668B03              <1>   mov ax, [ebx]             ; get count byte and first char of name
    11 00001963 241F                <1>   and al, LEX               ; mask out lex bits
    12 00001965 00E4                <1>   add ah, ah                ; double char 1
    13 00001967 3C01                <1>   cmp al, 1                 ; only 1 char in name ?
    14 00001969 7405                <1>   je .L1
    15 0000196B 026302              <1>   add ah, [ebx+2]           ; add second char
    16 0000196E 00E4                <1>   add ah, ah                ; and double again
    17                              <1> .L1:
    18 00001970 00E0                <1>   add al, ah                ; add to length byte
    19 00001972 83E03F              <1>   and eax, 03fh             ; 64 threads per vocabulary
    20 00001975 89C3                <1>   mov ebx, eax
    21 00001977 C1E302              <1>   shl ebx, 2                ; 4 bytes per thread
    22                              <1>   next
    22 0000197A E98CF3FFFF          <2>  jmp _next
    23                              <1> 
    24                              <1> ; ------------------------------------------------------------------------
    25                              <1> ; search one dictionary thread for specified word (at hhere)
    26                              <1> 
    27                              <1> ;   ( thread --- cfa f1 | false )
    28                              <1> 
    29                              <1> ;   f1: 1 if immediate, -1 otherwise
    30                              <1> 
    31                              <1> code '(find)', pfind
    31                              <2>  header %1,%2
    31                              <3> [section headers]
    31 00000F39 [300F0000]          <3>  dd vlink
    31                              <3> %%link:
    31                              <3> %2n:
    31                              <3> %xdefine vlink %%link
    31 00000F3D 06                  <3>  db (%%name-$-1)+imm
    31 00000F3E 2866696E6429        <3>  db %1
    31                              <3> %%name:
    31 00000F44 [83190000]          <3>  dd %2
    31                              <3> %xdefine imm 0
    31                              <3> 
    31                              <3> section list
    31 0000197F [3D0F0000]          <3>  dd %%link
    31                              <2> %2:
    32 00001983 09DB                <1>   or ebx, ebx               ; empty thread?
    33 00001985 7441                <1>   jz .L3                    ; if so get out now
    34                              <1> 
    35 00001987 56                  <1>   push esi                  ; save forths ip, we need this register
    36 00001988 8B3D[041C0000]      <1>   mov edi, [hp_b]           ; point to string to search for
    37 0000198E 0FB60F              <1>   movzx ecx, byte [edi]     ; get string length
    38 00001991 47                  <1>   inc edi                   ; point to string
    39                              <1> 
    40                              <1> .L0:                        ; main loop of search
    41 00001992 8A03                <1>   mov al, [ebx]             ; get count byte from dictionary entry
    42 00001994 241F                <1>   and al, LEX               ; mask out lex bits
    43 00001996 38C8                <1>   cmp al, cl                ; lengths match ?
    44 00001998 740D                <1>   je .L2
    45                              <1> 
    46                              <1> .L1:                        ; not a match
    47 0000199A 8B5BFC              <1>   mov ebx, [ebx-4]          ; scan back to next word in dictionary
    48 0000199D 09DB                <1>   or ebx, ebx               ; end of chain?
    49 0000199F 75F1                <1>   jne .L0
    50 000019A1 5E                  <1>   pop esi                   ; restore ip
    51                              <1>   next
    51 000019A2 E964F3FFFF          <2>  jmp _next
    52                              <1> 
    53                              <1> .L2:                        ; length bytes match...
    54 000019A7 57                  <1>   push edi                  ; keep copy of string address
    55 000019A8 51                  <1>   push ecx                  ; and length
    56                              <1> 
    57 000019A9 89DE                <1>   mov esi, ebx              ; point esi at dictionary entry
    58 000019AB 46                  <1>   inc esi                   ; skip count byte
    59 000019AC F3A6                <1>   repe cmpsb                ; compare strings
    60                              <1> 
    61 000019AE 59                  <1>   pop ecx                   ; retrieve length and address of string
    62 000019AF 5F                  <1>   pop edi
    63 000019B0 75E8                <1>   jne .L1                   ; was the above a match ?
    64                              <1> 
    65 000019B2 5E                  <1>   pop esi                   ; match found!
    66 000019B3 FF740B01            <1>   push dword [ebx+ecx+1]    ; return cfa of word that matched
    67                              <1> 
    68 000019B7 0FB603              <1>   movzx eax, byte [ebx]     ; get count byte of matched word
    69 000019BA BB01000000          <1>   mov ebx, 1                ; assume word is immediate
    70 000019BF A940000000          <1>   test eax, IMM             ; is it ?
    71 000019C4 7502                <1>   jne .L3
    72 000019C6 F7DB                <1>   neg ebx                   ; no
    73                              <1> 
    74                              <1> .L3:
    75                              <1>   next
    75 000019C8 E93EF3FFFF          <2>  jmp _next
    76                              <1> 
    77                              <1> ; ------------------------------------------------------------------------
    78                              <1> ; search all vocabularies that are in context for word name at hhere
    79                              <1> 
    80                              <1> ;    ( --- cfa f1 | false )
    81                              <1> 
    82                              <1> colon 'find', find
    82                              <2>  header %1,%2
    82                              <3> [section headers]
    82 00000F48 [3D0F0000]          <3>  dd vlink
    82                              <3> %%link:
    82                              <3> %2n:
    82                              <3> %xdefine vlink %%link
    82 00000F4C 04                  <3>  db (%%name-$-1)+imm
    82 00000F4D 66696E64            <3>  db %1
    82                              <3> %%name:
    82 00000F51 [D1190000]          <3>  dd %2
    82                              <3> %xdefine imm 0
    82                              <3> 
    82                              <3> section list
    82 000019CD [4C0F0000]          <3>  dd %%link
    82                              <2> %2:
    82 000019D1 E892F3FFFF          <2>  call nest
    82                              <2> %2_b:
    83 000019D6 [C51A0000]-         <1>   dd hhere, hash            ; precalculate hash of item to search for
    83 000019DA [60190000]          <1>
    84 000019DE [9C260000]-         <1>   dd context, numcontext    ; get address and depth of context stack
    84 000019E2 [A9260000]          <1>
    85 000019E6 [A20F0000]-         <1>   dd dofor, .L2             ; for each voc in context
    85 000019EA [361A0000]          <1>
    86                              <1> .L0:
    87 000019EE [E2020000]          <1>   dd dup
    88 000019F2 [3B040000]-         <1>   dd rfetch, cells_fetch    ; collect the voc address
    88 000019F6 [5E050000]          <1>
    89 000019FA [86030000]-         <1>   dd pluck, plus, fetch     ; index to hashed bucket
    89 000019FE [070A0000]-         <1>
    89 00001A02 [7A050000]          <1>
    90 00001A06 [83190000]-         <1>   dd pfind, qdup            ; search for word thats at hhere
    90 00001A0A [EC020000]          <1>
    91 00001A0E [E70E0000]-         <1>   dd doif, .L1
    91 00001A12 [2E1A0000]          <1>
    92 00001A16 [F0030000]-         <1>   dd tor2, drop2, rto2      ; found it, clean up, return -1 or 1
    92 00001A1A [46030000]-         <1>
    92 00001A1E [10040000]          <1>
    93 00001A22 [2F040000]-         <1>   dd rdrop, exit
    93 00001A26 [740D0000]          <1>
    94 00001A2A [A70E0000]          <1>   dd dothen
    95                              <1> .L1:
    96 00001A2E [B80F0000]-         <1>   dd pnxt, .L0
    96 00001A32 [EE190000]          <1>
    97                              <1> .L2:
    98 00001A36 [46030000]-         <1>   dd drop2, false           ; not found, clean up, return false
    98 00001A3A [76080000]          <1>
    99 00001A3E [740D0000]          <1>   dd exit
   100                              <1> 
   101                              <1> ; ------------------------------------------------------------------------
   102                              <1> ; abort if f1 is false (used after a find :)
   103                              <1> 
   104                              <1> ;       ( f1 --- )
   105                              <1> 
   106                              <1> colon '?missing', qmissing
   106                              <2>  header %1,%2
   106                              <3> [section headers]
   106 00000F55 [4C0F0000]          <3>  dd vlink
   106                              <3> %%link:
   106                              <3> %2n:
   106                              <3> %xdefine vlink %%link
   106 00000F59 08                  <3>  db (%%name-$-1)+imm
   106 00000F5A 3F6D697373696E67    <3>  db %1
   106                              <3> %%name:
   106 00000F62 [461A0000]          <3>  dd %2
   106                              <3> %xdefine imm 0
   106                              <3> 
   106                              <3> section list
   106 00001A42 [590F0000]          <3>  dd %%link
   106                              <2> %2:
   106 00001A46 E81DF3FFFF          <2>  call nest
   106                              <2> %2_b:
   107 00001A4B [B2080000]-         <1>   dd zequals, qexit         ; is word specified defined?
   107 00001A4F [800D0000]          <1>
   108 00001A53 [C51A0000]-         <1>   dd hhere, count           ; display name of unknown word
   108 00001A57 [D7050000]          <1>
   109 00001A5B [D7110000]-         <1>   dd space, type
   109 00001A5F [7D110000]          <1>
   110 00001A63 [69080000]-         <1>   dd true, pabortq          ; and abort
   110 00001A67 [8D120000]          <1>
   111 00001A6B 02203F              <1>   db 2,' ?'
   112 00001A6E [740D0000]          <1>   dd exit
   113                              <1> 
   114                              <1> ; ------------------------------------------------------------------------
   115                              <1> ; parse input stream and see if word is defined anywhere in search order
   116                              <1> 
   117                              <1> ;     ( --- f1 | false )
   118                              <1> 
   119                              <1> colon 'defined', defined
   119                              <2>  header %1,%2
   119                              <3> [section headers]
   119 00000F66 [590F0000]          <3>  dd vlink
   119                              <3> %%link:
   119                              <3> %2n:
   119                              <3> %xdefine vlink %%link
   119 00000F6A 07                  <3>  db (%%name-$-1)+imm
   119 00000F6B 646566696E6564      <3>  db %1
   119                              <3> %%name:
   119 00000F72 [761A0000]          <3>  dd %2
   119                              <3> %xdefine imm 0
   119                              <3> 
   119                              <3> section list
   119 00001A72 [6A0F0000]          <3>  dd %%link
   119                              <2> %2:
   119 00001A76 E8EDF2FFFF          <2>  call nest
   119                              <2> %2_b:
   120 00001A7B [6B100000]-         <1>   dd bl_, word_             ; parse space delimited string from input
   120 00001A7F [A6180000]          <1>
   121 00001A83 [D1190000]          <1>   dd find                   ; search dictionary for a word of this name
   122 00001A87 [740D0000]          <1>   dd exit
   123                              <1> 
   124                              <1> ; ------------------------------------------------------------------------
   125                              <1> ; find cfa of word specified in input stream
   126                              <1> 
   127                              <1> ; return cfa of word parsed out of input stream. abort if not found
   128                              <1> 
   129                              <1> colon "'", tick
   129                              <2>  header %1,%2
   129                              <3> [section headers]
   129 00000F76 [6A0F0000]          <3>  dd vlink
   129                              <3> %%link:
   129                              <3> %2n:
   129                              <3> %xdefine vlink %%link
   129 00000F7A 01                  <3>  db (%%name-$-1)+imm
   129 00000F7B 27                  <3>  db %1
   129                              <3> %%name:
   129 00000F7C [8F1A0000]          <3>  dd %2
   129                              <3> %xdefine imm 0
   129                              <3> 
   129                              <3> section list
   129 00001A8B [7A0F0000]          <3>  dd %%link
   129                              <2> %2:
   129 00001A8F E8D4F2FFFF          <2>  call nest
   129                              <2> %2_b:
   130 00001A94 [761A0000]-         <1>   dd defined, zequals       ; is next word in input stream defined ?
   130 00001A98 [B2080000]          <1>
   131 00001A9C [461A0000]          <1>   dd qmissing               ; if not then abort
   132 00001AA0 [740D0000]          <1>   dd exit
   133                              <1> 
   134                              <1> ; ========================================================================
   130                                    %include "header.s"       ; word header creation
     1                              <1> ; header.s
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; name hash of most recently defined word.
     6                              <1> 
     7                              <1> ; this selects which thread of the current vocabulary the new word will
     8                              <1> ; be linked to when it is revealed
     9                              <1> 
    10                              <1>   _var_ 'thread', thread, 0
    10                              <2>  code %1,%2
    10                              <3>  header %1,%2
    10                              <4> [section headers]
    10 00000F80 [7A0F0000]          <4>  dd vlink
    10                              <4> %%link:
    10                              <4> %2n:
    10                              <4> %xdefine vlink %%link
    10 00000F84 06                  <4>  db (%%name-$-1)+imm
    10 00000F85 746872656164        <4>  db %1
    10                              <4> %%name:
    10 00000F8B [A81A0000]          <4>  dd %2
    10                              <4> %xdefine imm 0
    10                              <4> 
    10                              <4> section list
    10 00001AA4 [840F0000]          <4>  dd %%link
    10                              <3> %2:
    10 00001AA8 E802F3FFFF          <2>  call doconstant
    10                              <2> %2_b:
    10 00001AAD 00000000            <2>  dd %3
    11                              <1> 
    12                              <1> ; ------------------------------------------------------------------------
    13                              <1> ; return next free dictionary address
    14                              <1> 
    15                              <1> ;       ( --- a1 )
    16                              <1> 
    17                              <1> code 'here', here
    17                              <2>  header %1,%2
    17                              <3> [section headers]
    17 00000F8F [840F0000]          <3>  dd vlink
    17                              <3> %%link:
    17                              <3> %2n:
    17                              <3> %xdefine vlink %%link
    17 00000F93 04                  <3>  db (%%name-$-1)+imm
    17 00000F94 68657265            <3>  db %1
    17                              <3> %%name:
    17 00000F98 [B51A0000]          <3>  dd %2
    17                              <3> %xdefine imm 0
    17                              <3> 
    17                              <3> section list
    17 00001AB1 [930F0000]          <3>  dd %%link
    17                              <2> %2:
    18 00001AB5 53                  <1>   push ebx                  ; save top of stack cache
    19 00001AB6 8B1D[F71B0000]      <1>   mov ebx, dword [dp_b]     ; return dp
    20                              <1>   next
    20 00001ABC E94AF2FFFF          <2>  jmp _next
    21                              <1> 
    22                              <1> ; ------------------------------------------------------------------------
    23                              <1> ; return next free head space address
    24                              <1> 
    25                              <1> ;       ( --- a1 )
    26                              <1> 
    27                              <1> code 'hhere', hhere
    27                              <2>  header %1,%2
    27                              <3> [section headers]
    27 00000F9C [930F0000]          <3>  dd vlink
    27                              <3> %%link:
    27                              <3> %2n:
    27                              <3> %xdefine vlink %%link
    27 00000FA0 05                  <3>  db (%%name-$-1)+imm
    27 00000FA1 6868657265          <3>  db %1
    27                              <3> %%name:
    27 00000FA6 [C51A0000]          <3>  dd %2
    27                              <3> %xdefine imm 0
    27                              <3> 
    27                              <3> section list
    27 00001AC1 [A00F0000]          <3>  dd %%link
    27                              <2> %2:
    28 00001AC5 53                  <1>   push ebx                  ; save top of stack cache
    29 00001AC6 8B1D[041C0000]      <1>   mov ebx, dword [hp_b]     ; return hp
    30                              <1>   next
    30 00001ACC E93AF2FFFF          <2>  jmp _next
    31                              <1> 
    32                              <1> ; ------------------------------------------------------------------------
    33                              <1> ; word to mask out lex (immdiate etc) bits from a count byte
    34                              <1> 
    35                              <1> ;       ( n1 --- n1` )
    36                              <1> 
    37                              <1> code 'lexmask', lexmask
    37                              <2>  header %1,%2
    37                              <3> [section headers]
    37 00000FAA [A00F0000]          <3>  dd vlink
    37                              <3> %%link:
    37                              <3> %2n:
    37                              <3> %xdefine vlink %%link
    37 00000FAE 07                  <3>  db (%%name-$-1)+imm
    37 00000FAF 6C65786D61736B      <3>  db %1
    37                              <3> %%name:
    37 00000FB6 [D51A0000]          <3>  dd %2
    37                              <3> %xdefine imm 0
    37                              <3> 
    37                              <3> section list
    37 00001AD1 [AE0F0000]          <3>  dd %%link
    37                              <2> %2:
    38 00001AD5 83E31F              <1>   and ebx, LEX              ; mask out everything except length bits
    39                              <1>   next                      ; max lengh for word name is 32 charactes
    39 00001AD8 E92EF2FFFF          <2>  jmp _next
    40                              <1> 
    41                              <1> ; ------------------------------------------------------------------------
    42                              <1> ; move from code field address to body field address
    43                              <1> 
    44                              <1> ;       ( a1 --- a2 )
    45                              <1> 
    46                              <1> code '>body', tobody
    46                              <2>  header %1,%2
    46                              <3> [section headers]
    46 00000FBA [AE0F0000]          <3>  dd vlink
    46                              <3> %%link:
    46                              <3> %2n:
    46                              <3> %xdefine vlink %%link
    46 00000FBE 05                  <3>  db (%%name-$-1)+imm
    46 00000FBF 3E626F6479          <3>  db %1
    46                              <3> %%name:
    46 00000FC4 [E11A0000]          <3>  dd %2
    46                              <3> %xdefine imm 0
    46                              <3> 
    46                              <3> section list
    46 00001ADD [BE0F0000]          <3>  dd %%link
    46                              <2> %2:
    47 00001AE1 83C305              <1>   add ebx, byte BODY        ; call instruction in cfa is 5 bytes
    48                              <1>   next
    48 00001AE4 E922F2FFFF          <2>  jmp _next
    49                              <1> 
    50                              <1> ; ------------------------------------------------------------------------
    51                              <1> ; move from body field address back to code field address
    52                              <1> 
    53                              <1> ;       ( a1 --- a2 )
    54                              <1> 
    55                              <1> code 'body>', bodyto
    55                              <2>  header %1,%2
    55                              <3> [section headers]
    55 00000FC8 [BE0F0000]          <3>  dd vlink
    55                              <3> %%link:
    55                              <3> %2n:
    55                              <3> %xdefine vlink %%link
    55 00000FCC 05                  <3>  db (%%name-$-1)+imm
    55 00000FCD 626F64793E          <3>  db %1
    55                              <3> %%name:
    55 00000FD2 [ED1A0000]          <3>  dd %2
    55                              <3> %xdefine imm 0
    55                              <3> 
    55                              <3> section list
    55 00001AE9 [CC0F0000]          <3>  dd %%link
    55                              <2> %2:
    56 00001AED 83EB05              <1>   sub ebx, byte BODY        ; skip back to call instruction in cfa
    57                              <1>   next
    57 00001AF0 E916F2FFFF          <2>  jmp _next
    58                              <1> 
    59                              <1> ; ------------------------------------------------------------------------
    60                              <1> ; move from name field to link field
    61                              <1> 
    62                              <1> ;       ( a1 --- a2 )
    63                              <1> 
    64                              <1> code 'n>link', ntolink
    64                              <2>  header %1,%2
    64                              <3> [section headers]
    64 00000FD6 [CC0F0000]          <3>  dd vlink
    64                              <3> %%link:
    64                              <3> %2n:
    64                              <3> %xdefine vlink %%link
    64 00000FDA 06                  <3>  db (%%name-$-1)+imm
    64 00000FDB 6E3E6C696E6B        <3>  db %1
    64                              <3> %%name:
    64 00000FE1 [F91A0000]          <3>  dd %2
    64                              <3> %xdefine imm 0
    64                              <3> 
    64                              <3> section list
    64 00001AF5 [DA0F0000]          <3>  dd %%link
    64                              <2> %2:
    65 00001AF9 83EB04              <1>   sub ebx, byte CELL        ; link field is 4 bytes just behind nfa
    66                              <1>   next
    66 00001AFC E90AF2FFFF          <2>  jmp _next
    67                              <1> 
    68                              <1> ; ------------------------------------------------------------------------
    69                              <1> ; move from link field to name field
    70                              <1> 
    71                              <1> ;       ( a1 --- a2 )
    72                              <1> 
    73                              <1> code 'l>name', linktoname
    73                              <2>  header %1,%2
    73                              <3> [section headers]
    73 00000FE5 [DA0F0000]          <3>  dd vlink
    73                              <3> %%link:
    73                              <3> %2n:
    73                              <3> %xdefine vlink %%link
    73 00000FE9 06                  <3>  db (%%name-$-1)+imm
    73 00000FEA 6C3E6E616D65        <3>  db %1
    73                              <3> %%name:
    73 00000FF0 [051B0000]          <3>  dd %2
    73                              <3> %xdefine imm 0
    73                              <3> 
    73                              <3> section list
    73 00001B01 [E90F0000]          <3>  dd %%link
    73                              <2> %2:
    74 00001B05 83C304              <1>   add ebx, byte CELL        ; link field is 4 bytes
    75                              <1>   next
    75 00001B08 E9FEF1FFFF          <2>  jmp _next
    76                              <1> 
    77                              <1> ; ------------------------------------------------------------------------
    78                              <1> ; move from nfa to cfa
    79                              <1> 
    80                              <1> ;       ( a1 --- a2 )
    81                              <1> 
    82                              <1> colon 'name>', nameto
    82                              <2>  header %1,%2
    82                              <3> [section headers]
    82 00000FF4 [E90F0000]          <3>  dd vlink
    82                              <3> %%link:
    82                              <3> %2n:
    82                              <3> %xdefine vlink %%link
    82 00000FF8 05                  <3>  db (%%name-$-1)+imm
    82 00000FF9 6E616D653E          <3>  db %1
    82                              <3> %%name:
    82 00000FFE [111B0000]          <3>  dd %2
    82                              <3> %xdefine imm 0
    82                              <3> 
    82                              <3> section list
    82 00001B0D [F80F0000]          <3>  dd %%link
    82                              <2> %2:
    82 00001B11 E852F2FFFF          <2>  call nest
    82                              <2> %2_b:
    83 00001B16 [D7050000]          <1>   dd count                  ; convert a1 to a1+1 n1
    84 00001B1A [D51A0000]-         <1>   dd lexmask, plus          ; mask lex bits out of count and add n1 to a1
    84 00001B1E [070A0000]          <1>
    85 00001B22 [7A050000]          <1>   dd fetch                  ; fetch contents of cfa pointer
    86 00001B26 [740D0000]          <1>   dd exit
    87                              <1> 
    88                              <1> ; ------------------------------------------------------------------------
    89                              <1> ; move from cfa to name field
    90                              <1> 
    91                              <1> colon '>name', toname
    91                              <2>  header %1,%2
    91                              <3> [section headers]
    91 00001002 [F80F0000]          <3>  dd vlink
    91                              <3> %%link:
    91                              <3> %2n:
    91                              <3> %xdefine vlink %%link
    91 00001006 05                  <3>  db (%%name-$-1)+imm
    91 00001007 3E6E616D65          <3>  db %1
    91                              <3> %%name:
    91 0000100C [2E1B0000]          <3>  dd %2
    91                              <3> %xdefine imm 0
    91                              <3> 
    91                              <3> section list
    91 00001B2A [06100000]          <3>  dd %%link
    91                              <2> %2:
    91 00001B2E E835F2FFFF          <2>  call nest
    91                              <2> %2_b:
    92 00001B33 [1E050000]-         <1>   dd cellminus, fetch       ; cell preceeding cfa points to nfa
    92 00001B37 [7A050000]          <1>
    93 00001B3B [740D0000]          <1>   dd exit
    94                              <1> 
    95                              <1> ; ------------------------------------------------------------------------
    96                              <1> ; create a new word header
    97                              <1> 
    98                              <1> colon '(head,)', phead
    98                              <2>  header %1,%2
    98                              <3> [section headers]
    98 00001010 [06100000]          <3>  dd vlink
    98                              <3> %%link:
    98                              <3> %2n:
    98                              <3> %xdefine vlink %%link
    98 00001014 07                  <3>  db (%%name-$-1)+imm
    98 00001015 28686561642C29      <3>  db %1
    98                              <3> %%name:
    98 0000101C [431B0000]          <3>  dd %2
    98                              <3> %xdefine imm 0
    98                              <3> 
    98                              <3> section list
    98 00001B3F [14100000]          <3>  dd %%link
    98                              <2> %2:
    98 00001B43 E820F2FFFF          <2>  call nest
    98                              <2> %2_b:
    99 00001B48 [C51A0000]-         <1>   dd hhere, tor             ; remember link field address of new header
    99 00001B4C [E1030000]          <1>
   100 00001B50 [D00D0000]00000000- <1>   dd plit, 0, hcomma        ; dummy link to as yet unknown thread
   100 00001B58 [8D1C0000]          <1>
   101 00001B5C [C51A0000]-         <1>   dd hhere, dup             ; get address where nfa will be compiled
   101 00001B60 [E2020000]          <1>
   102 00001B64 [F20D0000]-         <1>   dd zstoreto, last_b       ; remember address of new words nfa
   102 00001B68 [1A1D0000]          <1>
   103 00001B6C [451C0000]          <1>   dd comma                  ; link cell preceeding cfa to nfa
   104 00001B70 [C51A0000]-         <1>   dd hhere, strstore        ; store string at hhere
   104 00001B74 [07080000]          <1>
   105 00001B78 [8F260000]          <1>   dd current                ; get address of first thread of current voc
   106 00001B7C [C51A0000]-         <1>   dd hhere, hash, plus      ; hash new word name, get thread to link it into
   106 00001B80 [60190000]-         <1>
   106 00001B84 [070A0000]          <1>
   107 00001B88 [E2020000]-         <1>   dd dup, zstoreto, thread_b ; remember address of thread (for reveal)
   107 00001B8C [F20D0000]-         <1>
   107 00001B90 [AD1A0000]          <1>
   108 00001B94 [7A050000]-         <1>   dd fetch, rto, store      ; link new word to previous one in thread
   108 00001B98 [01040000]-         <1>
   108 00001B9C [85050000]          <1>
   109 00001BA0 [C51A0000]-         <1>   dd hhere, cfetch, oneplus ; allocate name field !!
   109 00001BA4 [91050000]-         <1>
   109 00001BA8 [8B0A0000]          <1>
   110 00001BAC [351C0000]          <1>   dd hallot
   111 00001BB0 [B51A0000]-         <1>   dd here, hcomma           ; compile address of cfa into header
   111 00001BB4 [8D1C0000]          <1>
   112 00001BB8 [740D0000]          <1>   dd exit
   113                              <1> 
   114                              <1> ; ------------------------------------------------------------------------
   115                              <1> ; create a new word header in head space
   116                              <1> 
   117                              <1> colon 'head,', headcomma
   117                              <2>  header %1,%2
   117                              <3> [section headers]
   117 00001020 [14100000]          <3>  dd vlink
   117                              <3> %%link:
   117                              <3> %2n:
   117                              <3> %xdefine vlink %%link
   117 00001024 05                  <3>  db (%%name-$-1)+imm
   117 00001025 686561642C          <3>  db %1
   117                              <3> %%name:
   117 0000102A [C01B0000]          <3>  dd %2
   117                              <3> %xdefine imm 0
   117                              <3> 
   117                              <3> section list
   117 00001BBC [24100000]          <3>  dd %%link
   117                              <2> %2:
   117 00001BC0 E8A3F1FFFF          <2>  call nest
   117                              <2> %2_b:
   118 00001BC5 [6B100000]-         <1>   dd bl_, parseword         ; parse name from tib
   118 00001BC9 [41180000]          <1>
   119 00001BCD [431B0000]          <1>   dd phead                  ; create header from name
   120 00001BD1 [740D0000]          <1>   dd exit
   121                              <1> 
   122                              <1> ; ------------------------------------------------------------------------
   123                              <1> ; link most recently created header into current vocabulary chain
   124                              <1> 
   125                              <1> colon 'reveal', reveal
   125                              <2>  header %1,%2
   125                              <3> [section headers]
   125 0000102E [24100000]          <3>  dd vlink
   125                              <3> %%link:
   125                              <3> %2n:
   125                              <3> %xdefine vlink %%link
   125 00001032 06                  <3>  db (%%name-$-1)+imm
   125 00001033 72657665616C        <3>  db %1
   125                              <3> %%name:
   125 00001039 [D91B0000]          <3>  dd %2
   125                              <3> %xdefine imm 0
   125                              <3> 
   125                              <3> section list
   125 00001BD5 [32100000]          <3>  dd %%link
   125                              <2> %2:
   125 00001BD9 E88AF1FFFF          <2>  call nest
   125                              <2> %2_b:
   126 00001BDE [151D0000]          <1>   dd last                   ; get nfa of most recent definition
   127 00001BE2 [A81A0000]          <1>   dd thread                 ; get address of thread to link into
   128 00001BE6 [85050000]          <1>   dd store                  ; link new header into chain
   129 00001BEA [740D0000]          <1>   dd exit
   130                              <1> 
   131                              <1> ; ========================================================================
   131                                    %include "comma.s"        ; the compiler
     1                              <1> ; comma.s
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1>   _variable_ 'dp', dp, _end ; dictionary pointer - dont tuch
     4                              <2>  code %1,%2
     4                              <3>  header %1,%2
     4                              <4> [section headers]
     4 0000103D [32100000]          <4>  dd vlink
     4                              <4> %%link:
     4                              <4> %2n:
     4                              <4> %xdefine vlink %%link
     4 00001041 02                  <4>  db (%%name-$-1)+imm
     4 00001042 6470                <4>  db %1
     4                              <4> %%name:
     4 00001044 [F21B0000]          <4>  dd %2
     4                              <4> %xdefine imm 0
     4                              <4> 
     4                              <4> section list
     4 00001BEE [41100000]          <4>  dd %%link
     4                              <3> %2:
     4 00001BF2 E8C6F1FFFF          <2>  call dovariable
     4                              <2> %2_b:
     4 00001BF7 [C72C0000]          <2>  dd %3
     5                              <1>   _variable_ 'hp', hp, 0    ; head space pointer - dont touch
     5                              <2>  code %1,%2
     5                              <3>  header %1,%2
     5                              <4> [section headers]
     5 00001048 [41100000]          <4>  dd vlink
     5                              <4> %%link:
     5                              <4> %2n:
     5                              <4> %xdefine vlink %%link
     5 0000104C 02                  <4>  db (%%name-$-1)+imm
     5 0000104D 6870                <4>  db %1
     5                              <4> %%name:
     5 0000104F [FF1B0000]          <4>  dd %2
     5                              <4> %xdefine imm 0
     5                              <4> 
     5                              <4> section list
     5 00001BFB [4C100000]          <4>  dd %%link
     5                              <3> %2:
     5 00001BFF E8B9F1FFFF          <2>  call dovariable
     5                              <2> %2_b:
     5 00001C04 00000000            <2>  dd %3
     6                              <1> 
     7                              <1> ; ------------------------------------------------------------------------
     8                              <1> 
     9                              <1> code 'align,', alignc
     9                              <2>  header %1,%2
     9                              <3> [section headers]
     9 00001053 [4C100000]          <3>  dd vlink
     9                              <3> %%link:
     9                              <3> %2n:
     9                              <3> %xdefine vlink %%link
     9 00001057 06                  <3>  db (%%name-$-1)+imm
     9 00001058 616C69676E2C        <3>  db %1
     9                              <3> %%name:
     9 0000105E [0C1C0000]          <3>  dd %2
     9                              <3> %xdefine imm 0
     9                              <3> 
     9                              <3> section list
     9 00001C08 [57100000]          <3>  dd %%link
     9                              <2> %2:
    10 00001C0C A1[F71B0000]        <1>   mov eax, dword [dp_b]
    11 00001C11 83C003              <1>   add eax, byte 3
    12 00001C14 83E0FD              <1>   and eax, byte -3
    13 00001C17 A3[F71B0000]        <1>   mov dword [dp_b], eax
    14                              <1>   next
    14 00001C1C E9EAF0FFFF          <2>  jmp _next
    15                              <1> 
    16                              <1> ; ------------------------------------------------------------------------
    17                              <1> ; alloate n1 bytes of dictionary space
    18                              <1> 
    19                              <1> ;       ( n1 --- )
    20                              <1> 
    21                              <1> code 'allot', allot
    21                              <2>  header %1,%2
    21                              <3> [section headers]
    21 00001062 [57100000]          <3>  dd vlink
    21                              <3> %%link:
    21                              <3> %2n:
    21                              <3> %xdefine vlink %%link
    21 00001066 05                  <3>  db (%%name-$-1)+imm
    21 00001067 616C6C6F74          <3>  db %1
    21                              <3> %%name:
    21 0000106C [251C0000]          <3>  dd %2
    21                              <3> %xdefine imm 0
    21                              <3> 
    21                              <3> section list
    21 00001C21 [66100000]          <3>  dd %%link
    21                              <2> %2:
    22 00001C25 011D[F71B0000]      <1>   add dword [dp_b], ebx     ; add n1 to dictionary pointer
    23 00001C2B 5B                  <1>   pop ebx                   ; cache new top of stack
    24                              <1>   next
    24 00001C2C E9DAF0FFFF          <2>  jmp _next
    25                              <1> 
    26                              <1> ; ------------------------------------------------------------------------
    27                              <1> ; allocate n1 bytes of head space
    28                              <1> 
    29                              <1> ;       ( n1 --- )
    30                              <1> 
    31                              <1> code 'hallot', hallot
    31                              <2>  header %1,%2
    31                              <3> [section headers]
    31 00001070 [66100000]          <3>  dd vlink
    31                              <3> %%link:
    31                              <3> %2n:
    31                              <3> %xdefine vlink %%link
    31 00001074 06                  <3>  db (%%name-$-1)+imm
    31 00001075 68616C6C6F74        <3>  db %1
    31                              <3> %%name:
    31 0000107B [351C0000]          <3>  dd %2
    31                              <3> %xdefine imm 0
    31                              <3> 
    31                              <3> section list
    31 00001C31 [74100000]          <3>  dd %%link
    31                              <2> %2:
    32 00001C35 011D[041C0000]      <1>   add dword [hp_b], ebx     ; add n1 to head space pointer
    33 00001C3B 5B                  <1>   pop ebx
    34                              <1>   next
    34 00001C3C E9CAF0FFFF          <2>  jmp _next
    35                              <1> 
    36                              <1> ; ------------------------------------------------------------------------
    37                              <1> ; compile 32 bit data into dictionary space
    38                              <1> 
    39                              <1> ;       ( n1 --- )
    40                              <1> 
    41                              <1> code ',', comma
    41                              <2>  header %1,%2
    41                              <3> [section headers]
    41 0000107F [74100000]          <3>  dd vlink
    41                              <3> %%link:
    41                              <3> %2n:
    41                              <3> %xdefine vlink %%link
    41 00001083 01                  <3>  db (%%name-$-1)+imm
    41 00001084 2C                  <3>  db %1
    41                              <3> %%name:
    41 00001085 [451C0000]          <3>  dd %2
    41                              <3> %xdefine imm 0
    41                              <3> 
    41                              <3> section list
    41 00001C41 [83100000]          <3>  dd %%link
    41                              <2> %2:
    42 00001C45 A1[F71B0000]        <1>   mov eax, [dp_b]           ; get next dictionary address
    43 00001C4A 8305[F71B0000]04    <1>   add dword [dp_b], byte 4  ; allot dictionary space
    44 00001C51 8918                <1>   mov [eax], ebx            ; write data n1 into dictionary
    45 00001C53 5B                  <1>   pop ebx
    46                              <1>   next
    46 00001C54 E9B2F0FFFF          <2>  jmp _next
    47                              <1> 
    48                              <1> ; ------------------------------------------------------------------------
    49                              <1> ; compile 16 bit word into dictionary space
    50                              <1> 
    51                              <1> ;       ( w1 --- )
    52                              <1> 
    53                              <1> code 'w,', wcomma
    53                              <2>  header %1,%2
    53                              <3> [section headers]
    53 00001089 [83100000]          <3>  dd vlink
    53                              <3> %%link:
    53                              <3> %2n:
    53                              <3> %xdefine vlink %%link
    53 0000108D 02                  <3>  db (%%name-$-1)+imm
    53 0000108E 772C                <3>  db %1
    53                              <3> %%name:
    53 00001090 [5D1C0000]          <3>  dd %2
    53                              <3> %xdefine imm 0
    53                              <3> 
    53                              <3> section list
    53 00001C59 [8D100000]          <3>  dd %%link
    53                              <2> %2:
    54 00001C5D A1[F71B0000]        <1>   mov eax, [dp_b]           ; get dictionary pointer
    55 00001C62 8305[F71B0000]02    <1>   add dword [dp_b], byte 2
    56 00001C69 668918              <1>   mov word [eax], bx        ; store w1 in dictionary
    57 00001C6C 5B                  <1>   pop ebx
    58                              <1>   next
    58 00001C6D E999F0FFFF          <2>  jmp _next
    59                              <1> 
    60                              <1> ; ------------------------------------------------------------------------
    61                              <1> ; compile a byte (character) into dictionary space
    62                              <1> 
    63                              <1> ;       ( c1 --- )
    64                              <1> 
    65                              <1> code 'c,', ccomma
    65                              <2>  header %1,%2
    65                              <3> [section headers]
    65 00001094 [8D100000]          <3>  dd vlink
    65                              <3> %%link:
    65                              <3> %2n:
    65                              <3> %xdefine vlink %%link
    65 00001098 02                  <3>  db (%%name-$-1)+imm
    65 00001099 632C                <3>  db %1
    65                              <3> %%name:
    65 0000109B [761C0000]          <3>  dd %2
    65                              <3> %xdefine imm 0
    65                              <3> 
    65                              <3> section list
    65 00001C72 [98100000]          <3>  dd %%link
    65                              <2> %2:
    66 00001C76 A1[F71B0000]        <1>   mov eax, dword [dp_b]     ; get next dictionary address
    67 00001C7B FF05[F71B0000]      <1>   inc dword [dp_b]          ; allocate one byte
    68 00001C81 8818                <1>   mov byte [eax], bl
    69 00001C83 5B                  <1>   pop ebx
    70                              <1>   next
    70 00001C84 E982F0FFFF          <2>  jmp _next
    71                              <1> 
    72                              <1> ; ------------------------------------------------------------------------
    73                              <1> ; compile n1 into head space
    74                              <1> 
    75                              <1> ;       ( n1 --- )
    76                              <1> 
    77                              <1> code 'h,', hcomma
    77                              <2>  header %1,%2
    77                              <3> [section headers]
    77 0000109F [98100000]          <3>  dd vlink
    77                              <3> %%link:
    77                              <3> %2n:
    77                              <3> %xdefine vlink %%link
    77 000010A3 02                  <3>  db (%%name-$-1)+imm
    77 000010A4 682C                <3>  db %1
    77                              <3> %%name:
    77 000010A6 [8D1C0000]          <3>  dd %2
    77                              <3> %xdefine imm 0
    77                              <3> 
    77                              <3> section list
    77 00001C89 [A3100000]          <3>  dd %%link
    77                              <2> %2:
    78 00001C8D A1[041C0000]        <1>   mov eax, dword [hp_b]     ; get address of next free location in headers
    79 00001C92 8305[041C0000]04    <1>   add dword [hp_b], byte 4  ; alloocate the space
    80 00001C99 8918                <1>   mov dword [eax], ebx      ; store data in allocated space
    81 00001C9B 5B                  <1>   pop ebx
    82                              <1>   next
    82 00001C9C E96AF0FFFF          <2>  jmp _next
    83                              <1> 
    84                              <1> ; ------------------------------------------------------------------------
    85                              <1> ; compile string at a1 of length n1 into dictionary
    86                              <1> 
    87                              <1> ;       ( a1 n1 --- )
    88                              <1> 
    89                              <1> colon 's,', scomma
    89                              <2>  header %1,%2
    89                              <3> [section headers]
    89 000010AA [A3100000]          <3>  dd vlink
    89                              <3> %%link:
    89                              <3> %2n:
    89                              <3> %xdefine vlink %%link
    89 000010AE 02                  <3>  db (%%name-$-1)+imm
    89 000010AF 732C                <3>  db %1
    89                              <3> %%name:
    89 000010B1 [A51C0000]          <3>  dd %2
    89                              <3> %xdefine imm 0
    89                              <3> 
    89                              <3> section list
    89 00001CA1 [AE100000]          <3>  dd %%link
    89                              <2> %2:
    89 00001CA5 E8BEF0FFFF          <2>  call nest
    89                              <2> %2_b:
    90 00001CAA [B51A0000]-         <1>   dd here, swap             ; ( from to count --- )
    90 00001CAE [18030000]          <1>
    91 00001CB2 [E2020000]-         <1>   dd dup, allot             ; allocate the space first
    91 00001CB6 [251C0000]          <1>
    92 00001CBA [A0060000]          <1>   dd cmove_                 ; move string into place
    93 00001CBE [740D0000]          <1>   dd exit
    94                              <1> 
    95                              <1> ; ------------------------------------------------------------------------
    96                              <1> ; parse string from input and compile into dictionary as counted string
    97                              <1> 
    98                              <1> colon ',"', commaq
    98                              <2>  header %1,%2
    98                              <3> [section headers]
    98 000010B5 [AE100000]          <3>  dd vlink
    98                              <3> %%link:
    98                              <3> %2n:
    98                              <3> %xdefine vlink %%link
    98 000010B9 02                  <3>  db (%%name-$-1)+imm
    98 000010BA 2C22                <3>  db %1
    98                              <3> %%name:
    98 000010BC [C61C0000]          <3>  dd %2
    98                              <3> %xdefine imm 0
    98                              <3> 
    98                              <3> section list
    98 00001CC2 [B9100000]          <3>  dd %%link
    98                              <2> %2:
    98 00001CC6 E89DF0FFFF          <2>  call nest
    98                              <2> %2_b:
    99 00001CCB [D00D0000]22000000- <1>   dd plit, $22, parse
    99 00001CD3 [F0170000]          <1>
   100 00001CD7 [E2020000]-         <1>   dd dup, ccomma
   100 00001CDB [761C0000]          <1>
   101 00001CDF [A51C0000]          <1>   dd scomma
   102 00001CE3 [740D0000]          <1>   dd exit
   103                              <1> 
   104                              <1> ; ------------------------------------------------------------------------
   105                              <1> ; like the above but does not store count byte
   106                              <1> 
   107                              <1> colon ",'", commatic
   107                              <2>  header %1,%2
   107                              <3> [section headers]
   107 000010C0 [B9100000]          <3>  dd vlink
   107                              <3> %%link:
   107                              <3> %2n:
   107                              <3> %xdefine vlink %%link
   107 000010C4 02                  <3>  db (%%name-$-1)+imm
   107 000010C5 2C27                <3>  db %1
   107                              <3> %%name:
   107 000010C7 [EB1C0000]          <3>  dd %2
   107                              <3> %xdefine imm 0
   107                              <3> 
   107                              <3> section list
   107 00001CE7 [C4100000]          <3>  dd %%link
   107                              <2> %2:
   107 00001CEB E878F0FFFF          <2>  call nest
   107                              <2> %2_b:
   108 00001CF0 [D00D0000]27000000- <1>   dd plit, $27, parse
   108 00001CF8 [F0170000]          <1>
   109 00001CFC [A51C0000]          <1>   dd scomma
   110 00001D00 [740D0000]          <1>   dd exit
   111                              <1> 
   112                              <1> ; ========================================================================
   132                                    %include "compile.s"      ; creating words
     1                              <1> ; compile.s      - x4 creating and compilation words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _var_ 'state', state, 0   ; 0 = interpret, -1 = compile
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 000010CB [C4100000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 000010CF 05                  <4>  db (%%name-$-1)+imm
     6 000010D0 7374617465          <4>  db %1
     6                              <4> %%name:
     6 000010D5 [081D0000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 00001D04 [CF100000]          <4>  dd %%link
     6                              <3> %2:
     6 00001D08 E8A2F0FFFF          <2>  call doconstant
     6                              <2> %2_b:
     6 00001D0D 00000000            <2>  dd %3
     7                              <1>   _var_ 'last', last, 0     ; nfa of most recently defined word
     7                              <2>  code %1,%2
     7                              <3>  header %1,%2
     7                              <4> [section headers]
     7 000010D9 [CF100000]          <4>  dd vlink
     7                              <4> %%link:
     7                              <4> %2n:
     7                              <4> %xdefine vlink %%link
     7 000010DD 04                  <4>  db (%%name-$-1)+imm
     7 000010DE 6C617374            <4>  db %1
     7                              <4> %%name:
     7 000010E2 [151D0000]          <4>  dd %2
     7                              <4> %xdefine imm 0
     7                              <4> 
     7                              <4> section list
     7 00001D11 [DD100000]          <4>  dd %%link
     7                              <3> %2:
     7 00001D15 E895F0FFFF          <2>  call doconstant
     7                              <2> %2_b:
     7 00001D1A 00000000            <2>  dd %3
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------------------
    10                              <1> ; put forth in interpret mode
    11                              <1> 
    12                              <1>   _immediate_
    12                              <2>  %xdefine imm IMM
    13                              <1> 
    14                              <1> colon '[', lbracket
    14                              <2>  header %1,%2
    14                              <3> [section headers]
    14 000010E6 [DD100000]          <3>  dd vlink
    14                              <3> %%link:
    14                              <3> %2n:
    14                              <3> %xdefine vlink %%link
    14 000010EA 41                  <3>  db (%%name-$-1)+imm
    14 000010EB 5B                  <3>  db %1
    14                              <3> %%name:
    14 000010EC [221D0000]          <3>  dd %2
    14                              <3> %xdefine imm 0
    14                              <3> 
    14                              <3> section list
    14 00001D1E [EA100000]          <3>  dd %%link
    14                              <2> %2:
    14 00001D22 E841F0FFFF          <2>  call nest
    14                              <2> %2_b:
    15 00001D27 [FF0D0000]-         <1>   dd zoffto, state_b
    15 00001D2B [0D1D0000]          <1>
    16 00001D2F [740D0000]          <1>   dd exit
    17                              <1> 
    18                              <1> ; ------------------------------------------------------------------------
    19                              <1> ; put forth in compile mode
    20                              <1> 
    21                              <1> colon ']', rbracket
    21                              <2>  header %1,%2
    21                              <3> [section headers]
    21 000010F0 [EA100000]          <3>  dd vlink
    21                              <3> %%link:
    21                              <3> %2n:
    21                              <3> %xdefine vlink %%link
    21 000010F4 01                  <3>  db (%%name-$-1)+imm
    21 000010F5 5D                  <3>  db %1
    21                              <3> %%name:
    21 000010F6 [371D0000]          <3>  dd %2
    21                              <3> %xdefine imm 0
    21                              <3> 
    21                              <3> section list
    21 00001D33 [F4100000]          <3>  dd %%link
    21                              <2> %2:
    21 00001D37 E82CF0FFFF          <2>  call nest
    21                              <2> %2_b:
    22 00001D3C [0F0E0000]-         <1>   dd zonto, state_b         ; this word is not the compiler because it
    22 00001D40 [0D1D0000]          <1>
    23 00001D44 [740D0000]          <1>   dd exit                   ; should not be the compiler.  nuff sed.
    24                              <1> 
    25                              <1> ; ------------------------------------------------------------------------
    26                              <1> ; fetch compiled in parameter - equiv of r> dup cell+ >r @
    27                              <1> 
    28                              <1> ;       ( --- n1 )
    29                              <1> 
    30                              <1> code 'param', param
    30                              <2>  header %1,%2
    30                              <3> [section headers]
    30 000010FA [F4100000]          <3>  dd vlink
    30                              <3> %%link:
    30                              <3> %2n:
    30                              <3> %xdefine vlink %%link
    30 000010FE 05                  <3>  db (%%name-$-1)+imm
    30 000010FF 706172616D          <3>  db %1
    30                              <3> %%name:
    30 00001104 [4C1D0000]          <3>  dd %2
    30                              <3> %xdefine imm 0
    30                              <3> 
    30                              <3> section list
    30 00001D48 [FE100000]          <3>  dd %%link
    30                              <2> %2:
    31 00001D4C 53                  <1>   push ebx                  ; push cached top of stack item
    32 00001D4D 8B5D00              <1>   mov ebx, [ebp]            ; get top item of return stack in ebx
    33 00001D50 83450004            <1>   add dword [ebp], byte 4   ; advance return address past parameter
    34 00001D54 8B1B                <1>   mov ebx, dword [ebx]      ; fetch parameter
    35                              <1>   next
    35 00001D56 E9B0EFFFFF          <2>  jmp _next
    36                              <1> 
    37                              <1> ; ------------------------------------------------------------------------
    38                              <1> ; compile inline item (from current executing def) into new definition
    39                              <1> 
    40                              <1> colon 'compile', compile
    40                              <2>  header %1,%2
    40                              <3> [section headers]
    40 00001108 [FE100000]          <3>  dd vlink
    40                              <3> %%link:
    40                              <3> %2n:
    40                              <3> %xdefine vlink %%link
    40 0000110C 07                  <3>  db (%%name-$-1)+imm
    40 0000110D 636F6D70696C65      <3>  db %1
    40                              <3> %%name:
    40 00001114 [5F1D0000]          <3>  dd %2
    40                              <3> %xdefine imm 0
    40                              <3> 
    40                              <3> section list
    40 00001D5B [0C110000]          <3>  dd %%link
    40                              <2> %2:
    40 00001D5F E804F0FFFF          <2>  call nest
    40                              <2> %2_b:
    41 00001D64 [4C1D0000]          <1>   dd param                  ; fetch item to compile from return address
    42 00001D68 [451C0000]          <1>   dd comma                  ; compile it into word being created
    43 00001D6C [740D0000]          <1>   dd exit
    44                              <1> 
    45                              <1> ; This word and [compile] have become a bit of an issue in the forth
    46                              <1> ; community.  compile takes the next token from the execution stream
    47                              <1> ; and compiles it into the definition currently being created.  [compile]
    48                              <1> ; takes the next token out of the input stream and compiles it into the
    49                              <1> ; definition currently being created. [compile] is used to compile
    50                              <1> ; immediate words which would normally execute when in compile mode
    51                              <1> ; instead of being compiled.
    52                              <1> ;
    53                              <1> ; The perceived problem with this is that they have very similar names and
    54                              <1> ; you as the programmer would need to know every single immediate word in
    55                              <1> ; the entire dictionary in order to know how to use each of the above.
    56                              <1> ;
    57                              <1> ; In order to solve this huge non-problem a new word has been invented
    58                              <1> ; that will compile any word, immediate or otherwise, thus relieving you
    59                              <1> ; of the responsibility of knowing the language you are programming in.
    60                              <1> ;
    61                              <1> ; Like all good ans words this aforementioned new word has a name that
    62                              <1> ;   - totally - fails - to - describe - its - function
    63                              <1> ;
    64                              <1> ;  "postpone"         will probably remain undefined within x4
    65                              <1> 
    66                              <1> ; ------------------------------------------------------------------------
    67                              <1> ; compile an immediate word
    68                              <1> 
    69                              <1>   _immediate_
    69                              <2>  %xdefine imm IMM
    70                              <1> 
    71                              <1> colon '[compile]', bcompile
    71                              <2>  header %1,%2
    71                              <3> [section headers]
    71 00001118 [0C110000]          <3>  dd vlink
    71                              <3> %%link:
    71                              <3> %2n:
    71                              <3> %xdefine vlink %%link
    71 0000111C 49                  <3>  db (%%name-$-1)+imm
    71 0000111D 5B636F6D70696C655D  <3>  db %1
    71                              <3> %%name:
    71 00001126 [741D0000]          <3>  dd %2
    71                              <3> %xdefine imm 0
    71                              <3> 
    71                              <3> section list
    71 00001D70 [1C110000]          <3>  dd %%link
    71                              <2> %2:
    71 00001D74 E8EFEFFFFF          <2>  call nest
    71                              <2> %2_b:
    72 00001D79 [8F1A0000]          <1>   dd tick                   ; parse input for word name and 'find' it
    73 00001D7D [451C0000]          <1>   dd comma                  ; compile it in
    74 00001D81 [740D0000]          <1>   dd exit
    75                              <1> 
    76                              <1> ; ------------------------------------------------------------------------
    77                              <1> ; compile literal into : definition
    78                              <1> 
    79                              <1>   _immediate_
    79                              <2>  %xdefine imm IMM
    80                              <1> 
    81                              <1> ;   ( n1 --- )
    82                              <1> 
    83                              <1> colon 'literal', literal
    83                              <2>  header %1,%2
    83                              <3> [section headers]
    83 0000112A [1C110000]          <3>  dd vlink
    83                              <3> %%link:
    83                              <3> %2n:
    83                              <3> %xdefine vlink %%link
    83 0000112E 47                  <3>  db (%%name-$-1)+imm
    83 0000112F 6C69746572616C      <3>  db %1
    83                              <3> %%name:
    83 00001136 [891D0000]          <3>  dd %2
    83                              <3> %xdefine imm 0
    83                              <3> 
    83                              <3> section list
    83 00001D85 [2E110000]          <3>  dd %%link
    83                              <2> %2:
    83 00001D89 E8DAEFFFFF          <2>  call nest
    83                              <2> %2_b:
    84 00001D8E [5F1D0000]-         <1>   dd compile, plit          ; compile (lit)
    84 00001D92 [D00D0000]          <1>
    85 00001D96 [451C0000]          <1>   dd comma                  ; compile n1
    86 00001D9A [740D0000]          <1>   dd exit
    87                              <1> 
    88                              <1> ; -----------------------------------------------------------------------
    89                              <1> ; shorthand for '] literal'
    90                              <1> 
    91                              <1> colon ']#', rbsharp
    91                              <2>  header %1,%2
    91                              <3> [section headers]
    91 0000113A [2E110000]          <3>  dd vlink
    91                              <3> %%link:
    91                              <3> %2n:
    91                              <3> %xdefine vlink %%link
    91 0000113E 02                  <3>  db (%%name-$-1)+imm
    91 0000113F 5D23                <3>  db %1
    91                              <3> %%name:
    91 00001141 [A21D0000]          <3>  dd %2
    91                              <3> %xdefine imm 0
    91                              <3> 
    91                              <3> section list
    91 00001D9E [3E110000]          <3>  dd %%link
    91                              <2> %2:
    91 00001DA2 E8C1EFFFFF          <2>  call nest
    91                              <2> %2_b:
    92 00001DA7 [371D0000]-         <1>   dd rbracket, literal
    92 00001DAB [891D0000]          <1>
    93 00001DAF [740D0000]          <1>   dd exit
    94                              <1> 
    95                              <1> ; -----------------------------------------------------------------------
    96                              <1> ; compile word as literal
    97                              <1> 
    98                              <1>   _immediate_
    98                              <2>  %xdefine imm IMM
    99                              <1> 
   100                              <1> colon "[']", btick
   100                              <2>  header %1,%2
   100                              <3> [section headers]
   100 00001145 [3E110000]          <3>  dd vlink
   100                              <3> %%link:
   100                              <3> %2n:
   100                              <3> %xdefine vlink %%link
   100 00001149 43                  <3>  db (%%name-$-1)+imm
   100 0000114A 5B275D              <3>  db %1
   100                              <3> %%name:
   100 0000114D [B71D0000]          <3>  dd %2
   100                              <3> %xdefine imm 0
   100                              <3> 
   100                              <3> section list
   100 00001DB3 [49110000]          <3>  dd %%link
   100                              <2> %2:
   100 00001DB7 E8ACEFFFFF          <2>  call nest
   100                              <2> %2_b:
   101 00001DBC [5F1D0000]-         <1>   dd compile, plit          ; compile (lit)
   101 00001DC0 [D00D0000]          <1>
   102 00001DC4 [741D0000]          <1>   dd bcompile               ; parse and compile word to be literalized
   103 00001DC8 [740D0000]          <1>   dd exit
   104                              <1> 
   105                              <1> ; ------------------------------------------------------------------------
   106                              <1> ; compile (abort") and the abort message string -- "
   107                              <1> 
   108                              <1>   _immediate_
   108                              <2>  %xdefine imm IMM
   109                              <1> 
   110                              <1> colon 'abort"', abortq
   110                              <2>  header %1,%2
   110                              <3> [section headers]
   110 00001151 [49110000]          <3>  dd vlink
   110                              <3> %%link:
   110                              <3> %2n:
   110                              <3> %xdefine vlink %%link
   110 00001155 46                  <3>  db (%%name-$-1)+imm
   110 00001156 61626F727422        <3>  db %1
   110                              <3> %%name:
   110 0000115C [D01D0000]          <3>  dd %2
   110                              <3> %xdefine imm 0
   110                              <3> 
   110                              <3> section list
   110 00001DCC [55110000]          <3>  dd %%link
   110                              <2> %2:
   110 00001DD0 E893EFFFFF          <2>  call nest
   110                              <2> %2_b:
   111 00001DD5 [5F1D0000]-         <1>   dd compile, pabortq
   111 00001DD9 [8D120000]          <1>
   112 00001DDD [C61C0000]          <1>   dd commaq
   113 00001DE1 [740D0000]          <1>   dd exit
   114                              <1> 
   115                              <1> ; ------------------------------------------------------------------------
   116                              <1> ; compile a string to be displayed at run time
   117                              <1> 
   118                              <1>   _immediate_
   118                              <2>  %xdefine imm IMM
   119                              <1> 
   120                              <1> colon '."', dotquote
   120                              <2>  header %1,%2
   120                              <3> [section headers]
   120 00001160 [55110000]          <3>  dd vlink
   120                              <3> %%link:
   120                              <3> %2n:
   120                              <3> %xdefine vlink %%link
   120 00001164 42                  <3>  db (%%name-$-1)+imm
   120 00001165 2E22                <3>  db %1
   120                              <3> %%name:
   120 00001167 [E91D0000]          <3>  dd %2
   120                              <3> %xdefine imm 0
   120                              <3> 
   120                              <3> section list
   120 00001DE5 [64110000]          <3>  dd %%link
   120                              <2> %2:
   120 00001DE9 E87AEFFFFF          <2>  call nest
   120                              <2> %2_b:
   121 00001DEE [5F1D0000]-         <1>   dd compile, pdotq
   121 00001DF2 [4B120000]          <1>
   122 00001DF6 [C61C0000]          <1>   dd commaq
   123 00001DFA [740D0000]          <1>   dd exit
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------------------
   126                              <1> ;compile a call instruction
   127                              <1> 
   128                              <1> ;   ( --- )
   129                              <1> 
   130                              <1> colon ',call', ccall
   130                              <2>  header %1,%2
   130                              <3> [section headers]
   130 0000116B [64110000]          <3>  dd vlink
   130                              <3> %%link:
   130                              <3> %2n:
   130                              <3> %xdefine vlink %%link
   130 0000116F 05                  <3>  db (%%name-$-1)+imm
   130 00001170 2C63616C6C          <3>  db %1
   130                              <3> %%name:
   130 00001175 [021E0000]          <3>  dd %2
   130                              <3> %xdefine imm 0
   130                              <3> 
   130                              <3> section list
   130 00001DFE [6F110000]          <3>  dd %%link
   130                              <2> %2:
   130 00001E02 E861EFFFFF          <2>  call nest
   130                              <2> %2_b:
   131 00001E07 [4C1D0000]          <1>   dd param                  ; fetch target address of call
   132 00001E0B [D00D0000]E8000000- <1>   dd plit, $0e8, ccomma     ; compile opcode for call instruction
   132 00001E13 [761C0000]          <1>
   133 00001E17 [B51A0000]-         <1>   dd here, cellplus, minus  ; compute delta from call location tatget
   133 00001E1B [12050000]-         <1>
   133 00001E1F [130A0000]          <1>
   134 00001E23 [451C0000]          <1>   dd comma                  ; compile call target delta
   135 00001E27 [740D0000]          <1>   dd exit
   136                              <1> 
   137                              <1> ; ------------------------------------------------------------------------
   138                              <1> ; patch cfa of last word (non coded defs only) to use specified word
   139                              <1> 
   140                              <1> colon ';uses', suses
   140                              <2>  header %1,%2
   140                              <3> [section headers]
   140 00001179 [6F110000]          <3>  dd vlink
   140                              <3> %%link:
   140                              <3> %2n:
   140                              <3> %xdefine vlink %%link
   140 0000117D 05                  <3>  db (%%name-$-1)+imm
   140 0000117E 3B75736573          <3>  db %1
   140                              <3> %%name:
   140 00001183 [2F1E0000]          <3>  dd %2
   140                              <3> %xdefine imm 0
   140                              <3> 
   140                              <3> section list
   140 00001E2B [7D110000]          <3>  dd %%link
   140                              <2> %2:
   140 00001E2F E834EFFFFF          <2>  call nest
   140                              <2> %2_b:
   141 00001E34 [4C1D0000]          <1>   dd param                  ; get address of word to be used by new word
   142                              <1> 
   143                              <1> patch:
   144 00001E38 [151D0000]          <1>   dd last                   ; get nfa of last defined word
   145 00001E3C [111B0000]          <1>   dd nameto                 ; point at cfa of word being created
   146 00001E40 [8B0A0000]          <1>   dd oneplus                ; skip the call instruction
   147 00001E44 [21040000]          <1>   dd duptor                 ; keep copy of address to patch
   148 00001E48 [12050000]-         <1>   dd cellplus, minus        ; compute delta from here to word to use
   148 00001E4C [130A0000]          <1>
   149 00001E50 [01040000]-         <1>   dd rto, store             ; patch cfa of latest word
   149 00001E54 [85050000]          <1>
   150 00001E58 [740D0000]          <1>   dd exit
   151                              <1> 
   152                              <1> ; ------------------------------------------------------------------------
   153                              <1> ; patch last definition to use asm code directly following ;code
   154                              <1> 
   155                              <1> colon ';code', scode
   155                              <2>  header %1,%2
   155                              <3> [section headers]
   155 00001187 [7D110000]          <3>  dd vlink
   155                              <3> %%link:
   155                              <3> %2n:
   155                              <3> %xdefine vlink %%link
   155 0000118B 05                  <3>  db (%%name-$-1)+imm
   155 0000118C 3B636F6465          <3>  db %1
   155                              <3> %%name:
   155 00001191 [601E0000]          <3>  dd %2
   155                              <3> %xdefine imm 0
   155                              <3> 
   155                              <3> section list
   155 00001E5C [8B110000]          <3>  dd %%link
   155                              <2> %2:
   155 00001E60 E803EFFFFF          <2>  call nest
   155                              <2> %2_b:
   156 00001E65 [01040000]          <1>   dd rto                    ; use of ;code is an implied unnest!
   157 00001E69 [B90E0000]-         <1>   dd branch, patch
   157 00001E6D [381E0000]          <1>
   158                              <1> 
   159                              <1> ; ------------------------------------------------------------------------
   160                              <1> ; define run time action of a word being compiled
   161                              <1> 
   162                              <1>   _immediate_
   162                              <2>  %xdefine imm IMM
   163                              <1> 
   164                              <1> colon 'does>', does
   164                              <2>  header %1,%2
   164                              <3> [section headers]
   164 00001195 [8B110000]          <3>  dd vlink
   164                              <3> %%link:
   164                              <3> %2n:
   164                              <3> %xdefine vlink %%link
   164 00001199 45                  <3>  db (%%name-$-1)+imm
   164 0000119A 646F65733E          <3>  db %1
   164                              <3> %%name:
   164 0000119F [751E0000]          <3>  dd %2
   164                              <3> %xdefine imm 0
   164                              <3> 
   164                              <3> section list
   164 00001E71 [99110000]          <3>  dd %%link
   164                              <2> %2:
   164 00001E75 E8EEEEFFFF          <2>  call nest
   164                              <2> %2_b:
   165 00001E7A [5F1D0000]-         <1>   dd compile, scode         ; compile ;code at the does> location
   165 00001E7E [601E0000]          <1>
   166 00001E82 [021E0000]-         <1>   dd ccall, dodoes          ; compile a call to dodoes at here
   166 00001E86 [590D0000]          <1>
   167 00001E8A [740D0000]          <1>   dd exit
   168                              <1> 
   169                              <1> ; ------------------------------------------------------------------------
   170                              <1> ; create new dictionary entry
   171                              <1> 
   172                              <1> colon 'create', create
   172                              <2>  header %1,%2
   172                              <3> [section headers]
   172 000011A3 [99110000]          <3>  dd vlink
   172                              <3> %%link:
   172                              <3> %2n:
   172                              <3> %xdefine vlink %%link
   172 000011A7 06                  <3>  db (%%name-$-1)+imm
   172 000011A8 637265617465        <3>  db %1
   172                              <3> %%name:
   172 000011AE [921E0000]          <3>  dd %2
   172                              <3> %xdefine imm 0
   172                              <3> 
   172                              <3> section list
   172 00001E8E [A7110000]          <3>  dd %%link
   172                              <2> %2:
   172 00001E92 E8D1EEFFFF          <2>  call nest
   172                              <2> %2_b:
   173 00001E97 [C01B0000]          <1>   dd headcomma              ; create header for new word
   174 00001E9B [021E0000]-         <1>   dd ccall, dovariable      ; compile call to dovariable in new words cfa
   174 00001E9F [BD0D0000]          <1>
   175 00001EA3 [D91B0000]          <1>   dd reveal                 ; link header into current
   176 00001EA7 [740D0000]          <1>   dd exit
   177                              <1> 
   178                              <1> ; ------------------------------------------------------------------------
   179                              <1> ; these two words are used together a heck of a lot
   180                              <1> 
   181                              <1> colon 'create,', createc
   181                              <2>  header %1,%2
   181                              <3> [section headers]
   181 000011B2 [A7110000]          <3>  dd vlink
   181                              <3> %%link:
   181                              <3> %2n:
   181                              <3> %xdefine vlink %%link
   181 000011B6 07                  <3>  db (%%name-$-1)+imm
   181 000011B7 6372656174652C      <3>  db %1
   181                              <3> %%name:
   181 000011BE [AF1E0000]          <3>  dd %2
   181                              <3> %xdefine imm 0
   181                              <3> 
   181                              <3> section list
   181 00001EAB [B6110000]          <3>  dd %%link
   181                              <2> %2:
   181 00001EAF E8B4EEFFFF          <2>  call nest
   181                              <2> %2_b:
   182 00001EB4 [921E0000]-         <1>   dd create, comma
   182 00001EB8 [451C0000]          <1>
   183 00001EBC [740D0000]          <1>   dd exit
   184                              <1> 
   185                              <1> ; ------------------------------------------------------------------------
   186                              <1> ; make the most recent forth definition an immediate word
   187                              <1> 
   188                              <1> colon 'immediate', immediate
   188                              <2>  header %1,%2
   188                              <3> [section headers]
   188 000011C2 [B6110000]          <3>  dd vlink
   188                              <3> %%link:
   188                              <3> %2n:
   188                              <3> %xdefine vlink %%link
   188 000011C6 09                  <3>  db (%%name-$-1)+imm
   188 000011C7 696D6D656469617465  <3>  db %1
   188                              <3> %%name:
   188 000011D0 [C41E0000]          <3>  dd %2
   188                              <3> %xdefine imm 0
   188                              <3> 
   188                              <3> section list
   188 00001EC0 [C6110000]          <3>  dd %%link
   188                              <2> %2:
   188 00001EC4 E89FEEFFFF          <2>  call nest
   188                              <2> %2_b:
   189 00001EC9 [D00D0000]40000000  <1>   dd plit, IMM              ; immediate flag value
   190 00001ED1 [151D0000]          <1>   dd last                   ; get addrress of nfa of last word
   191 00001ED5 [21060000]          <1>   dd cset                   ; make word immediate
   192 00001ED9 [740D0000]          <1>   dd exit
   193                              <1> 
   194                              <1> ; ------------------------------------------------------------------------
   195                              <1> ; create a second header on an already existing word whose cfa is at a1
   196                              <1> 
   197                              <1> colon 'alias', alias
   197                              <2>  header %1,%2
   197                              <3> [section headers]
   197 000011D4 [C6110000]          <3>  dd vlink
   197                              <3> %%link:
   197                              <3> %2n:
   197                              <3> %xdefine vlink %%link
   197 000011D8 05                  <3>  db (%%name-$-1)+imm
   197 000011D9 616C696173          <3>  db %1
   197                              <3> %%name:
   197 000011DE [E11E0000]          <3>  dd %2
   197                              <3> %xdefine imm 0
   197                              <3> 
   197                              <3> section list
   197 00001EDD [D8110000]          <3>  dd %%link
   197                              <2> %2:
   197 00001EE1 E882EEFFFF          <2>  call nest
   197                              <2> %2_b:
   198 00001EE6 [C01B0000]          <1>   dd headcomma              ; create new header
   199 00001EEA [D00D0000]FCFFFFFF- <1>   dd plit, -4, dup          ; deallocate cfa pointer that points to here
   199 00001EF2 [E2020000]          <1>
   200 00001EF6 [351C0000]-         <1>   dd hallot, allot          ; deallocate nfa pointer at cfa -4
   200 00001EFA [251C0000]          <1>
   201 00001EFE [E2020000]-         <1>   dd dup, hcomma            ; point header at cfa of word to alias
   201 00001F02 [8D1C0000]          <1>
   202 00001F06 [2E1B0000]-         <1>   dd toname, qdup           ; does word being aliased have an nfa?
   202 00001F0A [EC020000]          <1>
   203 00001F0E [E70E0000]-         <1>   dd doif, .L2
   203 00001F12 [361F0000]          <1>
   204 00001F16 [91050000]          <1>   dd cfetch                 ; get name field count byte and lex bits
   205 00001F1A [D00D0000]40000000- <1>   dd plit, IMM, andd        ; is it immediate
   205 00001F22 [83080000]          <1>
   206 00001F26 [E70E0000]-         <1>   dd doif, .L1
   206 00001F2A [321F0000]          <1>
   207 00001F2E [C41E0000]          <1>   dd immediate              ; make alias immediate too
   208                              <1> .L1:
   209 00001F32 [A70E0000]          <1>   dd dothen                 ; waste some code space just for the decompiler
   210                              <1> .L2:
   211 00001F36 [A70E0000]          <1>   dd dothen                 ; :/
   212 00001F3A [D00D0000]20000000  <1>   dd plit, ALIAS            ; mark this as an alias
   213 00001F42 [151D0000]-         <1>   dd last, cset             ; see header relocation code
   213 00001F46 [21060000]          <1>
   214 00001F4A [D91B0000]          <1>   dd reveal                 ; link alias into vocabulary
   215 00001F4E [740D0000]          <1>   dd exit
   216                              <1> 
   217                              <1> ; ------------------------------------------------------------------------
   218                              <1> ; create a defered word - (a re-vectorable word, not a fwd reference)
   219                              <1> 
   220                              <1> colon 'defer', defer
   220                              <2>  header %1,%2
   220                              <3> [section headers]
   220 000011E2 [D8110000]          <3>  dd vlink
   220                              <3> %%link:
   220                              <3> %2n:
   220                              <3> %xdefine vlink %%link
   220 000011E6 05                  <3>  db (%%name-$-1)+imm
   220 000011E7 6465666572          <3>  db %1
   220                              <3> %%name:
   220 000011EC [561F0000]          <3>  dd %2
   220                              <3> %xdefine imm 0
   220                              <3> 
   220                              <3> section list
   220 00001F52 [E6110000]          <3>  dd %%link
   220                              <2> %2:
   220 00001F56 E80DEEFFFF          <2>  call nest
   220                              <2> %2_b:
   221 00001F5B [921E0000]          <1>   dd create                 ; create new dictionary entry
   222 00001F5F [2F1E0000]-         <1>   dd suses, dodefer         ; patch new word to use dodefer not dovariable
   222 00001F63 [C90D0000]          <1>
   223 00001F67 [5F1D0000]-         <1>   dd compile, crash         ; compile default vector into defered word
   223 00001F6B [440E0000]          <1>
   224 00001F6F [740D0000]          <1>   dd exit
   225                              <1> 
   226                              <1> ; ------------------------------------------------------------------------
   227                              <1> ; add current definition onto end of defered chain (or beginning!!)
   228                              <1> 
   229                              <1>   _immediate_
   229                              <2>  %xdefine imm IMM
   230                              <1> 
   231                              <1> colon 'defers', defers
   231                              <2>  header %1,%2
   231                              <3> [section headers]
   231 000011F0 [E6110000]          <3>  dd vlink
   231                              <3> %%link:
   231                              <3> %2n:
   231                              <3> %xdefine vlink %%link
   231 000011F4 46                  <3>  db (%%name-$-1)+imm
   231 000011F5 646566657273        <3>  db %1
   231                              <3> %%name:
   231 000011FB [771F0000]          <3>  dd %2
   231                              <3> %xdefine imm 0
   231                              <3> 
   231                              <3> section list
   231 00001F73 [F4110000]          <3>  dd %%link
   231                              <2> %2:
   231 00001F77 E8ECEDFFFF          <2>  call nest
   231                              <2> %2_b:
   232 00001F7C [151D0000]-         <1>   dd last, nameto           ; get cfa of word being defined
   232 00001F80 [111B0000]          <1>
   233 00001F84 [8F1A0000]-         <1>   dd tick, tobody           ; get body field address of defered word
   233 00001F88 [E11A0000]          <1>
   234 00001F8C [E2020000]-         <1>   dd dup, fetch, comma      ; compile its contents into word being defined
   234 00001F90 [7A050000]-         <1>
   234 00001F94 [451C0000]          <1>
   235 00001F98 [85050000]          <1>   dd store                  ; point defered word at new word
   236 00001F9C [740D0000]          <1>   dd exit
   237                              <1> 
   238                              <1> ; ------------------------------------------------------------------------
   239                              <1> ; begin compiling a definition
   240                              <1> 
   241                              <1> colon ':', colon_
   241                              <2>  header %1,%2
   241                              <3> [section headers]
   241 000011FF [F4110000]          <3>  dd vlink
   241                              <3> %%link:
   241                              <3> %2n:
   241                              <3> %xdefine vlink %%link
   241 00001203 01                  <3>  db (%%name-$-1)+imm
   241 00001204 3A                  <3>  db %1
   241                              <3> %%name:
   241 00001205 [A41F0000]          <3>  dd %2
   241                              <3> %xdefine imm 0
   241                              <3> 
   241                              <3> section list
   241 00001FA0 [03120000]          <3>  dd %%link
   241                              <2> %2:
   241 00001FA4 E8BFEDFFFF          <2>  call nest
   241                              <2> %2_b:
   242 00001FA9 [C01B0000]          <1>   dd headcomma              ; create header for new word
   243 00001FAD [021E0000]-         <1>   dd ccall, nest            ; compile call to nest at new words cfa
   243 00001FB1 [680D0000]          <1>
   244 00001FB5 [371D0000]          <1>   dd rbracket               ; set state on (were compiling now)
   245 00001FB9 [740D0000]          <1>   dd exit
   246                              <1> 
   247                              <1> ; ------------------------------------------------------------------------
   248                              <1> 
   249                              <1>   _immediate_
   249                              <2>  %xdefine imm IMM
   250                              <1> 
   251                              <1> colon '-;', dsemi
   251                              <2>  header %1,%2
   251                              <3> [section headers]
   251 00001209 [03120000]          <3>  dd vlink
   251                              <3> %%link:
   251                              <3> %2n:
   251                              <3> %xdefine vlink %%link
   251 0000120D 42                  <3>  db (%%name-$-1)+imm
   251 0000120E 2D3B                <3>  db %1
   251                              <3> %%name:
   251 00001210 [C11F0000]          <3>  dd %2
   251                              <3> %xdefine imm 0
   251                              <3> 
   251                              <3> section list
   251 00001FBD [0D120000]          <3>  dd %%link
   251                              <2> %2:
   251 00001FC1 E8A2EDFFFF          <2>  call nest
   251                              <2> %2_b:
   252 00001FC6 [221D0000]-         <1>  dd lbracket, reveal
   252 00001FCA [D91B0000]          <1>
   253 00001FCE [740D0000]          <1>  dd exit
   254                              <1> 
   255                              <1> ; ------------------------------------------------------------------------
   256                              <1> ; complete definition of a colon definition
   257                              <1> 
   258                              <1>   _immediate_
   258                              <2>  %xdefine imm IMM
   259                              <1> 
   260                              <1> colon ';', semicolon
   260                              <2>  header %1,%2
   260                              <3> [section headers]
   260 00001214 [0D120000]          <3>  dd vlink
   260                              <3> %%link:
   260                              <3> %2n:
   260                              <3> %xdefine vlink %%link
   260 00001218 41                  <3>  db (%%name-$-1)+imm
   260 00001219 3B                  <3>  db %1
   260                              <3> %%name:
   260 0000121A [D61F0000]          <3>  dd %2
   260                              <3> %xdefine imm 0
   260                              <3> 
   260                              <3> section list
   260 00001FD2 [18120000]          <3>  dd %%link
   260                              <2> %2:
   260 00001FD6 E88DEDFFFF          <2>  call nest
   260                              <2> %2_b:
   261 00001FDB [5F1D0000]-         <1>   dd compile, exit          ; compile an unnest onto end of colon def
   261 00001FDF [740D0000]          <1>
   262 00001FE3 [C11F0000]          <1>   dd dsemi                  ; back to interpret and reveal new word
   263 00001FE7 [740D0000]          <1>   dd exit
   264                              <1> 
   265                              <1> ; ------------------------------------------------------------------------
   266                              <1> ; add handler for a syscall
   267                              <1> 
   268                              <1> ;       ( #params sys# --- )
   269                              <1> 
   270                              <1> colon 'syscall', syscall_
   270                              <2>  header %1,%2
   270                              <3> [section headers]
   270 0000121E [18120000]          <3>  dd vlink
   270                              <3> %%link:
   270                              <3> %2n:
   270                              <3> %xdefine vlink %%link
   270 00001222 07                  <3>  db (%%name-$-1)+imm
   270 00001223 73797363616C6C      <3>  db %1
   270                              <3> %%name:
   270 0000122A [EF1F0000]          <3>  dd %2
   270                              <3> %xdefine imm 0
   270                              <3> 
   270                              <3> section list
   270 00001FEB [22120000]          <3>  dd %%link
   270                              <2> %2:
   270 00001FEF E874EDFFFF          <2>  call nest
   270                              <2> %2_b:
   271 00001FF4 [921E0000]          <1>   dd create                 ; create the syscall handler word
   272 00001FF8 [761C0000]          <1>   dd ccomma                 ; compile in its syscall number
   273 00001FFC [761C0000]          <1>   dd ccomma                 ; compile in parameter count
   274 00002000 [2F1E0000]-         <1>   dd suses, do_syscall      ; patch new word to use dosyscall
   274 00002004 [01020000]          <1>
   275 00002008 [740D0000]          <1>   dd exit
   276                              <1> 
   277                              <1> ; ------------------------------------------------------------------------
   278                              <1> ; create handler for singlan sig#
   279                              <1> 
   280                              <1> ;       ( addr sig# --- )
   281                              <1> 
   282                              <1> ;colon 'signal', signal
   283                              <1> ;  dd create, here, bodyto   ;create and point to cfa of new word
   284                              <1> ;  dd suses, do_signal
   285                              <1> ;  dd rot, comma             ;compile address of signal handler
   286                              <1> ;  dd swap, sys_signal       ;make cfa a handler for specified signal
   287                              <1> ;  dd exit
   288                              <1> 
   289                              <1> ; ========================================================================
   133                                    %include "fload.s"        ; interpret from file
     1                              <1> ; fload.s   - file load.  interpret forth sources from a file
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1>   _var_ 'lsp', lsp, 0       ; fload nest stack pointer
     6                              <2>  code %1,%2
     6                              <3>  header %1,%2
     6                              <4> [section headers]
     6 0000122E [22120000]          <4>  dd vlink
     6                              <4> %%link:
     6                              <4> %2n:
     6                              <4> %xdefine vlink %%link
     6 00001232 03                  <4>  db (%%name-$-1)+imm
     6 00001233 6C7370              <4>  db %1
     6                              <4> %%name:
     6 00001236 [10200000]          <4>  dd %2
     6                              <4> %xdefine imm 0
     6                              <4> 
     6                              <4> section list
     6 0000200C [32120000]          <4>  dd %%link
     6                              <3> %2:
     6 00002010 E89AEDFFFF          <2>  call doconstant
     6                              <2> %2_b:
     6 00002015 00000000            <2>  dd %3
     7                              <1>   _var_ 'floads', floads, 0 ; number of nested floads (max = 5)
     7                              <2>  code %1,%2
     7                              <3>  header %1,%2
     7                              <4> [section headers]
     7 0000123A [32120000]          <4>  dd vlink
     7                              <4> %%link:
     7                              <4> %2n:
     7                              <4> %xdefine vlink %%link
     7 0000123E 06                  <4>  db (%%name-$-1)+imm
     7 0000123F 666C6F616473        <4>  db %1
     7                              <4> %%name:
     7 00001245 [1D200000]          <4>  dd %2
     7                              <4> %xdefine imm 0
     7                              <4> 
     7                              <4> section list
     7 00002019 [3E120000]          <4>  dd %%link
     7                              <3> %2:
     7 0000201D E88DEDFFFF          <2>  call doconstant
     7                              <2> %2_b:
     7 00002022 00000000            <2>  dd %3
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------------------
    10                              <1> 
    11                              <1>   _var_ 'fd', fd, 0         ; file handle of file being floaded
    11                              <2>  code %1,%2
    11                              <3>  header %1,%2
    11                              <4> [section headers]
    11 00001249 [3E120000]          <4>  dd vlink
    11                              <4> %%link:
    11                              <4> %2n:
    11                              <4> %xdefine vlink %%link
    11 0000124D 02                  <4>  db (%%name-$-1)+imm
    11 0000124E 6664                <4>  db %1
    11                              <4> %%name:
    11 00001250 [2A200000]          <4>  dd %2
    11                              <4> %xdefine imm 0
    11                              <4> 
    11                              <4> section list
    11 00002026 [4D120000]          <4>  dd %%link
    11                              <3> %2:
    11 0000202A E880EDFFFF          <2>  call doconstant
    11                              <2> %2_b:
    11 0000202F 00000000            <2>  dd %3
    12                              <1> 
    13                              <1>   _var_ 'line#', linenum, 0 ; current line number of file
    13                              <2>  code %1,%2
    13                              <3>  header %1,%2
    13                              <4> [section headers]
    13 00001254 [4D120000]          <4>  dd vlink
    13                              <4> %%link:
    13                              <4> %2n:
    13                              <4> %xdefine vlink %%link
    13 00001258 05                  <4>  db (%%name-$-1)+imm
    13 00001259 6C696E6523          <4>  db %1
    13                              <4> %%name:
    13 0000125E [37200000]          <4>  dd %2
    13                              <4> %xdefine imm 0
    13                              <4> 
    13                              <4> section list
    13 00002033 [58120000]          <4>  dd %%link
    13                              <3> %2:
    13 00002037 E873EDFFFF          <2>  call doconstant
    13                              <2> %2_b:
    13 0000203C 00000000            <2>  dd %3
    14                              <1>   _var_ 'flsz', flsz, 0     ; fload file size
    14                              <2>  code %1,%2
    14                              <3>  header %1,%2
    14                              <4> [section headers]
    14 00001262 [58120000]          <4>  dd vlink
    14                              <4> %%link:
    14                              <4> %2n:
    14                              <4> %xdefine vlink %%link
    14 00001266 04                  <4>  db (%%name-$-1)+imm
    14 00001267 666C737A            <4>  db %1
    14                              <4> %%name:
    14 0000126B [44200000]          <4>  dd %2
    14                              <4> %xdefine imm 0
    14                              <4> 
    14                              <4> section list
    14 00002040 [66120000]          <4>  dd %%link
    14                              <3> %2:
    14 00002044 E866EDFFFF          <2>  call doconstant
    14                              <2> %2_b:
    14 00002049 00000000            <2>  dd %3
    15                              <1>   _var_ 'fladdr', fladdr, 0 ; fload memory map address
    15                              <2>  code %1,%2
    15                              <3>  header %1,%2
    15                              <4> [section headers]
    15 0000126F [66120000]          <4>  dd vlink
    15                              <4> %%link:
    15                              <4> %2n:
    15                              <4> %xdefine vlink %%link
    15 00001273 06                  <4>  db (%%name-$-1)+imm
    15 00001274 666C61646472        <4>  db %1
    15                              <4> %%name:
    15 0000127A [51200000]          <4>  dd %2
    15                              <4> %xdefine imm 0
    15                              <4> 
    15                              <4> section list
    15 0000204D [73120000]          <4>  dd %%link
    15                              <3> %2:
    15 00002051 E859EDFFFF          <2>  call doconstant
    15                              <2> %2_b:
    15 00002056 00000000            <2>  dd %3
    16                              <1>   _var_ 'fl>in', fltoin, 0  ; pointer to current line of file
    16                              <2>  code %1,%2
    16                              <3>  header %1,%2
    16                              <4> [section headers]
    16 0000127E [73120000]          <4>  dd vlink
    16                              <4> %%link:
    16                              <4> %2n:
    16                              <4> %xdefine vlink %%link
    16 00001282 05                  <4>  db (%%name-$-1)+imm
    16 00001283 666C3E696E          <4>  db %1
    16                              <4> %%name:
    16 00001288 [5E200000]          <4>  dd %2
    16                              <4> %xdefine imm 0
    16                              <4> 
    16                              <4> section list
    16 0000205A [82120000]          <4>  dd %%link
    16                              <3> %2:
    16 0000205E E84CEDFFFF          <2>  call doconstant
    16                              <2> %2_b:
    16 00002063 00000000            <2>  dd %3
    17                              <1> 
    18                              <1>   _constant_ 'ktotal', ktotal, 0 ; total of all floaded file sizes
    18                              <2>  code %1,%2
    18                              <3>  header %1,%2
    18                              <4> [section headers]
    18 0000128C [82120000]          <4>  dd vlink
    18                              <4> %%link:
    18                              <4> %2n:
    18                              <4> %xdefine vlink %%link
    18 00001290 06                  <4>  db (%%name-$-1)+imm
    18 00001291 6B746F74616C        <4>  db %1
    18                              <4> %%name:
    18 00001297 [6B200000]          <4>  dd %2
    18                              <4> %xdefine imm 0
    18                              <4> 
    18                              <4> section list
    18 00002067 [90120000]          <4>  dd %%link
    18                              <3> %2:
    18 0000206B E83FEDFFFF          <2>  call doconstant
    18                              <2> %2_b:
    18 00002070 00000000            <2>  dd %3
    19                              <1> 
    20                              <1> ; ------------------------------------------------------------------------
    21                              <1> ; abort if file didnt open (n1 = file handle or error)
    22                              <1> 
    23                              <1> ;       ( n1 --- )
    24                              <1> 
    25                              <1> colon '?open', qopen
    25                              <2>  header %1,%2
    25                              <3> [section headers]
    25 0000129B [90120000]          <3>  dd vlink
    25                              <3> %%link:
    25                              <3> %2n:
    25                              <3> %xdefine vlink %%link
    25 0000129F 05                  <3>  db (%%name-$-1)+imm
    25 000012A0 3F6F70656E          <3>  db %1
    25                              <3> %%name:
    25 000012A5 [78200000]          <3>  dd %2
    25                              <3> %xdefine imm 0
    25                              <3> 
    25                              <3> section list
    25 00002074 [9F120000]          <3>  dd %%link
    25                              <2> %2:
    25 00002078 E8EBECFFFF          <2>  call nest
    25                              <2> %2_b:
    26 0000207D [D5080000]-         <1>   dd zgreater, qexit        ; open ok ???
    26 00002081 [800D0000]          <1>
    27 00002085 [96110000]-         <1>   dd cr, hhere, count, type ; display offending filename
    27 00002089 [C51A0000]-         <1>
    27 0000208D [D7050000]-         <1>
    27 00002091 [7D110000]          <1>
    28 00002095 [69080000]-         <1>   dd true, pabortq          ; abort with error message
    28 00002099 [8D120000]          <1>
    29 0000209D 0B206F70656E206572- <1>   db 11, ' open error'
    29 000020A6 726F72              <1>
    30 000020A9 [740D0000]          <1>   dd exit
    31                              <1> 
    32                              <1> ; ------------------------------------------------------------------------
    33                              <1> ; push one item onto fload stack
    34                              <1> 
    35                              <1> ;       ( n1 --- )
    36                              <1> 
    37                              <1> flpush:
    38 000020AD A1[15200000]        <1>   mov eax, [lsp_b]          ; get fload stack address in eax
    39 000020B2 8918                <1>   mov [eax], ebx            ; push item n1 onto stack
    40 000020B4 8305[15200000]04    <1>   add dword [lsp_b], byte CELL ; advance pointer
    41 000020BB 5B                  <1>   pop ebx
    42                              <1>   next
    42 000020BC E94AECFFFF          <2>  jmp _next
    43                              <1> 
    44                              <1> ; ------------------------------------------------------------------------
    45                              <1> ; pop one item off fload stack
    46                              <1> 
    47                              <1> ;       ( --- n1 )
    48                              <1> 
    49                              <1> flpop:
    50 000020C1 832D[15200000]04    <1>   sub dword [lsp_b], byte CELL
    51 000020C8 A1[15200000]        <1>   mov eax, [lsp_b]
    52 000020CD 53                  <1>   push ebx
    53 000020CE 8B18                <1>   mov ebx, [eax]
    54                              <1>   next
    54 000020D0 E936ECFFFF          <2>  jmp _next
    55                              <1> 
    56                              <1> ; ------------------------------------------------------------------------
    57                              <1> ; list of items to pop off fload stack on completion of a nested fload
    58                              <1> 
    59                              <1>   _noname_
    59 000020D5 00000000            <2>  dd 0
    60                              <1> 
    61                              <1> pop_list:
    62 000020D9 E8DFECFFFF          <1>   call dovariable
    63                              <1> 
    64 000020DE [3C200000]-         <1>   dd linenum_b, flsz_b, fladdr_b
    64 000020E2 [49200000]-         <1>
    64 000020E6 [56200000]          <1>
    65 000020EA [63200000]-         <1>   dd fltoin_b, refill_b, toin_b
    65 000020EE [34240000]-         <1>
    65 000020F2 [87170000]          <1>
    66 000020F6 [2F200000]-         <1>   dd fd_b, numtib_b, tib_b
    66 000020FA [94170000]-         <1>
    66 000020FE [A1170000]          <1>
    67 00002102 00000000            <1>   dd 0
    68                              <1> 
    69                              <1> ; ------------------------------------------------------------------------
    70                              <1> 
    71                              <1>   _noname_
    71 00002106 00000000            <2>  dd 0
    72                              <1> 
    73                              <1> restore_state:
    74 0000210A E859ECFFFF          <1>   call nest
    75                              <1> 
    76 0000210F [D9200000]          <1>   dd pop_list               ; point to list of items to be restored
    77                              <1> 
    78 00002113 [B00E0000]          <1>   dd dobegin                ; restore previous fload state
    79                              <1> .L0:
    80 00002117 [E7050000]-         <1>   dd dcount, qdup           ; get next item to be restored
    80 0000211B [EC020000]          <1>
    81 0000211F [ED0E0000]-         <1>   dd qwhile, .L1            ; while it is not zero
    81 00002123 [3B210000]          <1>
    82 00002127 [C1200000]-         <1>   dd flpop, swap, store     ; pop item off fload stack and store in item
    82 0000212B [18030000]-         <1>
    82 0000212F [85050000]          <1>
    83 00002133 [D00E0000]-         <1>   dd dorepeat, .L0
    83 00002137 [17210000]          <1>
    84                              <1> .L1:
    85 0000213B [3C030000]-         <1>   dd drop, exit
    85 0000213F [740D0000]          <1>
    86                              <1> 
    87                              <1> ; ------------------------------------------------------------------------
    88                              <1> ; fload completed, restore previous fload state
    89                              <1> 
    90                              <1>   _noname_
    90 00002143 00000000            <2>  dd 0
    91                              <1> 
    92                              <1> endfload:
    93 00002147 E81CECFFFF          <1>   call nest
    94                              <1> 
    95 0000214C [44200000]          <1>   dd flsz                   ; count total size of all floads
    96 00002150 [370E0000]-         <1>   dd zplusstoreto, ktotal_b
    96 00002154 [70200000]          <1>
    97 00002158 [44200000]-         <1>   dd flsz, fladdr           ; unmap file we completed
    97 0000215C [51200000]          <1>
    98 00002160 [B2020000]          <1>   dd sys_munmap
    99 00002164 [2A200000]-         <1>   dd fd, sys_close          ; close the file
    99 00002168 [70020000]          <1>
   100 0000216C [46030000]          <1>   dd drop2
   101 00002170 [0A210000]          <1>   dd restore_state          ; restore previous fload status
   102 00002174 [2B0E0000]-         <1>   dd zdecrto, floads_b      ; decremet fload nest depth counter
   102 00002178 [22200000]          <1>
   103 0000217C [740D0000]          <1>   dd exit
   104                              <1> 
   105                              <1> ; ------------------------------------------------------------------------
   106                              <1> ; aborts an fload - leaves line# of error intact
   107                              <1> 
   108                              <1>   _noname_
   108 00002180 00000000            <2>  dd 0
   109                              <1> 
   110                              <1> abortfload:
   111 00002184 [37200000]-         <1>   dd linenum, endfload      ; save line number we aborted on so endfload
   111 00002188 [47210000]          <1>
   112 0000218C [F20D0000]-         <1>   dd zstoreto, linenum_b    ; doesnt 'restore' it
   112 00002190 [3C200000]          <1>
   113 00002194 [740D0000]          <1>   dd exit
   114                              <1> 
   115                              <1> ; ------------------------------------------------------------------------
   116                              <1> ; determine byte size of file
   117                              <1> 
   118                              <1> ; this sorta belongs in file.f but we cant put it there because the kernel
   119                              <1> ; would then have to forward reference an extension! :)
   120                              <1> 
   121                              <1> ;       ( fd --- size )
   122                              <1> 
   123                              <1> colon '?fl-size', qfs
   123                              <2>  header %1,%2
   123                              <3> [section headers]
   123 000012A9 [9F120000]          <3>  dd vlink
   123                              <3> %%link:
   123                              <3> %2n:
   123                              <3> %xdefine vlink %%link
   123 000012AD 08                  <3>  db (%%name-$-1)+imm
   123 000012AE 3F666C2D73697A65    <3>  db %1
   123                              <3> %%name:
   123 000012B6 [9C210000]          <3>  dd %2
   123                              <3> %xdefine imm 0
   123                              <3> 
   123                              <3> section list
   123 00002198 [AD120000]          <3>  dd %%link
   123                              <2> %2:
   123 0000219C E8C7EBFFFF          <2>  call nest
   123                              <2> %2_b:
   124 000021A1 [D00D0000]02000000- <1>   dd plit, 2, plit, 0
   124 000021A9 [D00D0000]00000000  <1>
   125 000021B1 [A0030000]-         <1>   dd rot, sys_lseek
   125 000021B5 [9C020000]          <1>
   126 000021B9 [740D0000]          <1>   dd exit
   127                              <1> 
   128                              <1> ; ------------------------------------------------------------------------
   129                              <1> ; mmap file fd with r/w perms n2 with mapping type n1
   130                              <1> 
   131                              <1> ;       ( fd flags prot --- address size )
   132                              <1> 
   133                              <1> colon 'fmmap', fmmap
   133                              <2>  header %1,%2
   133                              <3> [section headers]
   133 000012BA [AD120000]          <3>  dd vlink
   133                              <3> %%link:
   133                              <3> %2n:
   133                              <3> %xdefine vlink %%link
   133 000012BE 05                  <3>  db (%%name-$-1)+imm
   133 000012BF 666D6D6170          <3>  db %1
   133                              <3> %%name:
   133 000012C4 [C1210000]          <3>  dd %2
   133                              <3> %xdefine imm 0
   133                              <3> 
   133                              <3> section list
   133 000021BD [BE120000]          <3>  dd %%link
   133                              <2> %2:
   133 000021C1 E8A2EBFFFF          <2>  call nest
   133                              <2> %2_b:
   134 000021C6 [F0030000]          <1>   dd tor2
   135 000021CA [E2020000]-         <1>   dd dup, qfs, tuck
   135 000021CE [9C210000]-         <1>
   135 000021D2 [7A030000]          <1>
   136 000021D6 [D00D0000]00000000- <1>   dd plit, 0, dashrot
   136 000021DE [B0030000]          <1>
   137 000021E2 [10040000]-         <1>   dd rto2, rot
   137 000021E6 [A0030000]          <1>
   138 000021EA [D00D0000]00000000  <1>   dd plit, 0
   139 000021F2 [A7020000]          <1>   dd sys_mmap
   140 000021F6 [18030000]-         <1>   dd swap, exit
   140 000021FA [740D0000]          <1>
   141                              <1> 
   142                              <1> ; ------------------------------------------------------------------------
   143                              <1> ; list of items to save when nesting floads
   144                              <1> 
   145                              <1>   _noname_
   145 000021FE 00000000            <2>  dd 0
   146                              <1> 
   147                              <1> push_list:
   148 00002202 E8B6EBFFFF          <1>   call dovariable
   149                              <1> 
   150 00002207 [A1170000]-         <1>   dd tib_b, numtib_b, fd_b
   150 0000220B [94170000]-         <1>
   150 0000220F [2F200000]          <1>
   151 00002213 [87170000]-         <1>   dd toin_b, refill_b, fltoin_b
   151 00002217 [34240000]-         <1>
   151 0000221B [63200000]          <1>
   152 0000221F [56200000]-         <1>   dd fladdr_b, flsz_b, linenum_b
   152 00002223 [49200000]-         <1>
   152 00002227 [3C200000]          <1>
   153 0000222B 00000000            <1>   dd 0
   154                              <1> 
   155                              <1> ; ------------------------------------------------------------------------
   156                              <1> ; push all above listed items onto fload stack
   157                              <1> 
   158                              <1>   _noname_
   158 0000222F 00000000            <2>  dd 0
   159                              <1> 
   160                              <1> save_state:
   161 00002233 E830EBFFFF          <1>   call nest
   162                              <1> 
   163 00002238 [02220000]          <1>   dd push_list              ; point to list of items to be saved
   164                              <1> 
   165 0000223C [B00E0000]          <1>   dd dobegin
   166                              <1> .L0:
   167 00002240 [E7050000]-         <1>   dd dcount, qdup           ; get next item
   167 00002244 [EC020000]          <1>
   168 00002248 [ED0E0000]-         <1>   dd qwhile, .L1            ; while its not zero
   168 0000224C [60220000]          <1>
   169 00002250 [7A050000]-         <1>   dd fetch, flpush          ; fetch and push its contents to fload stak
   169 00002254 [AD200000]          <1>
   170 00002258 [D00E0000]-         <1>   dd dorepeat, .L0
   170 0000225C [40220000]          <1>
   171                              <1> 
   172                              <1> .L1:
   173 00002260 [3C030000]-         <1>   dd drop, exit
   173 00002264 [740D0000]          <1>
   174                              <1> 
   175                              <1> ; ------------------------------------------------------------------------
   176                              <1> ; init for interpreting of next line of memory mapped file being floaded
   177                              <1> 
   178                              <1>   _noname_
   178 00002268 00000000            <2>  dd 0
   179                              <1> 
   180                              <1> colon 'flrefill', flrefill
   180                              <2>  header %1,%2
   180                              <3> [section headers]
   180 000012C8 [BE120000]          <3>  dd vlink
   180                              <3> %%link:
   180                              <3> %2n:
   180                              <3> %xdefine vlink %%link
   180 000012CC 08                  <3>  db (%%name-$-1)+imm
   180 000012CD 666C726566696C6C    <3>  db %1
   180                              <3> %%name:
   180 000012D5 [70220000]          <3>  dd %2
   180                              <3> %xdefine imm 0
   180                              <3> 
   180                              <3> section list
   180 0000226C [CC120000]          <3>  dd %%link
   180                              <2> %2:
   180 00002270 E8F3EAFFFF          <2>  call nest
   180                              <2> %2_b:
   181 00002275 [51200000]-         <1>   dd fladdr, flsz, plus     ; did we interpret the entire file?
   181 00002279 [44200000]-         <1>
   181 0000227D [070A0000]          <1>
   182 00002281 [5E200000]-         <1>   dd fltoin, equals
   182 00002285 [C0080000]          <1>
   183 00002289 [E70E0000]-         <1>   dd doif, .L1              ; if so end floading of this file
   183 0000228D [99220000]          <1>
   184 00002291 [47210000]-         <1>   dd endfload, exit         ; and restore previous files fload state
   184 00002295 [740D0000]          <1>
   185                              <1> .L1:
   186 00002299 [A70E0000]          <1>   dd dothen
   187                              <1> 
   188 0000229D [1F0E0000]-         <1>   dd zincrto, linenum_b     ; not done, increment current file line number
   188 000022A1 [3C200000]          <1>
   189 000022A5 [5E200000]-         <1>   dd fltoin, dup            ; set tib = address of next line to interpret
   189 000022A9 [E2020000]          <1>
   190 000022AD [F20D0000]-         <1>   dd zstoreto, tib_b
   190 000022B1 [A1170000]          <1>
   191 000022B5 [D00D0000]00040000- <1>   dd plit, 1024, plit, $0a  ; scan for eol on this line of source
   191 000022BD [D00D0000]0A000000  <1>
   192 000022C5 [A2150000]          <1>   dd scan
   193 000022C9 [B2080000]-         <1>   dd zequals, pabortq       ; coder needs a new enter key
   193 000022CD [8D120000]          <1>
   194 000022D1 13466C6F6164204C69- <1>   db 19, 'Fload Line Too Long'
   194 000022DA 6E6520546F6F204C6F- <1>
   194 000022E3 6E67                <1>
   195 000022E5 [8B0A0000]-         <1>   dd oneplus, dup           ; point beyond the eol
   195 000022E9 [E2020000]          <1>
   196 000022ED [5E200000]-         <1>   dd fltoin, minus          ; calculate total length of current line
   196 000022F1 [130A0000]          <1>
   197 000022F5 [F20D0000]-         <1>   dd zstoreto, numtib_b     ; set tib size = line length
   197 000022F9 [94170000]          <1>
   198 000022FD [F20D0000]-         <1>   dd zstoreto, fltoin_b     ; set address of next line to interpret
   198 00002301 [63200000]          <1>
   199 00002305 [FF0D0000]-         <1>   dd zoffto, toin_b         ; set parse offset to start of current line
   199 00002309 [87170000]          <1>
   200                              <1> 
   201 0000230D [740D0000]          <1>   dd exit
   202                              <1> 
   203                              <1> ; ------------------------------------------------------------------------
   204                              <1> ; fload file whose name is an ascii string
   205                              <1> 
   206                              <1> ;     ( a1 --- )
   207                              <1> 
   208                              <1> colon '(fload)', pfload
   208                              <2>  header %1,%2
   208                              <3> [section headers]
   208 000012D9 [CC120000]          <3>  dd vlink
   208                              <3> %%link:
   208                              <3> %2n:
   208                              <3> %xdefine vlink %%link
   208 000012DD 07                  <3>  db (%%name-$-1)+imm
   208 000012DE 28666C6F616429      <3>  db %1
   208                              <3> %%name:
   208 000012E5 [15230000]          <3>  dd %2
   208                              <3> %xdefine imm 0
   208                              <3> 
   208                              <3> section list
   208 00002311 [DD120000]          <3>  dd %%link
   208                              <2> %2:
   208 00002315 E84EEAFFFF          <2>  call nest
   208                              <2> %2_b:
   209 0000231A [65020000]          <1>   dd sys_open3              ; attempt to open specified file
   210 0000231E [E2020000]-         <1>   dd dup, qopen             ; abort if not open
   210 00002322 [78200000]          <1>
   211                              <1> 
   212 00002326 [E2020000]-         <1>   dd dup, plit, 2           ; map private
   212 0000232A [D00D0000]02000000  <1>
   213 00002332 [D00D0000]03000000- <1>   dd plit, 3, fmmap         ; prot read.  memory map file
   213 0000233A [C1210000]          <1>
   214                              <1> 
   215 0000233E [33220000]          <1>   dd save_state             ; save state of previous fload if any
   216                              <1> 
   217 00002342 [D00D0000]-         <1>   dd plit, flrefill         ; make fload-refil forths input refill
   217 00002346 [70220000]          <1>
   218 0000234A [F20D0000]-         <1>   dd zstoreto, refill_b
   218 0000234E [34240000]          <1>
   219                              <1> 
   220 00002352 [F20D0000]-         <1>   dd zstoreto, flsz_b       ; remember size of memory mapping
   220 00002356 [49200000]          <1>
   221 0000235A [E2020000]          <1>   dd dup
   222 0000235E [F20D0000]-         <1>   dd zstoreto, fladdr_b     ; set address of files memory mapping
   222 00002362 [56200000]          <1>
   223 00002366 [F20D0000]-         <1>   dd zstoreto, fltoin_b     ; set this address as current file parse point
   223 0000236A [63200000]          <1>
   224                              <1> 
   225 0000236E [F20D0000]-         <1>   dd zstoreto, fd_b         ; save open file descriptor
   225 00002372 [2F200000]          <1>
   226 00002376 [1F0E0000]-         <1>   dd zincrto, floads_b      ; count fload nest depth
   226 0000237A [22200000]          <1>
   227                              <1> 
   228 0000237E [FF0D0000]-         <1>   dd zoffto, linenum_b      ; reset current line of file being interpreted
   228 00002382 [3C200000]          <1>
   229                              <1> 
   230 00002386 [2F240000]-         <1>   dd refill, exit
   230 0000238A [740D0000]          <1>
   231                              <1> 
   232                              <1> ; ------------------------------------------------------------------------
   233                              <1> ; intepret from a file
   234                              <1> 
   235                              <1> colon 'fload', fload
   235                              <2>  header %1,%2
   235                              <3> [section headers]
   235 000012E9 [DD120000]          <3>  dd vlink
   235                              <3> %%link:
   235                              <3> %2n:
   235                              <3> %xdefine vlink %%link
   235 000012ED 05                  <3>  db (%%name-$-1)+imm
   235 000012EE 666C6F6164          <3>  db %1
   235                              <3> %%name:
   235 000012F3 [92230000]          <3>  dd %2
   235                              <3> %xdefine imm 0
   235                              <3> 
   235                              <3> section list
   235 0000238E [ED120000]          <3>  dd %%link
   235                              <2> %2:
   235 00002392 E8D1E9FFFF          <2>  call nest
   235                              <2> %2_b:
   236 00002397 [1D200000]-         <1>   dd floads, plit, 5        ; max fload nest depth is 5 and thats too manu
   236 0000239B [D00D0000]05000000  <1>
   237 000023A3 [C0080000]-         <1>   dd equals, pabortq
   237 000023A7 [8D120000]          <1>
   238 000023AB 16466C6F616473204E- <1>   db 22, 'Floads Nested Too Deep'
   238 000023B4 657374656420546F6F- <1>
   238 000023BD 2044656570          <1>
   239                              <1> 
   240 000023C2 [D00D0000]00000000- <1>   dd plit, 0, dup           ; file perms and flags
   240 000023CA [E2020000]          <1>
   241 000023CE [6B100000]-         <1>   dd bl_, word_             ; parse in file name
   241 000023D2 [A6180000]          <1>
   242 000023D6 [C51A0000]-         <1>   dd hhere, count, s2z      ; make file name asciiz
   242 000023DA [D7050000]-         <1>
   242 000023DE [E2070000]          <1>
   243 000023E2 [15230000]          <1>   dd pfload
   244 000023E6 [740D0000]          <1>   dd exit
   245                              <1> 
   246                              <1> ; =========================================================================
   134                                    %include "interpret.s"    ; inner interpreter (actually inner compiler)
     1                              <1> ; interpret.s    - x4 inner interpreter and compiler
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; making interpret a deferred word simplifies the creation of a teathered
     5                              <1> ; cross compiler (something i was working on for avr... brb... )
     6                              <1> 
     7                              <1> ; ------------------------------------------------------------------------
     8                              <1> 
     9                              <1>   _defer_ 'quit', quit, pquit
     9                              <2>  code %1,%2
     9                              <3>  header %1,%2
     9                              <4> [section headers]
     9 000012F7 [ED120000]          <4>  dd vlink
     9                              <4> %%link:
     9                              <4> %2n:
     9                              <4> %xdefine vlink %%link
     9 000012FB 04                  <4>  db (%%name-$-1)+imm
     9 000012FC 71756974            <4>  db %1
     9                              <4> %%name:
     9 00001300 [EE230000]          <4>  dd %2
     9                              <4> %xdefine imm 0
     9                              <4> 
     9                              <4> section list
     9 000023EA [FB120000]          <4>  dd %%link
     9                              <3> %2:
     9 000023EE E8D6E9FFFF          <2>  call dodefer
     9                              <2> %2_b:
     9 000023F3 [47250000]          <2>  dd %3
    10                              <1>   _defer_ '%interpret', zinterpret, pinterpret
    10                              <2>  code %1,%2
    10                              <3>  header %1,%2
    10                              <4> [section headers]
    10 00001304 [FB120000]          <4>  dd vlink
    10                              <4> %%link:
    10                              <4> %2n:
    10                              <4> %xdefine vlink %%link
    10 00001308 0A                  <4>  db (%%name-$-1)+imm
    10 00001309 25696E746572707265- <4>  db %1
    10 00001312 74                  <4>
    10                              <4> %%name:
    10 00001313 [FB230000]          <4>  dd %2
    10                              <4> %xdefine imm 0
    10                              <4> 
    10                              <4> section list
    10 000023F7 [08130000]          <4>  dd %%link
    10                              <3> %2:
    10 000023FB E8C9E9FFFF          <2>  call dodefer
    10                              <2> %2_b:
    10 00002400 [B8240000]          <2>  dd %3
    11                              <1>   _defer_ '.status', dotstatus, noop
    11                              <2>  code %1,%2
    11                              <3>  header %1,%2
    11                              <4> [section headers]
    11 00001317 [08130000]          <4>  dd vlink
    11                              <4> %%link:
    11                              <4> %2n:
    11                              <4> %xdefine vlink %%link
    11 0000131B 07                  <4>  db (%%name-$-1)+imm
    11 0000131C 2E737461747573      <4>  db %1
    11                              <4> %%name:
    11 00001323 [08240000]          <4>  dd %2
    11                              <4> %xdefine imm 0
    11                              <4> 
    11                              <4> section list
    11 00002404 [1B130000]          <4>  dd %%link
    11                              <3> %2:
    11 00002408 E8BCE9FFFF          <2>  call dodefer
    11                              <2> %2_b:
    11 0000240D [FC0C0000]          <2>  dd %3
    12                              <1>   _defer_ '.line#', dotl, noop
    12                              <2>  code %1,%2
    12                              <3>  header %1,%2
    12                              <4> [section headers]
    12 00001327 [1B130000]          <4>  dd vlink
    12                              <4> %%link:
    12                              <4> %2n:
    12                              <4> %xdefine vlink %%link
    12 0000132B 06                  <4>  db (%%name-$-1)+imm
    12 0000132C 2E6C696E6523        <4>  db %1
    12                              <4> %%name:
    12 00001332 [15240000]          <4>  dd %2
    12                              <4> %xdefine imm 0
    12                              <4> 
    12                              <4> section list
    12 00002411 [2B130000]          <4>  dd %%link
    12                              <3> %2:
    12 00002415 E8AFE9FFFF          <2>  call dodefer
    12                              <2> %2_b:
    12 0000241A [FC0C0000]          <2>  dd %3
    13                              <1> 
    14                              <1>   _defer_ 'source', source, psource
    14                              <2>  code %1,%2
    14                              <3>  header %1,%2
    14                              <4> [section headers]
    14 00001336 [2B130000]          <4>  dd vlink
    14                              <4> %%link:
    14                              <4> %2n:
    14                              <4> %xdefine vlink %%link
    14 0000133A 06                  <4>  db (%%name-$-1)+imm
    14 0000133B 736F75726365        <4>  db %1
    14                              <4> %%name:
    14 00001341 [22240000]          <4>  dd %2
    14                              <4> %xdefine imm 0
    14                              <4> 
    14                              <4> section list
    14 0000241E [3A130000]          <4>  dd %%link
    14                              <3> %2:
    14 00002422 E8A2E9FFFF          <2>  call dodefer
    14                              <2> %2_b:
    14 00002427 [A9170000]          <2>  dd %3
    15                              <1>   _defer_ 'refill', refill, query
    15                              <2>  code %1,%2
    15                              <3>  header %1,%2
    15                              <4> [section headers]
    15 00001345 [3A130000]          <4>  dd vlink
    15                              <4> %%link:
    15                              <4> %2n:
    15                              <4> %xdefine vlink %%link
    15 00001349 06                  <4>  db (%%name-$-1)+imm
    15 0000134A 726566696C6C        <4>  db %1
    15                              <4> %%name:
    15 00001350 [2F240000]          <4>  dd %2
    15                              <4> %xdefine imm 0
    15                              <4> 
    15                              <4> section list
    15 0000242B [49130000]          <4>  dd %%link
    15                              <3> %2:
    15 0000242F E895E9FFFF          <2>  call dodefer
    15                              <2> %2_b:
    15 00002434 [5D170000]          <2>  dd %3
    16                              <1> 
    17                              <1>   _var_ 'ok?', qok, -1      ; display ok messages in quit ?
    17                              <2>  code %1,%2
    17                              <3>  header %1,%2
    17                              <4> [section headers]
    17 00001354 [49130000]          <4>  dd vlink
    17                              <4> %%link:
    17                              <4> %2n:
    17                              <4> %xdefine vlink %%link
    17 00001358 03                  <4>  db (%%name-$-1)+imm
    17 00001359 6F6B3F              <4>  db %1
    17                              <4> %%name:
    17 0000135C [3C240000]          <4>  dd %2
    17                              <4> %xdefine imm 0
    17                              <4> 
    17                              <4> section list
    17 00002438 [58130000]          <4>  dd %%link
    17                              <3> %2:
    17 0000243C E86EE9FFFF          <2>  call doconstant
    17                              <2> %2_b:
    17 00002441 FFFFFFFF            <2>  dd %3
    18                              <1> 
    19                              <1> ; ------------------------------------------------------------------------
    20                              <1> ; compile a number or return its value
    21                              <1> 
    22                              <1> ;   ( n1 --- n1 | )
    23                              <1> 
    24                              <1> colon '?comp#', qcompnum
    24                              <2>  header %1,%2
    24                              <3> [section headers]
    24 00001360 [58130000]          <3>  dd vlink
    24                              <3> %%link:
    24                              <3> %2n:
    24                              <3> %xdefine vlink %%link
    24 00001364 06                  <3>  db (%%name-$-1)+imm
    24 00001365 3F636F6D7023        <3>  db %1
    24                              <3> %%name:
    24 0000136B [49240000]          <3>  dd %2
    24                              <3> %xdefine imm 0
    24                              <3> 
    24                              <3> section list
    24 00002445 [64130000]          <3>  dd %%link
    24                              <2> %2:
    24 00002449 E81AE9FFFF          <2>  call nest
    24                              <2> %2_b:
    25 0000244E [081D0000]          <1>   dd state                  ; if we are  in compile mode then compile n1
    26 00002452 [9A0D0000]          <1>   dd qcolon                 ; as a literal.  otherwise return n1
    27 00002456 [891D0000]-         <1>   dd literal, exit
    27 0000245A [740D0000]          <1>
    28 0000245E [740D0000]          <1>   dd exit
    29                              <1> 
    30                              <1> ; ------------------------------------------------------------------------
    31                              <1> ; we input an unknown word. is it it a valid number in current radix?
    32                              <1> 
    33                              <1> ;       ( --- | n1 )
    34                              <1> 
    35                              <1> colon '?#', qnum
    35                              <2>  header %1,%2
    35                              <3> [section headers]
    35 0000136F [64130000]          <3>  dd vlink
    35                              <3> %%link:
    35                              <3> %2n:
    35                              <3> %xdefine vlink %%link
    35 00001373 02                  <3>  db (%%name-$-1)+imm
    35 00001374 3F23                <3>  db %1
    35                              <3> %%name:
    35 00001376 [66240000]          <3>  dd %2
    35                              <3> %xdefine imm 0
    35                              <3> 
    35                              <3> section list
    35 00002462 [73130000]          <3>  dd %%link
    35                              <2> %2:
    35 00002466 E8FDE8FFFF          <2>  call nest
    35                              <2> %2_b:
    36 0000246B [C51A0000]-         <1>   dd hhere, cfetch, zequals ; null input ?
    36 0000246F [91050000]-         <1>
    36 00002473 [B2080000]          <1>
    37 00002477 [800D0000]          <1>   dd qexit                  ; null input is not an error
    38                              <1> 
    39 0000247B [C51A0000]-         <1>   dd hhere, number          ; ( --- n1 true | false )
    39 0000247F [48150000]          <1>
    40 00002483 [B2080000]-         <1>   dd zequals, qmissing      ; abort if not valid number
    40 00002487 [461A0000]          <1>
    41 0000248B [49240000]          <1>   dd qcompnum               ; otherwise compile it as a literla or return
    42 0000248F [740D0000]          <1>   dd exit                   ; it
    43                              <1> 
    44                              <1> ; ------------------------------------------------------------------------
    45                              <1> ; input is a known word. compile it or execute it
    46                              <1> 
    47                              <1> ; if we are in interpret mode execute the word whose cfa on the stack
    48                              <1> ; if we are in compile mode and the word is immediate then execute it
    49                              <1> ; if we are in compile mode and the word is not immediate compile it
    50                              <1> 
    51                              <1> ;       ( xt [ t | 1 ] --- )
    52                              <1> 
    53                              <1> colon '?exec', qexec
    53                              <2>  header %1,%2
    53                              <3> [section headers]
    53 0000137A [73130000]          <3>  dd vlink
    53                              <3> %%link:
    53                              <3> %2n:
    53                              <3> %xdefine vlink %%link
    53 0000137E 05                  <3>  db (%%name-$-1)+imm
    53 0000137F 3F65786563          <3>  db %1
    53                              <3> %%name:
    53 00001384 [97240000]          <3>  dd %2
    53                              <3> %xdefine imm 0
    53                              <3> 
    53                              <3> section list
    53 00002493 [7E130000]          <3>  dd %%link
    53                              <2> %2:
    53 00002497 E8CCE8FFFF          <2>  call nest
    53                              <2> %2_b:
    54 0000249C [081D0000]-         <1>   dd state, xorr
    54 000024A0 [9B080000]          <1>
    55 000024A4 [9A0D0000]-         <1>   dd qcolon, execute, comma
    55 000024A8 [DD0D0000]-         <1>
    55 000024AC [451C0000]          <1>
    56 000024B0 [740D0000]          <1>   dd exit
    57                              <1> 
    58                              <1> ; state | flag  | action  |
    59                              <1> ; ------+-------+---------+
    60                              <1> ;  0    |  1    | execute |
    61                              <1> ;  0    | -1    | execute |
    62                              <1> ; -1    |  1    | execute |
    63                              <1> ; -1    | -1    | compile |
    64                              <1> ; ------+-------+---------+
    65                              <1> 
    66                              <1> ; ------------------------------------------------------------------------
    67                              <1> ; interpret/compile word or number (%interpret vectors to here normally)
    68                              <1> 
    69                              <1> ;       ( xt [t | 1] | false --- | n1 )
    70                              <1> 
    71                              <1> colon '(interpret)', pinterpret
    71                              <2>  header %1,%2
    71                              <3> [section headers]
    71 00001388 [7E130000]          <3>  dd vlink
    71                              <3> %%link:
    71                              <3> %2n:
    71                              <3> %xdefine vlink %%link
    71 0000138C 0B                  <3>  db (%%name-$-1)+imm
    71 0000138D 28696E746572707265- <3>  db %1
    71 00001396 7429                <3>
    71                              <3> %%name:
    71 00001398 [B8240000]          <3>  dd %2
    71                              <3> %xdefine imm 0
    71                              <3> 
    71                              <3> section list
    71 000024B4 [8C130000]          <3>  dd %%link
    71                              <2> %2:
    71 000024B8 E8ABE8FFFF          <2>  call nest
    71                              <2> %2_b:
    72 000024BD [EC020000]          <1>   dd qdup                   ; ?exec needs the -1/1 but ?# does not need 0
    73 000024C1 [9A0D0000]          <1>   dd qcolon
    74 000024C5 [97240000]-         <1>   dd qexec, qnum
    74 000024C9 [66240000]          <1>
    75 000024CD [740D0000]          <1>   dd exit
    76                              <1> 
    77                              <1> ; ------------------------------------------------------------------------
    78                              <1> ; interpret input buffers till nothing left to interpreet
    79                              <1> 
    80                              <1> colon 'interpret', interpret
    80                              <2>  header %1,%2
    80                              <3> [section headers]
    80 0000139C [8C130000]          <3>  dd vlink
    80                              <3> %%link:
    80                              <3> %2n:
    80                              <3> %xdefine vlink %%link
    80 000013A0 09                  <3>  db (%%name-$-1)+imm
    80 000013A1 696E74657270726574  <3>  db %1
    80                              <3> %%name:
    80 000013AA [D5240000]          <3>  dd %2
    80                              <3> %xdefine imm 0
    80                              <3> 
    80                              <3> section list
    80 000024D1 [A0130000]          <3>  dd %%link
    80                              <2> %2:
    80 000024D5 E88EE8FFFF          <2>  call nest
    80                              <2> %2_b:
    81 000024DA [B00E0000]          <1>   dd dobegin                ; repeat till tib is empty
    82                              <1> .L0:
    83 000024DE [761A0000]          <1>   dd defined                ; is the typed in stuff a valid forth word?
    84 000024E2 [FB230000]          <1>   dd zinterpret             ; interpret, compile or abort
    85 000024E6 [9D040000]          <1>   dd qstack                 ; did any of the above over/underflow?
    86 000024EA [BE170000]-         <1>   dd left, zequals
    86 000024EE [B2080000]          <1>
    87 000024F2 [F30E0000]-         <1>   dd quntil, .L0
    87 000024F6 [DE240000]          <1>
    88 000024FA [740D0000]          <1>   dd exit                   ; else return to quit for an "ok"
    89                              <1> 
    90                              <1> ; ------------------------------------------------------------------------
    91                              <1> ; conditionally display "ok" after user input
    92                              <1> 
    93                              <1> colon '.ok', dotok
    93                              <2>  header %1,%2
    93                              <3> [section headers]
    93 000013AE [A0130000]          <3>  dd vlink
    93                              <3> %%link:
    93                              <3> %2n:
    93                              <3> %xdefine vlink %%link
    93 000013B2 03                  <3>  db (%%name-$-1)+imm
    93 000013B3 2E6F6B              <3>  db %1
    93                              <3> %%name:
    93 000013B6 [02250000]          <3>  dd %2
    93                              <3> %xdefine imm 0
    93                              <3> 
    93                              <3> section list
    93 000024FE [B2130000]          <3>  dd %%link
    93                              <2> %2:
    93 00002502 E861E8FFFF          <2>  call nest
    93                              <2> %2_b:
    94 00002507 [1D200000]-         <1>   dd floads, qexit          ; never display ok when floading
    94 0000250B [800D0000]          <1>
    95                              <1> 
    96 0000250F [081D0000]-         <1>   dd state, nott            ; no ok mesage while still in compile mode
    96 00002513 [A7080000]          <1>
    97 00002517 [3C240000]-         <1>   dd qok, andd              ; and abort errors are never ok
    97 0000251B [83080000]          <1>
    98 0000251F [E70E0000]-         <1>   dd doif, .L0              ; but go ahead and output a cr
    98 00002523 [33250000]          <1>
    99                              <1> 
   100 00002527 [4B120000]          <1>   dd pdotq                  ; ok... display ok message
   101 0000252B 03206F6B            <1>   db 3, ' ok'
   102 0000252F [A70E0000]          <1>   dd dothen
   103                              <1> 
   104                              <1> .L0:
   105 00002533 [96110000]          <1>   dd cr                     ; output a new line
   106 00002537 [0F0E0000]-         <1>   dd zonto, qok_b           ; reset ?ok till next error
   106 0000253B [41240000]          <1>
   107 0000253F [740D0000]          <1>   dd exit
   108                              <1> 
   109                              <1> ; ------------------------------------------------------------------------
   110                              <1> ; forths inner interpret (erm compiler :) loop
   111                              <1> 
   112                              <1> ; this is an infinite loop.  any abort will cause a jump back to here
   113                              <1> 
   114                              <1> colon '(quit)', pquit
   114                              <2>  header %1,%2
   114                              <3> [section headers]
   114 000013BA [B2130000]          <3>  dd vlink
   114                              <3> %%link:
   114                              <3> %2n:
   114                              <3> %xdefine vlink %%link
   114 000013BE 06                  <3>  db (%%name-$-1)+imm
   114 000013BF 287175697429        <3>  db %1
   114                              <3> %%name:
   114 000013C5 [47250000]          <3>  dd %2
   114                              <3> %xdefine imm 0
   114                              <3> 
   114                              <3> section list
   114 00002543 [BE130000]          <3>  dd %%link
   114                              <2> %2:
   114 00002547 E81CE8FFFF          <2>  call nest
   114                              <2> %2_b:
   115 0000254C [221D0000]          <1>   dd lbracket               ; state off
   116 00002550 [D5020000]-         <1>   dd rp0, rpstore           ; reset stack pointers
   116 00002554 [6C040000]          <1>
   117 00002558 [C8020000]-         <1>   dd sp0, spstore
   117 0000255C [54040000]          <1>
   118 00002560 [B00E0000]          <1>   dd dobegin                ; stay a while... stay forever! <-- props to
   119                              <1> .L0:                        ; anyone who knows what game this is from :)
   120 00002564 [08240000]-         <1>   dd dotstatus, dotok       ; display status and ok message (maybe)
   120 00002568 [02250000]          <1>
   121 0000256C [D5240000]          <1>   dd interpret              ; interpret user input
   122 00002570 [CA0E0000]-         <1>   dd doagain, .L0
   122 00002574 [64250000]          <1>
   123 00002578 [740D0000]          <1>   dd exit                   ; this should never get executed
   124                              <1> 
   125                              <1> ; ------------------------------------------------------------------------
   126                              <1> ; an error occurred. reset and jump back into quit
   127                              <1> 
   128                              <1> colon '(abort)', pabort
   128                              <2>  header %1,%2
   128                              <3> [section headers]
   128 000013C9 [BE130000]          <3>  dd vlink
   128                              <3> %%link:
   128                              <3> %2n:
   128                              <3> %xdefine vlink %%link
   128 000013CD 07                  <3>  db (%%name-$-1)+imm
   128 000013CE 2861626F727429      <3>  db %1
   128                              <3> %%name:
   128 000013D5 [80250000]          <3>  dd %2
   128                              <3> %xdefine imm 0
   128                              <3> 
   128                              <3> section list
   128 0000257C [CD130000]          <3>  dd %%link
   128                              <2> %2:
   128 00002580 E8E3E7FFFF          <2>  call nest
   128                              <2> %2_b:
   129 00002585 [15240000]          <1>   dd dotl                   ; kludgy but it works
   130 00002589 [37190000]          <1>   dd xs                     ; \\s abort all file loads
   131 0000258D [FF0D0000]-         <1>   dd zoffto, numtib_b       ; flush input on abort
   131 00002591 [94170000]          <1>
   132 00002595 [FF0D0000]-         <1>   dd zoffto, toin_b
   132 00002599 [87170000]          <1>
   133 0000259D [FF0D0000]-         <1>   dd zoffto, qok_b          ; no ok message
   133 000025A1 [41240000]          <1>
   134 000025A5 [EE230000]          <1>   dd quit                   ; jump back into quit loop
   135                              <1> 
   136                              <1> ; ========================================================================
   135                                  
   136                                  ; ------------------------------------------------------------------------
   137                                  ; chain words on root vocabulary
   138                                  
   139                                    _root_
   139                              <1>  save_link
   139                              <2>  %if(voc = 0)
   139                              <2>  %xdefine forth_link vlink
   139                              <2>  %elif(voc = 1)
   139                              <2>  %xdefine comp_link vlink
   139                              <2>  %else
   139                              <2>  %xdefine root_link vlink
   139                              <2>  %endif
   139                              <1>  %xdefine vlink root_link
   139                              <1>  %xdefine voc 2
   140                                  
   141                                    %include "reloc.s"        ; head space relocation (see fsave.f)
     1                              <1> ; reloc.1        - x4 head space relocation words
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> 
     6                              <1> rethread:
     7 000025A9 56                  <1>   push esi
     8 000025AA 8B35[7A260000]      <1>   mov esi, [voclink_b]      ; point to first vocabulary
     9                              <1> .L0:
    10 000025B0 B940000000          <1>   mov ecx, 64               ; number of threads in vocabulary
    11                              <1> .L1:
    12 000025B5 3B16                <1>   cmp edx, [esi]            ; is start of this thread the header we just
    13 000025B7 7502                <1>   jne .L2                   ;  relocated?
    14 000025B9 892E                <1>   mov [esi], ebp            ; yes - point thread at headers new address
    15                              <1> .L2:
    16 000025BB 83C604              <1>   add esi, byte CELL        ; point to next thread
    17 000025BE E2F5                <1>   loop .L1
    18 000025C0 8B36                <1>   mov esi, [esi]            ; link back to next vocabulary
    19 000025C2 83FE00              <1>   cmp esi, 0                ; no more vocabs ?
    20 000025C5 75E9                <1>   jne .L0
    21 000025C7 5E                  <1>   pop esi
    22 000025C8 C3                  <1>   ret
    23                              <1> 
    24                              <1> ; ------------------------------------------------------------------------
    25                              <1> 
    26                              <1> hreloc:
    27 000025C9 8B06                <1>   mov eax, [esi]            ; get soruce link field
    28 000025CB 83F800              <1>   cmp eax, 0                ; start of thread ?
    29 000025CE 7403                <1>   jz .L0
    30 000025D0 8B40FC              <1>   mov eax, [eax-4]
    31                              <1> .L0:
    32 000025D3 AB                  <1>   stosd                     ; save link in destination
    33 000025D4 893E                <1>   mov [esi], edi            ; save where this header gets relocated to
    34 000025D6 83C604              <1>   add esi, byte 4
    35 000025D9 89FD                <1>   mov ebp, edi              ; and destination nfa too
    36 000025DB 89F2                <1>   mov edx, esi              ; remember source nfa hdr we just relocated
    37 000025DD 0FB60E              <1>   movzx ecx, byte [esi]
    38 000025E0 89C8                <1>   mov eax, ecx
    39 000025E2 83E11F              <1>   and ecx, LEX
    40 000025E5 41                  <1>   inc ecx
    41 000025E6 F3A4                <1>   rep movsb                 ; relocate nfa
    42 000025E8 83E020              <1>   and eax, ALIAS            ; is this an alias ?
    43 000025EB 7505                <1>   jnz .L2
    44 000025ED 8B06                <1>   mov eax, [esi]            ; get cfa of this word
    45 000025EF 8968FC              <1>   mov [eax-4], ebp          ; point cfa-4 at new header location
    46                              <1> .L2:
    47 000025F2 A5                  <1>   movsd                     ; relocate cfa pointer
    48 000025F3 C3                  <1>   ret
    49                              <1> 
    50                              <1> ; ------------------------------------------------------------------------
    51                              <1> ; relocate all headers to address edi
    52                              <1> 
    53                              <1> relocate:
    54 000025F4 E8D0FFFFFF          <1>   call hreloc               ; relocate one header
    55 000025F9 E8ABFFFFFF          <1>   call rethread             ; check all threads of all vocabs for relocated
    56 000025FE 39DA                <1>   cmp edx, ebx              ; finished ?
    57 00002600 75F2                <1>   jne relocate
    58 00002602 C3                  <1>   ret
    59                              <1> 
    60                              <1> ; ------------------------------------------------------------------------
    61                              <1> ; relocate all headers to allocated head space
    62                              <1> 
    63                              <1> unpack:
    64 00002603 55                  <1>   push ebp
    65 00002604 A1[BF000000]        <1>   mov eax, [turnkeyd_b]     ; are there any headers to relocate ?
    66 00002609 09C0                <1>   or eax, eax
    67 0000260B 7523                <1>   jnz .L0
    68                              <1> 
    69 0000260D 8B35[F71B0000]      <1>   mov esi, [dp_b]           ; get address of end of list space
    70 00002613 8B3D[041C0000]      <1>   mov edi, [hp_b]           ; where to relocate to
    71 00002619 8B1D[082B0000]      <1>   mov ebx, [lhead]          ; address of last header defined
    72                              <1> 
    73 0000261F E8D0FFFFFF          <1>   call relocate
    74                              <1> 
    75 00002624 892D[082B0000]      <1>   mov [lhead], ebp          ; save address of highest header in memory
    76 0000262A 893D[041C0000]      <1>   mov [hp_b], edi           ; correct h-here
    77                              <1> 
    78                              <1> .L0:
    79 00002630 5D                  <1>   pop ebp
    80 00002631 C3                  <1>   ret
    81                              <1> 
    82                              <1> ; ------------------------------------------------------------------------
    83                              <1> ; relocate all headers to here. point here at end of packed headers
    84                              <1> 
    85                              <1> code 'pack', pack
    85                              <2>  header %1,%2
    85                              <3> [section headers]
    85 000013D9 00000000            <3>  dd vlink
    85                              <3> %%link:
    85                              <3> %2n:
    85                              <3> %xdefine vlink %%link
    85 000013DD 04                  <3>  db (%%name-$-1)+imm
    85 000013DE 7061636B            <3>  db %1
    85                              <3> %%name:
    85 000013E2 [36260000]          <3>  dd %2
    85                              <3> %xdefine imm 0
    85                              <3> 
    85                              <3> section list
    85 00002632 [DD130000]          <3>  dd %%link
    85                              <2> %2:
    86 00002636 53                  <1>   push ebx                  ; retain cached top of stack
    87 00002637 56                  <1>   push esi                  ; and interprative pointer
    88 00002638 55                  <1>   push ebp
    89 00002639 8B35[30000000]      <1>   mov esi, [bhead_b]        ; point to start of head space
    90 0000263F 8B3D[F71B0000]      <1>   mov edi, [dp_b]           ; point to reloc destination
    91 00002645 8B1D[1A1D0000]      <1>   mov ebx, [last_b]
    92 0000264B E8A4FFFFFF          <1>   call relocate             ; relocate all headers
    93 00002650 893D[041C0000]      <1>   mov [hp_b], edi
    94 00002656 892D[082B0000]      <1>   mov [lhead], ebp
    95 0000265C 5D                  <1>   pop ebp
    96 0000265D 5E                  <1>   pop esi
    97 0000265E 5B                  <1>   pop ebx
    98                              <1>   next
    98 0000265F E9A7E6FFFF          <2>  jmp _next
    99                              <1> 
   100                              <1> ;=========================================================================
   142                                    %include "vocabs.s"       ; vocabulary creation etc
     1                              <1> ; vocabs.s     - x4 vocabulary creating words etc
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; can not put this in rehash.s as it has to be 100% headerless
     6                              <1> 
     7                              <1>   _defer_ 'rehash', rehash, _rehash
     7                              <2>  code %1,%2
     7                              <3>  header %1,%2
     7                              <4> [section headers]
     7 000013E6 [DD130000]          <4>  dd vlink
     7                              <4> %%link:
     7                              <4> %2n:
     7                              <4> %xdefine vlink %%link
     7 000013EA 06                  <4>  db (%%name-$-1)+imm
     7 000013EB 726568617368        <4>  db %1
     7                              <4> %%name:
     7 000013F1 [68260000]          <4>  dd %2
     7                              <4> %xdefine imm 0
     7                              <4> 
     7                              <4> section list
     7 00002664 [EA130000]          <4>  dd %%link
     7                              <3> %2:
     7 00002668 E85CE7FFFF          <2>  call dodefer
     7                              <2> %2_b:
     7 0000266D [4F2B0000]          <2>  dd %3
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------------------
    10                              <1> ; remembers most recently defined vocabulary
    11                              <1> 
    12                              <1>   _variable_ 'voclink', voclink, root_b
    12                              <2>  code %1,%2
    12                              <3>  header %1,%2
    12                              <4> [section headers]
    12 000013F5 [EA130000]          <4>  dd vlink
    12                              <4> %%link:
    12                              <4> %2n:
    12                              <4> %xdefine vlink %%link
    12 000013F9 07                  <4>  db (%%name-$-1)+imm
    12 000013FA 766F636C696E6B      <4>  db %1
    12                              <4> %%name:
    12 00001401 [75260000]          <4>  dd %2
    12                              <4> %xdefine imm 0
    12                              <4> 
    12                              <4> section list
    12 00002671 [F9130000]          <4>  dd %%link
    12                              <3> %2:
    12 00002675 E843E7FFFF          <2>  call dovariable
    12                              <2> %2_b:
    12 0000267A [042A0000]          <2>  dd %3
    13                              <1> 
    14                              <1> ; ------------------------------------------------------------------------
    15                              <1> 
    16                              <1>   _constant_ '#threads', numthread, 64
    16                              <2>  code %1,%2
    16                              <3>  header %1,%2
    16                              <4> [section headers]
    16 00001405 [F9130000]          <4>  dd vlink
    16                              <4> %%link:
    16                              <4> %2n:
    16                              <4> %xdefine vlink %%link
    16 00001409 08                  <4>  db (%%name-$-1)+imm
    16 0000140A 2374687265616473    <4>  db %1
    16                              <4> %%name:
    16 00001412 [82260000]          <4>  dd %2
    16                              <4> %xdefine imm 0
    16                              <4> 
    16                              <4> section list
    16 0000267E [09140000]          <4>  dd %%link
    16                              <3> %2:
    16 00002682 E828E7FFFF          <2>  call doconstant
    16                              <2> %2_b:
    16 00002687 40000000            <2>  dd %3
    17                              <1>   _var_ 'current', current, forth_b
    17                              <2>  code %1,%2
    17                              <3>  header %1,%2
    17                              <4> [section headers]
    17 00001416 [09140000]          <4>  dd vlink
    17                              <4> %%link:
    17                              <4> %2n:
    17                              <4> %xdefine vlink %%link
    17 0000141A 07                  <4>  db (%%name-$-1)+imm
    17 0000141B 63757272656E74      <4>  db %1
    17                              <4> %%name:
    17 00001422 [8F260000]          <4>  dd %2
    17                              <4> %xdefine imm 0
    17                              <4> 
    17                              <4> section list
    17 0000268B [1A140000]          <4>  dd %%link
    17                              <3> %2:
    17 0000268F E81BE7FFFF          <2>  call doconstant
    17                              <2> %2_b:
    17 00002694 [EA270000]          <2>  dd %3
    18                              <1> 
    19                              <1>   _var_ 'context', context, context0_b
    19                              <2>  code %1,%2
    19                              <3>  header %1,%2
    19                              <4> [section headers]
    19 00001426 [1A140000]          <4>  dd vlink
    19                              <4> %%link:
    19                              <4> %2n:
    19                              <4> %xdefine vlink %%link
    19 0000142A 07                  <4>  db (%%name-$-1)+imm
    19 0000142B 636F6E74657874      <4>  db %1
    19                              <4> %%name:
    19 00001432 [9C260000]          <4>  dd %2
    19                              <4> %xdefine imm 0
    19                              <4> 
    19                              <4> section list
    19 00002698 [2A140000]          <4>  dd %%link
    19                              <3> %2:
    19 0000269C E80EE7FFFF          <2>  call doconstant
    19                              <2> %2_b:
    19 000026A1 [C8260000]          <2>  dd %3
    20                              <1>   _var_ '#context', numcontext, 3
    20                              <2>  code %1,%2
    20                              <3>  header %1,%2
    20                              <4> [section headers]
    20 00001436 [2A140000]          <4>  dd vlink
    20                              <4> %%link:
    20                              <4> %2n:
    20                              <4> %xdefine vlink %%link
    20 0000143A 08                  <4>  db (%%name-$-1)+imm
    20 0000143B 23636F6E74657874    <4>  db %1
    20                              <4> %%name:
    20 00001443 [A9260000]          <4>  dd %2
    20                              <4> %xdefine imm 0
    20                              <4> 
    20                              <4> section list
    20 000026A5 [3A140000]          <4>  dd %%link
    20                              <3> %2:
    20 000026A9 E801E7FFFF          <2>  call doconstant
    20                              <2> %2_b:
    20 000026AE 03000000            <2>  dd %3
    21                              <1>   _var_ 'contexts', contexts, 0
    21                              <2>  code %1,%2
    21                              <3>  header %1,%2
    21                              <4> [section headers]
    21 00001447 [3A140000]          <4>  dd vlink
    21                              <4> %%link:
    21                              <4> %2n:
    21                              <4> %xdefine vlink %%link
    21 0000144B 08                  <4>  db (%%name-$-1)+imm
    21 0000144C 636F6E7465787473    <4>  db %1
    21                              <4> %%name:
    21 00001454 [B6260000]          <4>  dd %2
    21                              <4> %xdefine imm 0
    21                              <4> 
    21                              <4> section list
    21 000026B2 [4B140000]          <4>  dd %%link
    21                              <3> %2:
    21 000026B6 E8F4E6FFFF          <2>  call doconstant
    21                              <2> %2_b:
    21 000026BB 00000000            <2>  dd %3
    22                              <1> 
    23                              <1> ; ------------------------------------------------------------------------
    24                              <1> ; the context stack - the search order
    25                              <1> 
    26                              <1> ; enough space to have 16 vocabularies in the search order
    27                              <1> ; i.e. overkill
    28                              <1> 
    29                              <1> code 'context0', context0
    29                              <2>  header %1,%2
    29                              <3> [section headers]
    29 00001458 [4B140000]          <3>  dd vlink
    29                              <3> %%link:
    29                              <3> %2n:
    29                              <3> %xdefine vlink %%link
    29 0000145C 08                  <3>  db (%%name-$-1)+imm
    29 0000145D 636F6E7465787430    <3>  db %1
    29                              <3> %%name:
    29 00001465 [C3260000]          <3>  dd %2
    29                              <3> %xdefine imm 0
    29                              <3> 
    29                              <3> section list
    29 000026BF [5C140000]          <3>  dd %%link
    29                              <2> %2:
    30 000026C3 E8F5E6FFFF          <1>   call dovariable
    31                              <1> context0_b:
    32 000026C8 [042A0000]          <1>   dd root_b
    33 000026CC [F7280000]          <1>   dd compiler_b
    34 000026D0 [EA270000]          <1>   dd forth_b
    35 000026D4 00000000<rept>      <1>   times 13 dd 0
    36                              <1> 
    37                              <1> ; ------------------------------------------------------------------------
    38                              <1> ; run time for vocabularies
    39                              <1> 
    40                              <1> ; push specified vocabulary onto context stack or rotate it out to top
    41                              <1> ; if its already in there
    42                              <1> 
    43                              <1> ;       ( a1 --- )
    44                              <1> 
    45                              <1> code 'dovoc', dovoc
    45                              <2>  header %1,%2
    45                              <3> [section headers]
    45 00001469 [5C140000]          <3>  dd vlink
    45                              <3> %%link:
    45                              <3> %2n:
    45                              <3> %xdefine vlink %%link
    45 0000146D 05                  <3>  db (%%name-$-1)+imm
    45 0000146E 646F766F63          <3>  db %1
    45                              <3> %%name:
    45 00001473 [0C270000]          <3>  dd %2
    45                              <3> %xdefine imm 0
    45                              <3> 
    45                              <3> section list
    45 00002708 [6D140000]          <3>  dd %%link
    45                              <2> %2:
    46 0000270C 8B3D[A1260000]      <1>   mov edi, [context_b]      ; get address of active context stack
    47 00002712 8B0D[AE260000]      <1>   mov ecx, [numcontext_b]   ; get context stack depth
    48 00002718 58                  <1>   pop eax
    49                              <1> 
    50 00002719 F2AF                <1>   repnz scasd               ; is vocabulary already in context?
    51 0000271B 7517                <1>   jne .L1
    52 0000271D E31C                <1>   jecxz .L2
    53                              <1> 
    54                              <1>   ; already in context - rotate it out to top of stack
    55                              <1> 
    56 0000271F 83EF04              <1>   sub edi, byte 4           ; point back at found vocab
    57                              <1> 
    58                              <1> .L0:
    59 00002722 8B5704              <1>   mov edx, [edi+4]          ; shift each voc down 1 pos in stack
    60 00002725 8917                <1>   mov [edi], edx
    61 00002727 83C704              <1>   add edi, byte 4
    62 0000272A 49                  <1>   dec ecx
    63 0000272B 75F5                <1>   jne .L0
    64 0000272D 8907                <1>   mov [edi], eax            ; put vocab a1 at top of context stack
    65                              <1>   next
    65 0000272F E9D7E5FFFF          <2>  jmp _next
    66                              <1> 
    67                              <1> .L1:
    68 00002734 FF05[AE260000]      <1>   inc dword [numcontext_b]  ; no - increment depth
    69 0000273A AB                  <1>   stosd                     ; add vocabulary to context
    70                              <1> .L2:
    71                              <1>   next
    71 0000273B E9CBE5FFFF          <2>  jmp _next
    72                              <1> 
    73                              <1> ; ------------------------------------------------------------------------
    74                              <1> ; create a new vocabulary
    75                              <1> 
    76                              <1> colon 'vocabulary', vocabulary
    76                              <2>  header %1,%2
    76                              <3> [section headers]
    76 00001477 [6D140000]          <3>  dd vlink
    76                              <3> %%link:
    76                              <3> %2n:
    76                              <3> %xdefine vlink %%link
    76 0000147B 0A                  <3>  db (%%name-$-1)+imm
    76 0000147C 766F636162756C6172- <3>  db %1
    76 00001485 79                  <3>
    76                              <3> %%name:
    76 00001486 [44270000]          <3>  dd %2
    76                              <3> %xdefine imm 0
    76                              <3> 
    76                              <3> section list
    76 00002740 [7B140000]          <3>  dd %%link
    76                              <2> %2:
    76 00002744 E81FE6FFFF          <2>  call nest
    76                              <2> %2_b:
    77 00002749 [8F260000]          <1>   dd current                ; remember where definitions are being linked
    78 0000274D [D00D0000]-         <1>   dd plit, root_b           ; all vocabs created into root
    78 00002751 [042A0000]          <1>
    79 00002755 [F20D0000]-         <1>   dd zstoreto, current_b
    79 00002759 [94260000]          <1>
    80                              <1> 
    81 0000275D [921E0000]-         <1>   dd create, suses, dovoc   ; create header, make voc use dovoc
    81 00002761 [2F1E0000]-         <1>
    81 00002765 [0C270000]          <1>
    82 00002769 [B51A0000]-         <1>   dd here, dup              ; create vocabulary thread array
    82 0000276D [E2020000]          <1>
    83 00002771 [D00D0000]00010000- <1>   dd plit, 256, dup
    83 00002779 [E2020000]          <1>
    84 0000277D [251C0000]-         <1>   dd allot, erase
    84 00002781 [1E070000]          <1>
    85 00002785 [75260000]-         <1>   dd voclink, fetch, comma  ; link new voc to previous one
    85 00002789 [7A050000]-         <1>
    85 0000278D [451C0000]          <1>
    86 00002791 [75260000]-         <1>   dd voclink, store         ; remember most recent vocabulary
    86 00002795 [85050000]          <1>
    87 00002799 [F20D0000]-         <1>   dd zstoreto, current_b    ; restore current
    87 0000279D [94260000]          <1>
    88 000027A1 [740D0000]          <1>   dd exit
    89                              <1> 
    90                              <1> ; ------------------------------------------------------------------------
    91                              <1> ; make all new definitions go into first vocab in search order
    92                              <1> 
    93                              <1> code "definitions", definitions
    93                              <2>  header %1,%2
    93                              <3> [section headers]
    93 0000148A [7B140000]          <3>  dd vlink
    93                              <3> %%link:
    93                              <3> %2n:
    93                              <3> %xdefine vlink %%link
    93 0000148E 0B                  <3>  db (%%name-$-1)+imm
    93 0000148F 646566696E6974696F- <3>  db %1
    93 00001498 6E73                <3>
    93                              <3> %%name:
    93 0000149A [A9270000]          <3>  dd %2
    93                              <3> %xdefine imm 0
    93                              <3> 
    93                              <3> section list
    93 000027A5 [8E140000]          <3>  dd %%link
    93                              <2> %2:
    94 000027A9 8B3D[A1260000]      <1>   mov edi, [context_b]      ; get address of active context stack
    95 000027AF A1[AE260000]        <1>   mov eax, [numcontext_b]   ; get context stack depth
    96 000027B4 48                  <1>   dec eax
    97 000027B5 8B0487              <1>   mov eax, [edi +4* eax]
    98 000027B8 A3[94260000]        <1>   mov [current_b], eax
    99                              <1>   next
    99 000027BD E949E5FFFF          <2>  jmp _next
   100                              <1> 
   101                              <1> ; ------------------------------------------------------------------------
   102                              <1> ; drop top item of context stack
   103                              <1> 
   104                              <1> code 'previous', previous
   104                              <2>  header %1,%2
   104                              <3> [section headers]
   104 0000149E [8E140000]          <3>  dd vlink
   104                              <3> %%link:
   104                              <3> %2n:
   104                              <3> %xdefine vlink %%link
   104 000014A2 08                  <3>  db (%%name-$-1)+imm
   104 000014A3 70726576696F7573    <3>  db %1
   104                              <3> %%name:
   104 000014AB [C6270000]          <3>  dd %2
   104                              <3> %xdefine imm 0
   104                              <3> 
   104                              <3> section list
   104 000027C2 [A2140000]          <3>  dd %%link
   104                              <2> %2:
   105 000027C6 8B3D[A1260000]      <1>   mov edi, [context_b]
   106 000027CC A1[AE260000]        <1>   mov eax, [numcontext_b]
   107 000027D1 FF0D[AE260000]      <1>   dec dword [numcontext_b]
   108 000027D7 31C9                <1>   xor ecx, ecx
   109 000027D9 890C87              <1>   mov [edi +4* eax], ecx
   110                              <1>   next
   110 000027DC E92AE5FFFF          <2>  jmp _next
   111                              <1> 
   112                              <1> ; ------------------------------------------------------------------------
   113                              <1> 
   114                              <1>   _vocab_ "forth", forth, forth_link, 0
   114                              <2>  code %1,%2
   114                              <3>  header %1,%2
   114                              <4> [section headers]
   114 000014AF [A2140000]          <4>  dd vlink
   114                              <4> %%link:
   114                              <4> %2n:
   114                              <4> %xdefine vlink %%link
   114 000014B3 05                  <4>  db (%%name-$-1)+imm
   114 000014B4 666F727468          <4>  db %1
   114                              <4> %%name:
   114 000014B9 [E5270000]          <4>  dd %2
   114                              <4> %xdefine imm 0
   114                              <4> 
   114                              <4> section list
   114 000027E1 [B3140000]          <4>  dd %%link
   114                              <3> %2:
   114 000027E5 E822FFFFFF          <2>  call dovoc
   114                              <2> %2_b:
   114 000027EA [ED0E0000]          <2>  dd %3
   114 000027EE 00000000<rept>      <2>  times 63 dd 0
   114 000028EA 00000000            <2>  dd %4
   115                              <1>   _vocab_ "compiler", compiler, comp_link, forth_b
   115                              <2>  code %1,%2
   115                              <3>  header %1,%2
   115                              <4> [section headers]
   115 000014BD [B3140000]          <4>  dd vlink
   115                              <4> %%link:
   115                              <4> %2n:
   115                              <4> %xdefine vlink %%link
   115 000014C1 08                  <4>  db (%%name-$-1)+imm
   115 000014C2 636F6D70696C6572    <4>  db %1
   115                              <4> %%name:
   115 000014CA [F2280000]          <4>  dd %2
   115                              <4> %xdefine imm 0
   115                              <4> 
   115                              <4> section list
   115 000028EE [C1140000]          <4>  dd %%link
   115                              <3> %2:
   115 000028F2 E815FEFFFF          <2>  call dovoc
   115                              <2> %2_b:
   115 000028F7 [CD130000]          <2>  dd %3
   115 000028FB 00000000<rept>      <2>  times 63 dd 0
   115 000029F7 [EA270000]          <2>  dd %4
   116                              <1>   _vocab_ "root", root, rootn, compiler_b
   116                              <2>  code %1,%2
   116                              <3>  header %1,%2
   116                              <4> [section headers]
   116 000014CE [C1140000]          <4>  dd vlink
   116                              <4> %%link:
   116                              <4> %2n:
   116                              <4> %xdefine vlink %%link
   116 000014D2 04                  <4>  db (%%name-$-1)+imm
   116 000014D3 726F6F74            <4>  db %1
   116                              <4> %%name:
   116 000014D7 [FF290000]          <4>  dd %2
   116                              <4> %xdefine imm 0
   116                              <4> 
   116                              <4> section list
   116 000029FB [D2140000]          <4>  dd %%link
   116                              <3> %2:
   116 000029FF E808FDFFFF          <2>  call dovoc
   116                              <2> %2_b:
   116 00002A04 [D2140000]          <2>  dd %3
   116 00002A08 00000000<rept>      <2>  times 63 dd 0
   116 00002B04 [F7280000]          <2>  dd %4
   117                              <1> 
   118                              <1> ; ========================================================================
   119                              <1> 
   120                              <1> 
   121                              <1> 
   122                              <1> 
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1> 
   127                              <1> 
   128                              <1> 
   129                              <1> 
   130                              <1> 
   131                              <1> 
   132                              <1> 
   133                              <1> 
   143                                    %include "rehash.s"       ; MUST BE INCLUDED AFTER VOCABS.S
     1                              <1> ; rehash.s
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> lhead:
     5 00002B08 [D2140000]          <1>   dd vlink
     6                              <1> 
     7                              <1> ; ------------------------------------------------------------------------
     8                              <1> ; link header at esi into vocabulary at edi
     9                              <1> 
    10                              <1> link:
    11 00002B0C 8A3E                <1>   mov bh, [esi]             ; get nfa hash
    12 00002B0E 80E71F              <1>   and bh, 01fh
    13 00002B11 8A5E01              <1>   mov bl, [esi+1]
    14 00002B14 00DB                <1>   add bl, bl
    15 00002B16 80FF01              <1>   cmp bh, 1
    16 00002B19 7405                <1>   je .L1
    17 00002B1B 025E02              <1>   add bl, [esi+2]           ; add second char to total
    18 00002B1E 00DB                <1>   add bl, bl                ; *2
    19                              <1> 
    20                              <1> .L1:
    21 00002B20 00FB                <1>   add bl, bh                ; add nfa length to hash
    22 00002B22 83E33F              <1>   and ebx, 03fh             ; there are 64 threads per vocabulary
    23                              <1> 
    24 00002B25 C1E302              <1>   shl ebx, 2                ; and 4 bytes per thread entry
    25 00002B28 01FB                <1>   add ebx, edi              ; point ebx at thread to link into
    26                              <1> 
    27 00002B2A 8B03                <1>   mov eax, [ebx]            ; get header currently at end of this thread
    28 00002B2C 8933                <1>   mov [ebx], esi            ; put new header at end of this thread
    29 00002B2E 8946FC              <1>   mov [esi-4], eax          ; link new end to old end
    30 00002B31 C3                  <1>   ret
    31                              <1> 
    32                              <1> ; ------------------------------------------------------------------------
    33                              <1> ; hashify one vocabulary pointed to by edi
    34                              <1> 
    35                              <1> hashvoc:
    36 00002B32 31C9                <1>   xor ecx, ecx              ; number of words in thread 0
    37 00002B34 8B37                <1>   mov esi, [edi]            ; point esi at end of vocabularies thread 0
    38                              <1> 
    39                              <1>   ; nasm chained all words onto the first thread.
    40                              <1> 
    41                              <1> .L0:
    42 00002B36 56                  <1>   push esi                  ; save address of header to rehash
    43 00002B37 41                  <1>   inc ecx                   ; keep count
    44 00002B38 8B76FC              <1>   mov esi, [esi-4]          ; scan back to previous word in thread
    45 00002B3B 09F6                <1>   or esi, esi               ; found the end of the chain ?
    46 00002B3D 75F7                <1>   jnz .L0
    47                              <1> 
    48                              <1>   ; reached end of thread zero. nfas of all words in this thread are now
    49                              <1>   ; on the stack and ecx it the total thereof
    50                              <1> 
    51                              <1> .L1:
    52 00002B3F C70700000000        <1>   mov dword [edi], 0        ; erase first chain of vocabulary
    53                              <1> .L2:
    54 00002B45 5E                  <1>   pop esi                   ; get nfa of header to hash
    55 00002B46 E8C1FFFFFF          <1>   call link                 ; link it to one of the threads
    56 00002B4B 49                  <1>   dec ecx                   ; count down
    57 00002B4C 75F7                <1>   jne .L2                   ; and...
    58 00002B4E C3                  <1>   ret
    59                              <1> 
    60                              <1> ; ------------------------------------------------------------------------
    61                              <1> 
    62                              <1> _rehash:
    63 00002B4F B8[FC0C0000]        <1>   mov eax, noop             ; neuter this word so it can never be run
    64 00002B54 A3[6D260000]        <1>   mov dword [rehash_b], eax ;  again
    65                              <1> 
    66 00002B59 56                  <1>   push esi                  ; save ip
    67 00002B5A 53                  <1>   push ebx                  ; save top of parameter stack
    68 00002B5B 8B3D[7A260000]      <1>   mov edi, dword [voclink_b] ;edi points to first vocabulary to rehash
    69                              <1> 
    70                              <1> .L0:
    71 00002B61 E8CCFFFFFF          <1>   call hashvoc              ; hashify one vocabulary
    72 00002B66 8BBF00010000        <1>   mov edi, dword [edi+256]  ; get address of next vocabulary
    73 00002B6C 09FF                <1>   or edi, edi               ; end of vocabulary chain ?
    74 00002B6E 75F1                <1>   jnz .L0
    75                              <1> 
    76 00002B70 5B                  <1>   pop ebx                   ; yes... restore top of stack and ip
    77 00002B71 5E                  <1>   pop esi
    78                              <1>   next
    78 00002B72 E994E1FFFF          <2>  jmp _next
    79                              <1> 
    80                              <1> ; ========================================================================
   144                                  
   145                                  ; ------------------------------------------------------------------------
   146                                  ; do not define any words below this point unless they are 100% headerless
   147                                  ; ------------------------------------------------------------------------
   148                                  
   149                                    %include "init.s"         ; forth initialization
     1                              <1> ; init.s    - initialize forth environment
     2                              <1> ; ------------------------------------------------------------------------
     3                              <1> 
     4                              <1> ; ------------------------------------------------------------------------
     5                              <1> ; allocate return stack of 4k (one page)
     6                              <1> 
     7                              <1> alloc_ret:
     8 00002B77 BB00100000          <1>   mov ebx, STKSZ
     9 00002B7C B903000000          <1>   mov ecx, 3
    10 00002B81 BA22000000          <1>   mov edx, $22
    11 00002B86 E893D5FFFF          <1>   call _fetchmap
    12 00002B8B 0500100000          <1>   add eax, STKSZ            ; point to top of buffer we just allocated
    13 00002B90 89C5                <1>   mov ebp, eax              ; set return stack pointer
    14 00002B92 C3                  <1>   ret
    15                              <1> 
    16                              <1> ; ------------------------------------------------------------------------
    17                              <1> ; prepare forths list and head space (make it ALL +rwx }:)
    18                              <1> 
    19                              <1> init_mem:
    20 00002B93 B87D000000          <1>   mov eax, $7d              ; sys mprotect all memory as +rwx
    21 00002B98 89FB                <1>   mov ebx, edi
    22 00002B9A B900001000          <1>   mov ecx, MEMSZ
    23 00002B9F BA07000000          <1>   mov edx, 7
    24 00002BA4 CD80                <1>   int $80                   ; make the entire program space rwx
    25 00002BA6 C3                  <1>   ret
    26                              <1> 
    27                              <1> ; ------------------------------------------------------------------------
    28                              <1> 
    29                              <1> init_vars:
    30 00002BA7 C705[CC000000]0000- <1>   mov dword [qtty_b], 0     ; terminal properties not set yet
    30 00002BAF 0000                <1>
    31 00002BB1 C705[7E000000]0000- <1>   mov dword [shebang_b], 0  ; not running as a script
    31 00002BB9 0000                <1>
    32                              <1> 
    33 00002BBB 89F8                <1>   mov eax, edi              ; set fload nest stack at end of memory
    34 00002BBD 054BFF0F00          <1>   add eax, MEMSZ-1-FLDSZ
    35 00002BC2 A3[15200000]        <1>   mov [lsp_b], eax          ; dont nest floads!!!
    36                              <1> 
    37 00002BC7 2D00040000          <1>   sub eax, TIBSZ            ; 1k for terminal input
    38 00002BCC A3[A1170000]        <1>   mov [tib_b], eax
    39 00002BD1 48                  <1>   dec eax
    40                              <1> 
    41 00002BD2 A3[23000000]        <1>   mov [thead_b], eax        ; mark upper bounds of head space
    42                              <1> 
    43 00002BD7 89F8                <1>   mov eax, edi              ; set address of top of list space
    44 00002BD9 0500000800          <1>   add eax, MEMSZ/2          ; split mem in 2
    45 00002BDE 05FF030000          <1>   add eax, $3ff
    46 00002BE3 2500FCFFFF          <1>   and eax, -$400
    47 00002BE8 A3[041C0000]        <1>   mov [hp_b], eax           ; address for headers to be relocated to
    48 00002BED A3[30000000]        <1>   mov [bhead_b], eax        ; needed by fsave - bottom of head space
    49 00002BF2 C3                  <1>   ret
    50                              <1> 
    51                              <1> ; ------------------------------------------------------------------------
    52                              <1> 
    53                              <1> get_args:
    54 00002BF3 5A                  <1>   pop edx                   ; our return address (bleh)
    55 00002BF4 31C0                <1>   xor eax, eax
    56                              <1> 
    57 00002BF6 A3[57000000]        <1>   mov [argp_b], eax         ; pointer to argv[]
    58 00002BFB A3[64000000]        <1>   mov [envp_b], eax         ; pointer to envp[]
    59 00002C00 A3[71000000]        <1>   mov [auxp_b], eax         ; pointer to auxp[]
    60                              <1> 
    61 00002C05 59                  <1>   pop ecx                   ; argc
    62 00002C06 8F05[3D000000]      <1>   pop dword [arg0_b]        ; program name
    63 00002C0C 8925[57000000]      <1>   mov [argp_b], esp
    64 00002C12 8D348C              <1>   lea esi, [esp +4* ecx]    ; point to env vars
    65 00002C15 49                  <1>   dec ecx
    66 00002C16 890D[4A000000]      <1>   mov [argc_b], ecx         ; set argc
    67 00002C1C 8935[64000000]      <1>   mov [envp_b], esi         ; scan to end of env vars
    68                              <1> L0:
    69 00002C22 AD                  <1>   lodsd
    70 00002C23 83F800              <1>   cmp eax, 0
    71 00002C26 75FA                <1>   jne L0
    72 00002C28 46                  <1>   inc esi
    73 00002C29 8935[71000000]      <1>   mov [auxp_b], esi         ; point to aux vectors
    74 00002C2F FFE2                <1>   jmp edx
    75                              <1> 
    76                              <1> ; ------------------------------------------------------------------------
    77                              <1> ; not required but keeps users list space clean at start of world
    78                              <1> 
    79                              <1> clr_mem:
    80 00002C31 8B3D[F71B0000]      <1>   mov edi, [dp_b]           ; erase list space
    81 00002C37 8B0D[30000000]      <1>   mov ecx, [bhead_b]        ; address at top of list space plus 1
    82 00002C3D 29F9                <1>   sub ecx, edi
    83 00002C3F 31C0                <1>   xor eax, eax
    84 00002C41 F3AA                <1>   rep stosb                 ; erase entire unused part of list space
    85 00002C43 C3                  <1>   ret
    86                              <1> 
    87                              <1> ; ------------------------------------------------------------------------
    88                              <1> ; test if fd in ebx is a tty. return result in eax
    89                              <1> 
    90                              <1> _chk_tty:
    91 00002C44 B836000000          <1>   mov eax, $36              ; ioctl
    92 00002C49 B901540000          <1>   mov ecx, $5401            ; tcgets
    93 00002C4E 8B15[F71B0000]      <1>   mov edx, [dp_b]           ; here
    94 00002C54 CD80                <1>   int $80                   ; is handle ebx a tty?
    95 00002C56 83E801              <1>   sub eax, 1
    96 00002C59 19C0                <1>   sbb eax, eax              ; 0 = fales. -1 = true
    97 00002C5B C3                  <1>   ret
    98                              <1> 
    99                              <1> ; ------------------------------------------------------------------------
   100                              <1> 
   101                              <1> chk_tty:
   102 00002C5C 31DB                <1>   xor ebx, ebx              ; stdin
   103 00002C5E E8E1FFFFFF          <1>   call _chk_tty             ; test fd ebx = tty
   104 00002C63 A3[8B000000]        <1>   mov [intty_b], eax        ; store result for stdin
   105                              <1> 
   106 00002C68 BB01000000          <1>   mov ebx, 1                ; stdout
   107 00002C6D E8D2FFFFFF          <1>   call _chk_tty             ; get parameters for syscall
   108 00002C72 A3[98000000]        <1>   mov [outtty_b], eax       ; store result for stdout
   109 00002C77 C3                  <1>   ret
   110                              <1> 
   111                              <1> ; ------------------------------------------------------------------------
   112                              <1> ; entry point of process is a jump to this address
   113                              <1> 
   114                              <1> init:
   115 00002C78 BF[00000000]        <1>   mov edi, origin           ; point to entry point
   116 00002C7D 81E700F0FFFF        <1>   and edi, $0fffff000       ; mask to start of section address
   117                              <1> 
   118                              <1>   ; edi now points to the 0th byte of program memory belonging to this
   119                              <1>   ; process.  this is the address of the programs elf headers.
   120                              <1> 
   121 00002C83 E80BFFFFFF          <1>   call init_mem             ; sys_brk out to 1m and sys_mprotect to rwx
   122 00002C88 E8EAFEFFFF          <1>   call alloc_ret            ; allocate return stack
   123 00002C8D E815FFFFFF          <1>   call init_vars            ; initialize some forth variables
   124 00002C92 E85CFFFFFF          <1>   call get_args             ; set address of argp envp etc
   125 00002C97 E867F9FFFF          <1>   call unpack               ; relocate headers to allocated head space
   126 00002C9C E8BBFFFFFF          <1>   call chk_tty              ; chk if stdin/out are on a terminal
   127 00002CA1 E88BFFFFFF          <1>   call clr_mem              ; erase as yet unused list space
   128                              <1> 
   129 00002CA6 892D[DA020000]      <1>   mov [rp0_b], ebp          ; set address of bottom of return stack
   130 00002CAC 8925[CD020000]      <1>   mov [sp0_b], esp          ; set address of bottom of parameter stack
   131                              <1> 
   132                              <1>   ; NOW we can start running forth
   133                              <1> 
   134 00002CB2 E8B1E0FFFF          <1>   call nest                 ; the following is a colon definition
   135                              <1> 
   136 00002CB7 [D4000000]          <1>   dd _pdefault              ; hi priority defered init chain
   137 00002CBB [E1000000]          <1>   dd _default               ; std priority defered init chain
   138 00002CBF [EE000000]          <1>   dd _ldefault              ; low priority deferred init chain
   139 00002CC3 [EE230000]          <1>   dd quit                   ; run inner loop - never returns
   140                              <1> 
   141                              <1> ; ========================================================================
   150                                  
   151                                  ;-------------------------------------------------------------------------
   152                                  ;marks end of code space (where boot will set dp pointing to)
   153                                  
   154                                  ;note:   do not define anything at all below this point
   155                                  
   156                                  _end:                       ;when x4 loads, this is where headers are
   157                                  
   158                                  ;=========================================================================
